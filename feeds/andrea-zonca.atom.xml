<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andrea Zonca's blog - Andrea Zonca</title><link href="http://zonca.github.io/" rel="alternate"></link><link href="http://zonca.github.io/feeds/andrea-zonca.atom.xml" rel="self"></link><id>http://zonca.github.io/</id><updated>2019-12-02T12:00:00-08:00</updated><entry><title>Organize calendars for a large scientific collaboration</title><link href="http://zonca.github.io/2019/12/organize-calendar-collaboration.html" rel="alternate"></link><published>2019-12-02T12:00:00-08:00</published><updated>2019-12-02T12:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-12-02:/2019/12/organize-calendar-collaboration.html</id><summary type="html">&lt;p&gt;Many scientific collaborations have a central calendar, often hosted on Google Calendar,
to coordinate Teleconferences, meetings and events across timezones.&lt;/p&gt;
&lt;h3&gt;The issue&lt;/h3&gt;
&lt;p&gt;Most users are only interested in a small subset of the events, however Google Calendar
does not allow them to subscribe to single events. The central calendar admin …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many scientific collaborations have a central calendar, often hosted on Google Calendar,
to coordinate Teleconferences, meetings and events across timezones.&lt;/p&gt;
&lt;h3&gt;The issue&lt;/h3&gt;
&lt;p&gt;Most users are only interested in a small subset of the events, however Google Calendar
does not allow them to subscribe to single events. The central calendar admin could invite
each person to events, but that requires lots of work.&lt;/p&gt;
&lt;p&gt;So, users either subscribe to the whole calendar, but then have a huge clutter of un-interesting events,
or copy just a subset of the events to their calendars, but loose track of any rescheduling of the
original event.&lt;/p&gt;
&lt;h3&gt;Proposed solution&lt;/h3&gt;
&lt;p&gt;I recommend to split the events across multiple calendars, for example one for each working group,
or any other categorization where most users would be interested in all events in a calendar.
And possibly a "General" category with events that should interest the whole collaboration.&lt;/p&gt;
&lt;p&gt;Still, we can embed all of the calendars in a single webpage, see an example below where 2 calendars (Monday and Tuesday telecon calendars) are visualized together, &lt;a href="https://support.google.com/calendar/answer/41207?hl=en"&gt;see the Google Calendar documentation&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src="https://calendar.google.com/calendar/embed?height=600&amp;amp;wkst=1&amp;amp;bgcolor=%23ffffff&amp;amp;ctz=America%2FLos_Angeles&amp;amp;src=dTI2dnBkNnZvcm1qNHVucnVtajMzZzdwcGNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ&amp;amp;src=c2FwazM1OTVmcHRiZHVtOWdqZnJwdWxkbnNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ&amp;amp;color=%23DD4477&amp;amp;color=%236633CC" style="border-width:0" width="800" height="600" frameborder="0" scrolling="no"&gt;&lt;/iframe&gt;

&lt;p&gt;Users can click on the bottom "Add to Google Calendar" button and subscribe to a subset or all the calendars.
See the screenshot below, &lt;img alt="screenshot of add to Google Calendar" src="/images/add_google_calendar.png"&gt;.&lt;/p&gt;
&lt;p&gt;As an additional benefit, we can compartimentalize permissions more easily, e.g. leads of a working group
get writing access only to their relevant calendar/calendars.&lt;/p&gt;</content><category term="misc"></category><category term="google-calendar"></category></entry><entry><title>Simulate users on JupyterHub</title><link href="http://zonca.github.io/2019/10/loadtest-jupyterhub.html" rel="alternate"></link><published>2019-10-30T12:00:00-07:00</published><updated>2019-10-30T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-10-30:/2019/10/loadtest-jupyterhub.html</id><summary type="html">&lt;p&gt;I currently have 2 different strategies to deploy JupyterHub on top of Kubernetes on Jetstream:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;a href="https://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html"&gt;Kubespray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;a href="http://zonca.github.io/2019/06/kubernetes-jupyterhub-jetstream-magnum.html"&gt;Magnum&lt;/a&gt;, which also supports the &lt;a href="http://zonca.github.io/2019/09/kubernetes-jetstream-autoscaler.html"&gt;Cluster Autoscaler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this tutorial I'll show how to use Yuvi Pandas' &lt;a href="https://github.com/yuvipanda/hubtraf"&gt;&lt;code&gt;hubtraf&lt;/code&gt;&lt;/a&gt; to simulate load on JupyterHub, i.e. programmatically generate a predefined number of users …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I currently have 2 different strategies to deploy JupyterHub on top of Kubernetes on Jetstream:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;a href="https://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html"&gt;Kubespray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;a href="http://zonca.github.io/2019/06/kubernetes-jupyterhub-jetstream-magnum.html"&gt;Magnum&lt;/a&gt;, which also supports the &lt;a href="http://zonca.github.io/2019/09/kubernetes-jetstream-autoscaler.html"&gt;Cluster Autoscaler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this tutorial I'll show how to use Yuvi Pandas' &lt;a href="https://github.com/yuvipanda/hubtraf"&gt;&lt;code&gt;hubtraf&lt;/code&gt;&lt;/a&gt; to simulate load on JupyterHub, i.e. programmatically generate a predefined number of users connecting and executing notebooks on the system.&lt;/p&gt;
&lt;p&gt;This is especially useful to test the Cluster Autoscaler.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hubtraf&lt;/code&gt; assumes you are using the Dummy authenticator, which is the default installed by the &lt;code&gt;zero-to-jupyterhub&lt;/code&gt; helm chart. If you have configured another authenticator, temporarily disable it for testing purposes.&lt;/p&gt;
&lt;p&gt;First go through the &lt;a href="https://github.com/yuvipanda/hubtraf/blob/master/docs/index.rst#jupyterhub-traffic-simulator"&gt;&lt;code&gt;hubtraf&lt;/code&gt; documentation&lt;/a&gt; to understand its functionalities.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hubtraf&lt;/code&gt; also has a Helm recipe to run it within Kubernetes, but the simpler way is to test from your laptop, follow the [documentation of &lt;code&gt;hubtraf&lt;/code&gt;] to install the package and then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;hubtraf http://js-xxx-yyy.jetstream-cloud.org 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To simulate 2 users connecting to the system, you can then check with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get pods -n jhub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That the pods are being created successfully and check the logs on the command line from &lt;code&gt;hubtraf&lt;/code&gt; which explains what it is doing and tracks the time every operation takes, so it is useful to debug any delay in providing resources to users.&lt;/p&gt;
&lt;p&gt;Consider that volumes created by JupyterHub for the test users will remain in Kubernetes and in Openstack, therefore if you would like to use the same deployment for production, remember to cleanup the Kubernetes &lt;code&gt;PersistentVolume&lt;/code&gt; and &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; resources.&lt;/p&gt;
&lt;p&gt;Now we can test scalability of the deployment with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    hubtraf http://js-xxx-yyy.jetstream-cloud.org 100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you have asked the XSEDE support to increase the maximum number of volumes in Openstack in your allocation that by default is only 10. Otherwise edit &lt;code&gt;config_standard_storage.yaml&lt;/code&gt; and set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;singleuser&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Test the Cluster Autoscaler&lt;/h2&gt;
&lt;p&gt;If you followed the tutorial to deploy the Cluster Autoscaler on Magnum, you can launch &lt;code&gt;hubtraf&lt;/code&gt; to create a large number of pods, then check that some pods are "Running" and the ones that do not fit in the current nodes are "Pending":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get pods -n jhub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then check in the logs of the autoscaler that it detects that those pods are pending and requests additional nodes.
For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; kubectl logs -n kube-system cluster-autoscaler-hhhhhhh-uuuuuuu
I1031 &lt;span class="m"&gt;00&lt;/span&gt;:48:39.807384       &lt;span class="m"&gt;1&lt;/span&gt; scale_up.go:689&lt;span class="o"&gt;]&lt;/span&gt; Scale-up: setting group DefaultNodeGroup size to &lt;span class="m"&gt;2&lt;/span&gt;
I1031 &lt;span class="m"&gt;00&lt;/span&gt;:48:41.583449       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:101&lt;span class="o"&gt;]&lt;/span&gt; Increasing size by &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;-&amp;gt;2
I1031 &lt;span class="m"&gt;00&lt;/span&gt;:49:14.141351       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:67&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; cluster UPDATE_IN_PROGRESS status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After 4 or 5 minutes the new node should be available and should show up in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get nodes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can check that some user pods are now running on the new node:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get pods -n jhub -o wide&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my case the Autoscaler actually requested a 3rd node to accomodate all the users pods:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;I1031 &lt;span class="m"&gt;00&lt;/span&gt;:48:39.807384       &lt;span class="m"&gt;1&lt;/span&gt; scale_up.go:689&lt;span class="o"&gt;]&lt;/span&gt; Scale-up: setting group DefaultNodeGroup size to &lt;span class="m"&gt;2&lt;/span&gt;
I1031 &lt;span class="m"&gt;00&lt;/span&gt;:48:41.583449       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:101&lt;span class="o"&gt;]&lt;/span&gt; Increasing size by &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;-&amp;gt;2
I1031 &lt;span class="m"&gt;00&lt;/span&gt;:49:14.141351       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:67&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; cluster UPDATE_IN_PROGRESS status
I1031 &lt;span class="m"&gt;00&lt;/span&gt;:52:51.308054       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:67&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; cluster UPDATE_COMPLETE status
I1031 &lt;span class="m"&gt;00&lt;/span&gt;:53:01.315179       &lt;span class="m"&gt;1&lt;/span&gt; scale_up.go:689&lt;span class="o"&gt;]&lt;/span&gt; Scale-up: setting group DefaultNodeGroup size to &lt;span class="m"&gt;3&lt;/span&gt;
I1031 &lt;span class="m"&gt;00&lt;/span&gt;:53:02.996583       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:101&lt;span class="o"&gt;]&lt;/span&gt; Increasing size by &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt;-&amp;gt;3
I1031 &lt;span class="m"&gt;00&lt;/span&gt;:53:35.607158       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:67&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; cluster UPDATE_IN_PROGRESS status
I1031 &lt;span class="m"&gt;00&lt;/span&gt;:56:41.834151       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:67&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; cluster UPDATE_COMPLETE status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Moreover Cluster Autoscaler also provides useful information in the status of each "Pending" node. For example if it detects that it is useless to create a new node because the node is "Pending" for some other reason (e.g. volume quota reached), this infomation will be accessible using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl describe node -n jhub jupyter-xxxxxxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the simulated users disconnect, &lt;code&gt;hubtraf&lt;/code&gt; has a default of about 5 minutes, the autoscaler waits for the configured amount of minutes, by default it is 10 minutes, in my deployment it is 1 minute to simplify testing, see the &lt;code&gt;cluster-autoscaler-deployment-master.yaml&lt;/code&gt; file.
After this delay, the autoscaler scales down the size of the cluster, it is a 2 step process, it first terminates the Openstack Virtual machine and then adjusts the size of the Magnum cluster (&lt;code&gt;node_count&lt;/code&gt;), you can monitor the process using &lt;code&gt;openstack server list&lt;/code&gt; and &lt;code&gt;openstack coe cluster list&lt;/code&gt;, and the log of the autoscaler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;I1101 &lt;span class="m"&gt;06&lt;/span&gt;:31:10.223660       &lt;span class="m"&gt;1&lt;/span&gt; scale_down.go:882&lt;span class="o"&gt;]&lt;/span&gt; Scale-down: removing empty node k8s-e2iw7axmhym7-minion-1 
I1101 &lt;span class="m"&gt;06&lt;/span&gt;:31:16.081223       &lt;span class="m"&gt;1&lt;/span&gt; magnum_manager_heat.go:276&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; stack UPDATE_IN_PROGRESS status
I1101 &lt;span class="m"&gt;06&lt;/span&gt;:32:17.061860       &lt;span class="m"&gt;1&lt;/span&gt; magnum_manager_heat.go:276&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; stack UPDATE_COMPLETE status
I1101 &lt;span class="m"&gt;06&lt;/span&gt;:32:49.826439       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:67&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; cluster UPDATE_IN_PROGRESS status
I1101 &lt;span class="m"&gt;06&lt;/span&gt;:33:21.588022       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:67&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; cluster UPDATE_COMPLETE status
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Thanks Yuvi Panda for providing &lt;code&gt;hubtraf&lt;/code&gt;, thanks Julien Chastang for testing my deployments.&lt;/p&gt;</content><category term="misc"></category><category term="kubernetes"></category><category term="openstack"></category><category term="jetstream"></category><category term="jupyterhub"></category></entry><entry><title>Execute Jupyter Notebooks not interactively</title><link href="http://zonca.github.io/2019/09/batch-notebook-execution.html" rel="alternate"></link><published>2019-09-23T12:00:00-07:00</published><updated>2019-09-23T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-09-23:/2019/09/batch-notebook-execution.html</id><summary type="html">&lt;p&gt;Over the years, I have explored how to scale up easily computation through
Jupyter Notebooks by executing them not-interactively, possibily parametrized
and remotely. This is mostly for reference.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zonca/nbsubmit"&gt;&lt;code&gt;nbsubmit&lt;/code&gt;&lt;/a&gt; is a Python package which has Python API to send a local notebook for execution on a remote SLURM cluster, for …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Over the years, I have explored how to scale up easily computation through
Jupyter Notebooks by executing them not-interactively, possibily parametrized
and remotely. This is mostly for reference.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zonca/nbsubmit"&gt;&lt;code&gt;nbsubmit&lt;/code&gt;&lt;/a&gt; is a Python package which has Python API to send a local notebook for execution on a remote SLURM cluster, for example Comet, see &lt;a href="https://github.com/zonca/nbsubmit/blob/master/example/multiple_jobs/submit_multiple_jobs.ipynb"&gt;an example&lt;/a&gt;. This project is not maintained right now.&lt;/li&gt;
&lt;li&gt;Back in 2017 I tested submitting notebooks to Open Science Grid, see &lt;a href="https://github.com/zonca/batch-notebooks-condor"&gt;the &lt;code&gt;batch-notebooks-condor&lt;/code&gt; repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Back in 2016 I created scripts to template a Jupyter Notebook and launch SLURM jobs, see &lt;a href="https://github.com/sdsc/sdsc-summer-institute-2016/blob/master/hpc3_python_hpc/slurm.shared.template"&gt;&lt;code&gt;slurm.shared.template&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/sdsc/sdsc-summer-institute-2016/blob/master/hpc3_python_hpc/runipyloop.sh"&gt;&lt;code&gt;runipyloop.sh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="jupyter"></category><category term="notebook"></category><category term="condor"></category></entry><entry><title>Deploy Cluster Autoscaler for Kubernetes on Jetstream</title><link href="http://zonca.github.io/2019/09/kubernetes-jetstream-autoscaler.html" rel="alternate"></link><published>2019-09-12T12:00:00-07:00</published><updated>2019-09-12T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-09-12:/2019/09/kubernetes-jetstream-autoscaler.html</id><summary type="html">&lt;p&gt;The &lt;a href="https://github.com/kubernetes/autoscaler"&gt;Kubernetes Cluster Autoscaler&lt;/a&gt; is a service
that runs within a Kubernetes cluster and when there are not enough resources to accomodate
the pods that are queued to run, it contacts the API of the cloud provider to create
more Virtual Machines to join the Kubernetes Cluster.&lt;/p&gt;
&lt;p&gt;Initially the Cluster …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="https://github.com/kubernetes/autoscaler"&gt;Kubernetes Cluster Autoscaler&lt;/a&gt; is a service
that runs within a Kubernetes cluster and when there are not enough resources to accomodate
the pods that are queued to run, it contacts the API of the cloud provider to create
more Virtual Machines to join the Kubernetes Cluster.&lt;/p&gt;
&lt;p&gt;Initially the Cluster Autoscaler only supported commercial cloud provides, but back in
March 2019 &lt;a href="https://github.com/kubernetes/autoscaler/pull/1690"&gt;a user contributed Openstack support based on Magnum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First step you should have a Magnum-based deployment running on Jetstream,
see &lt;a href="https://zonca.github.io/2019/06/kubernetes-jupyterhub-jetstream-magnum.html"&gt;my recent tutorial about that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Therefore you should also have already a copy of the repository of all configuration
files checked out on your local machine that you are using to interact with the openstack API,
if not:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and enter the folder dedicated to the autoscaler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cd jupyterhub-deploy-kubernetes-jetstream/kubernetes_magnum/autoscaler&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setup credentials&lt;/h2&gt;
&lt;p&gt;We first create the service account needed by the autoscaler to interact with the Kubernetes API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f cluster-autoscaler-svcaccount.yaml 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we need to provide all connection details for the autoscaler to interact with the Openstack API,
those are contained in the &lt;code&gt;cloud-config&lt;/code&gt; of our cluster available in the master node and setup
by Magnum.
Get the &lt;code&gt;IP&lt;/code&gt; of your master node from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openstack server list
&lt;span class="nv"&gt;IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xxx.xxx.xxx.xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now ssh into the master node and access the &lt;code&gt;cloud-config&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh fedora@&lt;span class="nv"&gt;$IP&lt;/span&gt;
cat /etc/kubernetes/cloud-config 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now copy the &lt;code&gt;[Global]&lt;/code&gt; section at the end of &lt;code&gt;cluster-autoscaler-secret.yaml&lt;/code&gt; on the local machine.
Also remove the line of &lt;code&gt;ca-file&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f cluster-autoscaler-secret.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Launch the Autoscaler deployment&lt;/h2&gt;
&lt;p&gt;Create the Autoscaler deployment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f cluster-autoscaler-deployment-master.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively, I also added a version for a cluster where we are not deploying pods on master &lt;code&gt;cluster-autoscaler-deployment.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Check that the deployment is active:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n kube-system get pods
NAME                   DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
cluster-autoscaler     &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="m"&gt;0&lt;/span&gt;           10s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And check its logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n kube-system logs cluster-autoscaler-59f4cf4f4-4k4p2

I0905 &lt;span class="m"&gt;05&lt;/span&gt;:29:21.589062       &lt;span class="m"&gt;1&lt;/span&gt; leaderelection.go:217&lt;span class="o"&gt;]&lt;/span&gt; attempting to acquire leader lease  kube-system/cluster-autoscaler...
I0905 &lt;span class="m"&gt;05&lt;/span&gt;:29:39.412449       &lt;span class="m"&gt;1&lt;/span&gt; leaderelection.go:227&lt;span class="o"&gt;]&lt;/span&gt; successfully acquired lease kube-system/cluster-autoscaler
I0905 &lt;span class="m"&gt;05&lt;/span&gt;:29:43.896557       &lt;span class="m"&gt;1&lt;/span&gt; magnum_manager_heat.go:293&lt;span class="o"&gt;]&lt;/span&gt; For stack ID 17ab3ae7-1a81-43e6-98ec-b6ffd04f91d3, stack name is k8s-lu3bksbwsln3
I0905 &lt;span class="m"&gt;05&lt;/span&gt;:29:44.146319       &lt;span class="m"&gt;1&lt;/span&gt; magnum_manager_heat.go:310&lt;span class="o"&gt;]&lt;/span&gt; Found nested kube_minions stack: name k8s-lu3bksbwsln3-kube_minions-r4lhlv5xuwu3, ID d0590824-cc70-4da5-b9ff-8581d99c666b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you redeploy the cluster and keep a older authentication, you'll see "Authentication failed" in the logs of the autoscaler pod, you need to update the secret every time you redeploy the cluster.&lt;/p&gt;
&lt;h2&gt;Test the autoscaler&lt;/h2&gt;
&lt;p&gt;Now we need to produce a significant load on the cluster so that the autoscaler is triggered to request Openstack Magnum to create more Virtual Machines.&lt;/p&gt;
&lt;p&gt;We can create a deployment of the NGINX container (any other would work for this test):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create deployment autoscaler-demo --image&lt;span class="o"&gt;=&lt;/span&gt;nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then create a large number of replicas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl scale deployment autoscaler-demo --replicas&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;300&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are using 2 nodes with a large amount of memory and CPU, so they can accommodate more then 200 of those pods. The rest remains in the queue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl get deployment autoscaler-demo
NAME              DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
autoscaler-demo   &lt;span class="m"&gt;300&lt;/span&gt;       &lt;span class="m"&gt;300&lt;/span&gt;       &lt;span class="m"&gt;300&lt;/span&gt;          &lt;span class="m"&gt;213&lt;/span&gt;         18m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And this triggers the autoscaler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl -n kube-system logs cluster-autoscaler-59f4cf4f4-4k4p2

I0905 &lt;span class="m"&gt;05&lt;/span&gt;:34:47.401149       &lt;span class="m"&gt;1&lt;/span&gt; scale_up.go:689&lt;span class="o"&gt;]&lt;/span&gt; Scale-up: setting group DefaultNodeGroup size to &lt;span class="m"&gt;2&lt;/span&gt;
I0905 &lt;span class="m"&gt;05&lt;/span&gt;:34:49.267280       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:101&lt;span class="o"&gt;]&lt;/span&gt; Increasing size by &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;-&amp;gt;2
I0905 &lt;span class="m"&gt;05&lt;/span&gt;:35:22.222387       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:67&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; cluster UPDATE_IN_PROGRESS status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check also in the Openstack API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openstack coe cluster list
+------+------+---------+------------+--------------+--------------------+
&lt;span class="p"&gt;|&lt;/span&gt; uuid &lt;span class="p"&gt;|&lt;/span&gt; name &lt;span class="p"&gt;|&lt;/span&gt; keypair &lt;span class="p"&gt;|&lt;/span&gt; node_count &lt;span class="p"&gt;|&lt;/span&gt; master_count &lt;span class="p"&gt;|&lt;/span&gt; status             &lt;span class="p"&gt;|&lt;/span&gt;
+------+------+---------+------------+--------------+--------------------+
&lt;span class="p"&gt;|&lt;/span&gt; 09fcf&lt;span class="p"&gt;|&lt;/span&gt; k8s  &lt;span class="p"&gt;|&lt;/span&gt; comet   &lt;span class="p"&gt;|&lt;/span&gt;          &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;            &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; UPDATE_IN_PROGRESS &lt;span class="p"&gt;|&lt;/span&gt;
+------+------+---------+------------+--------------+--------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It takes about 4 minutes for a new VM to boot, be configured by Magnum and join the Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;Checking the logs again should show another line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;I0912 &lt;span class="m"&gt;17&lt;/span&gt;:18:28.290987       &lt;span class="m"&gt;1&lt;/span&gt; magnum_nodegroup.go:67&lt;span class="o"&gt;]&lt;/span&gt; Waited &lt;span class="k"&gt;for&lt;/span&gt; cluster UPDATE_COMPLETE status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you should have all 3 nodes available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl get nodes
NAME                        STATUS   ROLES    AGE   VERSION
k8s-6bawhy45wr5t-master-0   Ready    master   38m   v1.11.1
k8s-6bawhy45wr5t-minion-0   Ready    &amp;lt;none&amp;gt;   38m   v1.11.1
k8s-6bawhy45wr5t-minion-1   Ready    &amp;lt;none&amp;gt;   30m   v1.11.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and all 300 NGINX containers deployed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl get deployments
NAME              DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
autoscaler-demo   &lt;span class="m"&gt;300&lt;/span&gt;       &lt;span class="m"&gt;300&lt;/span&gt;       &lt;span class="m"&gt;300&lt;/span&gt;          &lt;span class="m"&gt;300&lt;/span&gt;         35m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also test scaling down by scaling back the number of NGINX containers to only a few and check in the logs
of the autoscaler that this process triggers the scale-down process.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;cluster-autoscaler-deployment-master.yaml&lt;/code&gt; I have configured the scale down process to trigger just after 1 minute, to simplify testing. For production, better increase this to 10 minutes or more. Check the &lt;a href="https://github.com/zonca/autoscaler/blob/cluster-autoscaler-1.14-magnum/cluster-autoscaler/FAQ.md"&gt;documentation of Cluster Autoscaler 1.14&lt;/a&gt; for all other available options.&lt;/p&gt;
&lt;h2&gt;Note about the Cluster Autoscaler container&lt;/h2&gt;
&lt;p&gt;The Magnum provider was added in Cluster Autoscaler 1.15, however this version is not compatible with Kubernetes 1.11 which is currently available on Jetstream. Therefore I have taken the development version of Cluster Autoscaler 1.14 and compiled it myself. I also noticed that the scale down process was not working due to incompatible IDs when the Cloud Provider tried to lookup the ID of a Minion in the Stack. I am now directly using the MachineID instead of going through these indices. This version is available in &lt;a href="https://github.com/zonca/autoscaler/tree/cluster-autoscaler-1.14-magnum"&gt;my fork of &lt;code&gt;autoscaler&lt;/code&gt;&lt;/a&gt; and it is built into docker containers on the &lt;a href="https://cloud.docker.com/repository/docker/zonca/k8s-cluster-autoscaler-jetstream"&gt;&lt;code&gt;zonca/k8s-cluster-autoscaler-jetstream&lt;/code&gt; repository on Docker Hub&lt;/a&gt;.
The image tags are the short version of the repository git commit hash.&lt;/p&gt;
&lt;p&gt;I build the container using the &lt;code&gt;run_gobuilder.sh&lt;/code&gt; and &lt;code&gt;run_build_autoscaler_container.sh&lt;/code&gt; scripts included in the repository.&lt;/p&gt;
&lt;h2&gt;Note about images used by Magnum&lt;/h2&gt;
&lt;p&gt;I have tested this deployment using the &lt;code&gt;Fedora-Atomic-27-20180419&lt;/code&gt; image on Jetstream at Indiana University.
The Fedora Atomic 28 image had a long hang-up during boot and took more than 10 minutes to start and that caused timeout in the autoscaler and anyway it would have been too long for a user waiting to start a notebook.&lt;/p&gt;
&lt;p&gt;I also tried updating the Fedora Atomic 28 image with &lt;code&gt;sudo atomic host upgrade&lt;/code&gt; and while this fixed the slow startup issue, it generated a broken Kubernetes installation, i.e. the Kubernetes services didn't detect the master node as part of the cluster, &lt;code&gt;kubectl get nodes&lt;/code&gt; only showed the minion.&lt;/p&gt;</content><category term="misc"></category><category term="kubernetes"></category><category term="openstack"></category><category term="jetstream"></category><category term="jupyterhub"></category></entry><entry><title>Create a Github account for your research group with free private repositories</title><link href="http://zonca.github.io/2019/08/github-for-research-groups.html" rel="alternate"></link><published>2019-08-24T15:00:00-07:00</published><updated>2019-08-24T15:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-08-24:/2019/08/github-for-research-groups.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/"&gt;Github&lt;/a&gt; allows a research group to create their own webpage where they can host, share and develop their software using the &lt;code&gt;git&lt;/code&gt; version control system and the powerful Github online issue-tracking interface.&lt;/p&gt;
&lt;p&gt;Github offers unlimited private and public repositories to research groups and classrooms.
Private repositories are useful for early …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/"&gt;Github&lt;/a&gt; allows a research group to create their own webpage where they can host, share and develop their software using the &lt;code&gt;git&lt;/code&gt; version control system and the powerful Github online issue-tracking interface.&lt;/p&gt;
&lt;p&gt;Github offers unlimited private and public repositories to research groups and classrooms.
Private repositories are useful for early stages of development or if it is necessary to keep software secret before publication, at publication they can easily switched to public repositories and free up their slot.&lt;/p&gt;
&lt;p&gt;They also provide free data packs for &lt;a href="https://git-lfs.github.com/"&gt;&lt;code&gt;git-lfs&lt;/code&gt;(Large File Support)&lt;/a&gt; which is useful to store large amount of binary data together with your software in the same repository, without actually committing the files into &lt;code&gt;git&lt;/code&gt; but using a support server. Just go into "Settings" for your organization and under "Billing" add data packs, you will notice that the cost is $0.&lt;/p&gt;
&lt;p&gt;Here the steps to set this up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a user account on Github and choose the free plan, use your &lt;code&gt;.edu&lt;/code&gt; email address&lt;/li&gt;
&lt;li&gt;Create an organization account for your research group&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://education.github.com/"&gt;https://education.github.com/&lt;/a&gt; and click on "Get benefits"&lt;/li&gt;
&lt;li&gt;Choose what is your position, e.g. Researcher and select you want a discount for an organization&lt;/li&gt;
&lt;li&gt;Choose the organization you created earlier and confirm that it is a "Research group"&lt;/li&gt;
&lt;li&gt;Add details about your Research group&lt;/li&gt;
&lt;li&gt;Finally you need to upload a picture of your University ID card and write how you plan on using the repositories&lt;/li&gt;
&lt;li&gt;Within a week at most, but generally in less than 24 hours, you will be approved for unlimited private repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the organization is created, you can add key team members to the "Owners" group, and then create another group for students and collaborators.&lt;/p&gt;
&lt;p&gt;Consider also that is not necessary for every collaborator to have write access to your repositories. My recommendation is to ask a more experienced team member to administer the central repository, ask the students to fork the repository under their user accounts (forks of private repositories are always private, free and don't use any slot), and then &lt;a href="https://help.github.com/articles/using-pull-requests"&gt;send a pull request&lt;/a&gt; to the central repository for the administrator to review, discuss and merge.&lt;/p&gt;
&lt;p&gt;See for example the organization account of the &lt;a href="https://github.com/dib-lab"&gt;"The Lab for Data Intensive Biology" led by Dr. C. Titus Brown&lt;/a&gt; where they share code, documentation and papers. Open Science!!&lt;/p&gt;
&lt;p&gt;Other suggestions on the setup very welcome!&lt;/p&gt;</content><category term="misc"></category><category term="github"></category><category term="git"></category><category term="openscience"></category></entry><entry><title>Ship large files with Python packages</title><link href="http://zonca.github.io/2019/08/large-files-python-packages.html" rel="alternate"></link><published>2019-08-21T18:00:00-07:00</published><updated>2019-08-21T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-08-21:/2019/08/large-files-python-packages.html</id><summary type="html">&lt;p&gt;It is often useful to ship large data files together with a Python package,
a couple of scenarios are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data necessary to the functionality provided by the package, for example images, any binary or large text dataset, they could be either required just for a subset of the functionality of …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;It is often useful to ship large data files together with a Python package,
a couple of scenarios are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data necessary to the functionality provided by the package, for example images, any binary or large text dataset, they could be either required just for a subset of the functionality of the package or for all of it&lt;/li&gt;
&lt;li&gt;data necessary for unit or integration testing, both example inputs and expected outputs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If data are collectively less than 2 GB compressed and do not change very often, a simple and a bit hacky solution is to use GitHub release assets. For each packaged release on GitHub it is possible to attach one or more assets smaller than 2 GB. You can then attach data to each release, the downside is that users need to make sure to use the correct dataset for the release they are using and the first time they use the software the need to install the Python package and also download the dataset and install it in the right folder. See &lt;a href="https://gist.github.com/zonca/52857f2425942725fb74595c4f8600e9"&gt;an example script to upload from the command line&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If data files are individually less than 10 MB and collectively less than 100 MB you can directly add them into the Python package. This is the easiest and most convenient option, for example the &lt;a href="https://github.com/astropy/package-template"&gt;&lt;code&gt;astropy package template&lt;/code&gt;&lt;/a&gt; automatically adds to the package any file inside the &lt;code&gt;packagename/data&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;For larger datasets I recommend to host the files externally and use the &lt;a href="http://docs.astropy.org/en/stable/utils/#module-astropy.utils.data"&gt;&lt;code&gt;astropy.utils.data&lt;/code&gt; module&lt;/a&gt;.
This module automates the process of retrieving a file from a remote server and caching it locally (in the users home folder), next time the user needs it, it is automatically retrieved from the cache:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;dataurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://my-web-server.ucsd.edu/test-data/&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dataurl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataurl&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;remote_timeout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local_file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pkg_data_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myfile.jpg)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to host there files publicly, I have a few options.&lt;/p&gt;
&lt;h3&gt;Host on a dedicated GitHub repository&lt;/h3&gt;
&lt;p&gt;If files are individually less than 100MB and collectively a few GB, you can create a dedicated repository on GitHub and push there your files.
Then &lt;a href="https://help.github.com/en/articles/what-is-github-pages"&gt;activate GitHub Pages&lt;/a&gt; so that those files are published at &lt;code&gt;https://your-organization.github.io/your-repository/&lt;/code&gt;.
Then use this URL as &lt;code&gt;dataurl&lt;/code&gt; in the above script.&lt;/p&gt;
&lt;h3&gt;Host on a Supercomputer or own server&lt;/h3&gt;
&lt;p&gt;Some Supercomputers offer the feature of providing public web access from specific folders, for example NERSC allows user to publish web-pages publicly, see &lt;a href="https://www.nersc.gov/users/computational-systems/pdsf/software-and-tools/hosting-webpages/"&gt;their documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is very useful for huge datasets because you can automatically detect if the package is being run at NERSC and then automatically access the files with their path instead of downloading them.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_data_from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Retrieves input templates from remote server,&lt;/span&gt;
&lt;span class="sd"&gt;    in case data is available in one of the PREDEFINED_DATA_FOLDERS defined above,&lt;/span&gt;
&lt;span class="sd"&gt;    e.g. at NERSC, those are directly returned.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;PREDEFINED_DATA_FOLDERS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access data from &lt;/span&gt;&lt;span class="si"&gt;{full_path}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;full_path&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dataurl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DATAURL&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;remote_timeout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Retrieve data for &lt;/span&gt;&lt;span class="si"&gt;{filename}&lt;/span&gt;&lt;span class="s2"&gt; (if not cached already)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;map_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pkg_data_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;show_progress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;map_out&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similar setup can be achieved on a GNU/Linux server, for example a powerful machine used by all members of a scientific team, where a folder is dedicated to host these data and is also published online with Apache or NGINX.&lt;/p&gt;
&lt;p&gt;The main downside of this approach is that there is no built-in version control. One possibility is to enforce a policy where no files are ever overwritten and version control is automatically achieved with filenames. Otherwise, use &lt;a href="https://git-lfs.github.com/"&gt;&lt;code&gt;git lfs&lt;/code&gt;&lt;/a&gt; in that folder to track any change in a dedicated local &lt;code&gt;git&lt;/code&gt; repository, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
git lfs track &lt;span class="s2"&gt;&amp;quot;*.fits&amp;quot;&lt;/span&gt;
git add &lt;span class="s2"&gt;&amp;quot;*.fits&amp;quot;&lt;/span&gt;
git commit -m &lt;span class="s2"&gt;&amp;quot;initial version of all FITS files&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This method tracks the checksum of all the binary files and helps managing the history, even if only locally (make sure the folder is also regularly backed up). You could push it to GitHub, that would cost $5/month for each 50GB of storage.&lt;/p&gt;
&lt;h3&gt;Host on Figshare&lt;/h3&gt;
&lt;p&gt;You can upload files to Figshare using the browser and create a dataset which also comes with a DOI and a page where you can save metadata about this object.&lt;/p&gt;
&lt;p&gt;Once you have set the dataset public, you can find out the URL of the actual file, which is of the form &lt;code&gt;https://ndownloader.figshare.com/files/2432432432&lt;/code&gt;, therefore we can set &lt;code&gt;https://ndownloader.figshare.com/files/&lt;/code&gt; as the repository and use the integer defined in Figshare as filename. Using integers as filenames makes it a bit cryptic, but it has the great advantage that other people can do the uploading to Figshare and you can point to their files as easily as if the are yours. This is more convenient than alternatives where instead you need to give other people access to your file repository.&lt;/p&gt;
&lt;h3&gt;Host on Amazon S3 or other object store&lt;/h3&gt;
&lt;p&gt;A public bucket on Amazon S3 or other object store provides cheap storage and built-in version control.
The cost currently is about $0.026/GB/month.&lt;/p&gt;
&lt;p&gt;First login to the AWS console and create a new bucket, set it public by turning of "Block all public access" and under "Access Control List" set "List objects" to Yes for "Public access".&lt;/p&gt;
&lt;p&gt;You could upload files with the browser, but for larger files command line is better.&lt;/p&gt;
&lt;p&gt;The files will be available at &lt;a href="https://bucket-name.s3-us-west-1.amazonaws.com/"&gt;https://bucket-name.s3-us-west-1.amazonaws.com/&lt;/a&gt;, this changes based on the chosen region.&lt;/p&gt;
&lt;h4&gt;(Advanced) Upload files from the command line&lt;/h4&gt;
&lt;p&gt;This is optional and requires some more familiarity with AWS.
Go back to the AWS console to the Identity and Access Management (IAM) section, then users, create, create a policy to give access only to 1 bucket (replace &lt;code&gt;bucket-name&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-10-17&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Statement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Sid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ListObjectsInBucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;s3:ListBucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;arn:aws:s3:::bucket-name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Sid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;AllObjectActions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;s3:*Object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;s3:PutObjectAcl&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;arn:aws:s3:::bucket-name/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_s3_rw-bucket.html"&gt;AWS documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install &lt;code&gt;s3cmd&lt;/code&gt;, then run &lt;code&gt;s3cmd --configure&lt;/code&gt; to set it up and paste the Access and Secret keys, it will fail to test the configuration because it cannot list all the buckets, anyway choose to save the configuration.&lt;/p&gt;
&lt;p&gt;Test it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    s3cmd ls s3://bucket-name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then upload your files (reduced redundancy is cheaper):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    s3cmd put --reduced-redundancy --acl-public *.fits s3://bucket-name
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>Deploy Kubernetes and JupyterHub on Jetstream with Magnum</title><link href="http://zonca.github.io/2019/06/kubernetes-jupyterhub-jetstream-magnum.html" rel="alternate"></link><published>2019-06-14T00:00:00-07:00</published><updated>2019-06-14T00:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-06-14:/2019/06/kubernetes-jupyterhub-jetstream-magnum.html</id><summary type="html">&lt;p&gt;This tutorial deploys Kubernetes on Jetstream with Magnum and then
JupyterHub on top of that using &lt;a href="https://zero-to-jupyterhub.readthedocs.io/"&gt;zero-to-jupyterhub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my &lt;a href="https://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html"&gt;previous tutorials&lt;/a&gt; I deployed Kubernetes using Kubespray. The main driver to using Magnum is that there is support for autoscaling, i.e. create and destroy Openstack instances based on the load …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This tutorial deploys Kubernetes on Jetstream with Magnum and then
JupyterHub on top of that using &lt;a href="https://zero-to-jupyterhub.readthedocs.io/"&gt;zero-to-jupyterhub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my &lt;a href="https://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html"&gt;previous tutorials&lt;/a&gt; I deployed Kubernetes using Kubespray. The main driver to using Magnum is that there is support for autoscaling, i.e. create and destroy Openstack instances based on the load on JupyterHub. I haven't tested that yet, though, that will come in a following tutorial.&lt;/p&gt;
&lt;p&gt;Magnum is a technology built into Openstack to deploy Container Orchestration engines based on templates. The main difference with kubespray is that is way less configurable, the user does not have access to modify those templates but has just a number of parameters to set. Instead Kubespray is based on &lt;code&gt;ansible&lt;/code&gt; and the user has full control of how the system is setup, it also supports having more High Availability features like multiple master nodes.
On the other hand, the &lt;code&gt;ansible&lt;/code&gt; recipe takes a very long time to run, ~30 min, while Magnum creates a cluster in about 10 minutes.&lt;/p&gt;
&lt;h2&gt;Setup access to the Jetstream API&lt;/h2&gt;
&lt;p&gt;First install the OpenStack client, please use these exact versions, also please run at Indiana, which currently has the Rocky release of Openstack, the TACC deployment has an older release of Openstack.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pip install python-openstackclient==3.16 python-magnumclient==2.10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Load your API credentials from &lt;code&gt;openrc.sh&lt;/code&gt;, check &lt;a href="https://iujetstream.atlassian.net/wiki/spaces/JWT/pages/39682064/Setting+up+openrc.sh"&gt;documentation of the Jetstream wiki for details&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You need to have a keypair uploaded to Openstack, this just needs to be done once per account. See &lt;a href="https://iujetstream.atlassian.net/wiki/spaces/JWT/pages/35913730/OpenStack+command+line"&gt;the Jetstream documentation&lt;/a&gt; under the section "Upload SSH key - do this once".&lt;/p&gt;
&lt;h2&gt;Create the cluster with Magnum&lt;/h2&gt;
&lt;p&gt;As usual, checkout the repository with all the configuration files on the machine you will use the Jetstream API from, typically your laptop.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/span&gt;
&lt;span class="err"&gt;cd jupyterhub-deploy-kubernetes-jetstream&lt;/span&gt;
&lt;span class="err"&gt;cd kubernetes_magnum&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we are ready to use Magnum to first create a cluster template and then the actual cluster, edit first &lt;code&gt;create_cluster.sh&lt;/code&gt; and set the parameters of the cluster on the top. Also make sure to set the keypair name.
Finally run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash create_network.sh&lt;/span&gt;
&lt;span class="err"&gt;bash create_template.sh&lt;/span&gt;
&lt;span class="err"&gt;bash create_cluster.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have setup a test cluster with only 1 master node and 1 normal node but you can modify that later.&lt;/p&gt;
&lt;p&gt;Check the status of your cluster, after about 10 minutes, it should be in state &lt;code&gt;CREATE_COMPLETE&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack coe cluster show k8s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Configure kubectl locally&lt;/h3&gt;
&lt;p&gt;Install the &lt;code&gt;kubectl&lt;/code&gt; client locally, first check the version of the master node:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack server list # find the floating public IP of the master node (starts with 149_&lt;/span&gt;
&lt;span class="err"&gt;IP=149.xxx.xxx.xxx&lt;/span&gt;
&lt;span class="err"&gt;ssh fedora@$IP&lt;/span&gt;
&lt;span class="err"&gt;kubectl version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now install the same version following the &lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/"&gt;Kubernetes documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now configure &lt;code&gt;kubectl&lt;/code&gt; on your laptop to connect to the Kubernetes cluster created with Magnum:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;mkdir kubectl_secret&lt;/span&gt;
&lt;span class="err"&gt;cd kubectl_secret&lt;/span&gt;
&lt;span class="err"&gt;openstack coe cluster config k8s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This downloads a configuration file and the required certificates.&lt;/p&gt;
&lt;p&gt;and returns  &lt;code&gt;export KUBECONFIG=/absolute/path/to/config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See also the &lt;code&gt;update_kubectl_secret.sh&lt;/code&gt; script to automate this step, but it requires to already have setup the environment variable.&lt;/p&gt;
&lt;p&gt;execute that and then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get nodes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configure storage&lt;/h2&gt;
&lt;p&gt;Magnum configures a provider that knows how to create Kubernetes volumes using Openstack Cinder,
but does not configure a &lt;code&gt;storageclass&lt;/code&gt;, we can do that with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create -f storageclass.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can test this by creating a Persistent Volume Claim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;kubectl&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;persistent_volume_claim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;

&lt;span class="n"&gt;kubectl&lt;/span&gt; &lt;span class="k"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;pv&lt;/span&gt;

&lt;span class="n"&gt;kubectl&lt;/span&gt; &lt;span class="k"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;pvc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;            &lt;span class="n"&gt;pvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e8b93455&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;898&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="n"&gt;e9&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a37c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fa163efb4609&lt;/span&gt;
&lt;span class="n"&gt;Labels&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;beta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;kubernetes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nova&lt;/span&gt;
&lt;span class="n"&gt;Annotations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;kubernetes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;createdby&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cinder&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;provisioner&lt;/span&gt;
                 &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;kubernetes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
                 &lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;kubernetes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;io&lt;/span&gt;&lt;span class="sr"&gt;/provisioned-by: kubernetes.io/&lt;/span&gt;&lt;span class="n"&gt;cinder&lt;/span&gt;
&lt;span class="n"&gt;Finalizers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;kubernetes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;protection&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;StorageClass&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;standard&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;Bound&lt;/span&gt;
&lt;span class="n"&gt;Claim&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;           &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="n"&gt;Reclaim&lt;/span&gt; &lt;span class="n"&gt;Policy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Delete&lt;/span&gt;
&lt;span class="n"&gt;Access&lt;/span&gt; &lt;span class="n"&gt;Modes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;RWO&lt;/span&gt;
&lt;span class="n"&gt;Capacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;Gi&lt;/span&gt;
&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;Affinity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         
&lt;span class="n"&gt;Source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;Cinder&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Persistent&lt;/span&gt; &lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;OpenStack&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;VolumeID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;2795724&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ef11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4053&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9922&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d854107c731f&lt;/span&gt;
    &lt;span class="n"&gt;FSType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     
    &lt;span class="n"&gt;ReadOnly&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;SecretRef&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;nil&lt;/span&gt;
&lt;span class="n"&gt;Events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also test creating an actual pod with a persistent volume and check
that the volume is successfully mounted and the pod started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create -f ../alpine-persistent-volume.yaml&lt;/span&gt;
&lt;span class="err"&gt;kubectl describe pod alpine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Note about availability zones&lt;/h3&gt;
&lt;p&gt;By default Openstack servers and Openstack volumes are created in different availability zones. This created an issue with the default Magnum templates because we need to modify the Kubernetes scheduler policy to allow this. Kubespray does this by default, so I created a &lt;a href="https://github.com/zonca/magnum/pull/1"&gt;fix to be applied to the Jetstream Magnum templates&lt;/a&gt;, this needs to be re-applied after every Openstack upgrade.&lt;/p&gt;
&lt;h2&gt;Install Helm&lt;/h2&gt;
&lt;p&gt;The Kubernetes deployment from Magnum is not as complete as the one out of Kubespray, we need
to setup &lt;code&gt;helm&lt;/code&gt; and the NGINX ingress ourselves. We would also need to setup a system to automatically
deploy HTTPS certificates, I'll add this later on.&lt;/p&gt;
&lt;p&gt;First &lt;a href="https://helm.sh/docs/using_helm/#installing-helm"&gt;install the Helm client on your laptop&lt;/a&gt;, make
sure you have configured &lt;code&gt;kubectl&lt;/code&gt; correctly.&lt;/p&gt;
&lt;p&gt;Then we need to create a service account to give enough privilege to Helm to reconfigure the cluster:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create -f tiller_service_account.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can create the &lt;code&gt;tiller&lt;/code&gt; pod inside Kubernetes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;helm init --service-account tiller --wait --history-max 200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get pods --all-namespaces&lt;/span&gt;
&lt;span class="err"&gt;NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span class="err"&gt;kube-system   coredns-78df4bf8ff-f2xvs                   1/1     Running   0          2d&lt;/span&gt;
&lt;span class="err"&gt;kube-system   coredns-78df4bf8ff-pnj7g                   1/1     Running   0          2d&lt;/span&gt;
&lt;span class="err"&gt;kube-system   heapster-74f98f6489-xsw52                  1/1     Running   0          2d&lt;/span&gt;
&lt;span class="err"&gt;kube-system   kube-dns-autoscaler-986c49747-2m64g        1/1     Running   0          2d&lt;/span&gt;
&lt;span class="err"&gt;kube-system   kubernetes-dashboard-54cb7b5997-c2vwx      1/1     Running   0          2d&lt;/span&gt;
&lt;span class="err"&gt;kube-system   openstack-cloud-controller-manager-tf5mc   1/1     Running   3          2d&lt;/span&gt;
&lt;span class="err"&gt;kube-system   tiller-deploy-6b5cd64488-4fkff             1/1     Running   0          20s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And check that all the versions agree:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;helm version&lt;/span&gt;
&lt;span class="c"&gt;Client: &amp;amp;version.Version{SemVer:&amp;quot;v2.11.0&amp;quot;, GitCommit:&amp;quot;2e55dbe1fdb5fdb96b75ff144a339489417b146b&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;}&lt;/span&gt;
&lt;span class="c"&gt;Server: &amp;amp;version.Version{SemVer:&amp;quot;v2.11.0&amp;quot;, GitCommit:&amp;quot;2e55dbe1fdb5fdb96b75ff144a339489417b146b&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setup NGINX ingress&lt;/h2&gt;
&lt;p&gt;We need to have the NGINX web server to act as front-end to the services running inside the Kubernetes cluster.&lt;/p&gt;
&lt;h3&gt;Open HTTP and HTTPS ports&lt;/h3&gt;
&lt;p&gt;First we need to open the HTTP and HTTPS ports on the master node, you can either connect to the Horizon interface,
create new rule named &lt;code&gt;http_https&lt;/code&gt;, then add 2 rules, in the Rule drop down choose HTTP and HTTPS; or from the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack security group create http_https&lt;/span&gt;
&lt;span class="err"&gt;openstack security group rule create --ingress --protocol tcp --dst-port 80 http_https &lt;/span&gt;
&lt;span class="err"&gt;openstack security group rule create --ingress --protocol tcp --dst-port 443 http_https&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can find the name of the master node in &lt;code&gt;openstack server list&lt;/code&gt; then add this security group to that instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack server add security group  k8s-xxxxxxxxxxxx-master-0 http_https&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install NGINX ingress with Helm&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash install_nginx_ingress.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note, the documentation says we should add this annotation to ingress with &lt;code&gt;kubectl edit ingress -n jhub&lt;/code&gt;, but I found out it is not necessary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;annotations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;kubernetes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ingress&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If this is correctly working, you should be able to run &lt;code&gt;curl localhost&lt;/code&gt; from the master node and get a &lt;code&gt;Default backend: 404&lt;/code&gt; message.&lt;/p&gt;
&lt;h2&gt;Install JupyterHub&lt;/h2&gt;
&lt;p&gt;Finally, we can go back to the root of the repository and install JupyterHub, first create the secrets file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash create_secrets.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then edit &lt;code&gt;secrets.yaml&lt;/code&gt; and modify the hostname under &lt;code&gt;hosts&lt;/code&gt; to display the hostname of your master Jetstream instance, i.e. if your instance public floating IP is &lt;code&gt;aaa.bbb.xxx.yyy&lt;/code&gt;, the hostname should be &lt;code&gt;js-xxx-yyy.jetstream-cloud.org&lt;/code&gt; (without &lt;code&gt;http://&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You should also check that connecting with your browser to &lt;code&gt;js-xxx-yyy.jetstream-cloud.org&lt;/code&gt; shows &lt;code&gt;default backend - 404&lt;/code&gt;, this means NGINX is also reachable from the internet, i.e. the web port is open on the master node.&lt;/p&gt;
&lt;p&gt;Finally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash configure_helm_jupyterhub.sh&lt;/span&gt;
&lt;span class="err"&gt;bash install_jhub.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Connect with your browser to &lt;code&gt;js-xxx-yyy.jetstream-cloud.org&lt;/code&gt; to check if it works.&lt;/p&gt;
&lt;h2&gt;Issues and feedback&lt;/h2&gt;
&lt;p&gt;Please &lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/"&gt;open an issue on the repository&lt;/a&gt; to report any issue or give feedback. Also you find out there there what I am working on next.&lt;/p&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Many thanks to Jeremy Fischer and Mike Lowe for solving all my tickets, this required a lot of work on their end to make it working.&lt;/p&gt;</content><category term="misc"></category><category term="kubernetes"></category><category term="openstack"></category><category term="jetstream"></category><category term="jupyterhub"></category></entry><entry><title>Webinar about distributed computing with Python</title><link href="http://zonca.github.io/2019/05/webinar-python-hpc.html" rel="alternate"></link><published>2019-05-30T15:00:00-07:00</published><updated>2019-05-30T15:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-05-30:/2019/05/webinar-python-hpc.html</id><summary type="html">&lt;p&gt;Recording available of the webinar I gave about "Distributed computing with Python":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Threads vs Processes, GIL&lt;/li&gt;
&lt;li&gt;Just-In-Time compilation with Numba&lt;/li&gt;
&lt;li&gt;Processing data larger than memory with Dask&lt;/li&gt;
&lt;li&gt;Distributed computing with Dask&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Live demo on my favorite Supercomputer Comet at the San Diego Supercomputer Center.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sdsc.edu/Events/training/webinars/distributed_parallel_computing_with_python_2019/recording/"&gt;Webinar recording&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Notebooks: &lt;a href="https://github.com/zonca/python_hpc_tutorial"&gt;https://github.com …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Recording available of the webinar I gave about "Distributed computing with Python":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Threads vs Processes, GIL&lt;/li&gt;
&lt;li&gt;Just-In-Time compilation with Numba&lt;/li&gt;
&lt;li&gt;Processing data larger than memory with Dask&lt;/li&gt;
&lt;li&gt;Distributed computing with Dask&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Live demo on my favorite Supercomputer Comet at the San Diego Supercomputer Center.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sdsc.edu/Events/training/webinars/distributed_parallel_computing_with_python_2019/recording/"&gt;Webinar recording&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Notebooks: &lt;a href="https://github.com/zonca/python_hpc_tutorial"&gt;https://github.com/zonca/python_hpc_tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="webinar"></category><category term="python"></category><category term="hpc"></category><category term="Comet"></category></entry><entry><title>Kubernetes monitoring with Prometheus and Grafana</title><link href="http://zonca.github.io/2019/04/kubernetes-monitoring-prometheus-grafana.html" rel="alternate"></link><published>2019-04-20T00:00:00-07:00</published><updated>2019-04-20T00:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-04-20:/2019/04/kubernetes-monitoring-prometheus-grafana.html</id><summary type="html">&lt;p&gt;In a production Kubernetes deployment it is necessary to make it easier to monitor the status of the cluster effectively.
Kubernetes provides Prometheus to gather data from the different components of Kubernetes and Grafana
to access those data and provide real-time plotting and inspection capability.
Moreover, they both provide systems …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In a production Kubernetes deployment it is necessary to make it easier to monitor the status of the cluster effectively.
Kubernetes provides Prometheus to gather data from the different components of Kubernetes and Grafana
to access those data and provide real-time plotting and inspection capability.
Moreover, they both provide systems to send alerts in case some conditions on the state of the cluster are met, i.e. using more than 90% of RAM or CPU.&lt;/p&gt;
&lt;p&gt;The only downside is that the pods that handle monitoring consume some resource themselves, so this could be significant for small clusters below 5 nodes or so, but shouldn't be a problem for typical larger production deployments.&lt;/p&gt;
&lt;p&gt;Both Prometheus and Grafana can be installed separately with Helm recipes or using the Prometheus operator Helm recipe,
however those deployments do not have any preconfigured dashboards, it is easier to get started thanks to the &lt;code&gt;kube-prometheus&lt;/code&gt; project,
which not only installs Prometheus and Grafana, but also preconfigures about 10 different Grafana dashboards to explore in depth
the status of a Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;The main issue is that customizing it is really complicated, it requires modifying &lt;code&gt;jsonnet&lt;/code&gt; templates and recompiling them with a &lt;code&gt;jsonnet&lt;/code&gt; builder which requires &lt;code&gt;go&lt;/code&gt;, however I don't foresee the need to do that for most users.&lt;/p&gt;
&lt;p&gt;Unfortunately it is not based on Helm, so you need to first checkout the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/coreos/kube-prometheus&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then follow the instructions &lt;a href="https://github.com/coreos/kube-prometheus#quickstart"&gt;in the documentation&lt;/a&gt;,
copied here for convenience:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create -f manifests/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;wait a moment, do not worry if some of the tasks fails, they should get fixed running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl apply -f manifests/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates several pods in the &lt;code&gt;monitoring&lt;/code&gt; namespace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get pods -n monitoring&lt;/span&gt;
&lt;span class="err"&gt;NAME                                   READY   STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span class="err"&gt;alertmanager-main-0                    2/2     Running   0          13m&lt;/span&gt;
&lt;span class="err"&gt;alertmanager-main-1                    2/2     Running   0          13m&lt;/span&gt;
&lt;span class="err"&gt;alertmanager-main-2                    2/2     Running   0          13m&lt;/span&gt;
&lt;span class="err"&gt;grafana-9d97dfdc7-zkfft                1/1     Running   0          14m&lt;/span&gt;
&lt;span class="err"&gt;kube-state-metrics-7c7979b6bc-srcvk    4/4     Running   0          12m&lt;/span&gt;
&lt;span class="err"&gt;node-exporter-b6n2w                    2/2     Running   0          14m&lt;/span&gt;
&lt;span class="err"&gt;node-exporter-cgp46                    2/2     Running   0          14m&lt;/span&gt;
&lt;span class="err"&gt;prometheus-adapter-b7d894c9c-z2ph7     1/1     Running   0          14m&lt;/span&gt;
&lt;span class="err"&gt;prometheus-k8s-0                       3/3     Running   1          13m&lt;/span&gt;
&lt;span class="err"&gt;prometheus-k8s-1                       3/3     Running   1          13m&lt;/span&gt;
&lt;span class="err"&gt;prometheus-operator-65c44fb7b7-8ltzs   1/1     Running   0          14m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can setup forwarding on your laptop to export grafana locally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl --namespace monitoring port-forward svc/grafana 3000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Access &lt;code&gt;localhost:3000&lt;/code&gt; with your browser and you should be able to navigate through all the statistics of your cluster,
see for example this screenshot. The credentials are user &lt;code&gt;admin&lt;/code&gt; and password &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of the Grafana UI" src="/images/grafana.png"&gt;&lt;/p&gt;
&lt;h2&gt;Access the UI from a different machine&lt;/h2&gt;
&lt;p&gt;In case you are running the configuration on a remote server and you would like to access the Grafana UI (or any other service) from your laptop, you can install &lt;code&gt;kubectl&lt;/code&gt; also your my laptop, then copy the &lt;code&gt;.kube/config&lt;/code&gt; to the laptop with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt; scp -r KUBECTLMACHINE:~/.kube/config ~/.kube&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt; ssh ubuntu@$IP -f -L 6443:localhost:6443 sleep 3h &amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;from the laptop and then run the &lt;code&gt;port-forward&lt;/code&gt; command locally on the laptop.&lt;/p&gt;
&lt;h2&gt;Monitor JupyterHub&lt;/h2&gt;
&lt;p&gt;Once we have &lt;a href="https://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html"&gt;deployed JupyterHub with Helm&lt;/a&gt;, we can pull up the
"namespace" monitor and select the &lt;code&gt;jhub&lt;/code&gt; namespace to visualize resource usage but also usage requests and limits of all pods created by JupyterHub and its users. See a screenshot below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of the Grafana namespace UI" src="/images/grafana_jhub.png"&gt;&lt;/p&gt;
&lt;h2&gt;Setup alerts&lt;/h2&gt;
&lt;p&gt;Grafana supports email alerts, but it needs a SMTP server, and it is not easy to setup and to avoid being filtered as spam.
The easiest way is to setup an alert to Slack, and optionally be notified via email of Slack messages.&lt;/p&gt;
&lt;p&gt;Follow the &lt;a href="https://grafana.com/docs/alerting/notifications/#slack"&gt;instructions for slack on the Grafana documentation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Slack app, name it e.g. Grafana&lt;/li&gt;
&lt;li&gt;Add feature "Incoming webhook"&lt;/li&gt;
&lt;li&gt;Create a incoming webhook in the workspace and channel your prefer on Slack&lt;/li&gt;
&lt;li&gt;In the Grafana Alerting menu, set the webhook incoming url, the channel name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Screenshot of the Grafana slack notification" src="/images/grafana_slack.png"&gt;&lt;/p&gt;</content><category term="misc"></category><category term="kubernetes"></category><category term="kubespray"></category><category term="jetstream"></category><category term="jupyterhub"></category></entry><entry><title>Inherit group permission in folder</title><link href="http://zonca.github.io/2019/03/folder-inherit-group-permission.html" rel="alternate"></link><published>2019-03-24T18:00:00-07:00</published><updated>2019-03-24T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-03-24:/2019/03/folder-inherit-group-permission.html</id><summary type="html">&lt;p&gt;I have googled this so many times...&lt;/p&gt;
&lt;p&gt;On shared systems, like Supercomputers, you often belong to many different Unix
groups, and that membership allows you to access data from specific projects you
are working on and you can share data with your collaborators.&lt;/p&gt;
&lt;p&gt;If you set SGID on a folder …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have googled this so many times...&lt;/p&gt;
&lt;p&gt;On shared systems, like Supercomputers, you often belong to many different Unix
groups, and that membership allows you to access data from specific projects you
are working on and you can share data with your collaborators.&lt;/p&gt;
&lt;p&gt;If you set SGID on a folder, any folder of file created in that folder will automatically
belong to the Unix group of that folder, and not your default group.
You first set the right group on the folder, recursively so that older files will get
the right permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;chown -R somegroup sharedfolder&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you set the SGID so future files will automatically belong to &lt;code&gt;somegroup&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;chmod g+s sharedfolder&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is very useful for example in the &lt;code&gt;/project&lt;/code&gt; filesystem at NERSC, you can set
the SGID so that every file that is copied to the shared &lt;code&gt;/project&lt;/code&gt; filesystem is
accessible by other collaborators.&lt;/p&gt;
&lt;p&gt;Related to this is also the default &lt;code&gt;umask&lt;/code&gt;, most systems by default give "read" permission
for the group, so setting SGID is enough, otherwise it is also necessary to configure &lt;code&gt;umask&lt;/code&gt; properly.&lt;/p&gt;</content><category term="misc"></category><category term="jupyter"></category><category term="jetstream"></category><category term="zarr"></category></entry><entry><title>Scale Kubernetes manually on Jetstream</title><link href="http://zonca.github.io/2019/02/scale-kubernetes-jupyterhub-manually.html" rel="alternate"></link><published>2019-02-22T21:00:00-08:00</published><updated>2019-02-22T21:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-02-22:/2019/02/scale-kubernetes-jupyterhub-manually.html</id><summary type="html">&lt;p&gt;We would like to modify the number of Openstack virtual machines available to Kubernetes.
Ideally we would like to do this automatically based on the load on JupyterHub, that is the
target.
For now we will increase and decrease the size manually.
This can be useful for example if you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We would like to modify the number of Openstack virtual machines available to Kubernetes.
Ideally we would like to do this automatically based on the load on JupyterHub, that is the
target.
For now we will increase and decrease the size manually.
This can be useful for example if you make a test deployment with only 1 worker node a week
before a workshop and then scale it up to 10 or more instances the day before the workshop
begins.&lt;/p&gt;
&lt;p&gt;This assumes you have &lt;a href="http://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html"&gt;deployed Kubernetes and JupyterHub already&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Create a new Openstack Virtual Machine with Terraform&lt;/h2&gt;
&lt;p&gt;To add nodes, enter the &lt;code&gt;inventory/$CLUSTER&lt;/code&gt; folder, we can edit &lt;code&gt;cluster.tf&lt;/code&gt; and increase &lt;code&gt;number_of_k8s_nodes_no_floating_ip&lt;/code&gt;, in my testing I have increased it from 1 to 3.&lt;/p&gt;
&lt;p&gt;Then we can run again &lt;code&gt;terraform_apply.sh&lt;/code&gt;, this should run Terraform and create a new resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Apply complete! Resources: 2 added, 0 changed, 0 destroyed.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check first that your machine has booted correctly running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack server list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;+--------------------------------------+---------------------+--------+--------------------------------------------+-------------------------------------+----------+&lt;/span&gt;
&lt;span class="err"&gt;| ID                                   | Name                | Status | Networks                                   | Image                               | Flavor   |&lt;/span&gt;
&lt;span class="err"&gt;+--------------------------------------+---------------------+--------+--------------------------------------------+-------------------------------------+----------+&lt;/span&gt;
&lt;span class="err"&gt;| 4ea73e65-2bff-42c9-8c4b-6c6928ad1b77 | zonca-k8s-node-nf-3 | ACTIVE | zonca_k8s_network=10.0.0.7                 | JS-API-Featured-Ubuntu18-Dec-7-2018 | m1.small |                                                       | 0cf1552e-ef0c-48b0-ac24-571301809273 | zonca-k8s-node-nf-2 | ACTIVE | zonca_k8s_network=10.0.0.11                | JS-API-Featured-Ubuntu18-Dec-7-2018 | m1.small |                                                       | e3731cde-cf6e-4556-8bda-0eebc0c7f08e | zonca-k8s-master-1  | ACTIVE | zonca_k8s_network=10.0.0.9, xxx.xxx.xxx.xx | JS-API-Featured-Ubuntu18-Dec-7-2018 | m1.small |&lt;/span&gt;
&lt;span class="err"&gt;| 443c6861-1a13-4080-b5a3-e005bb34a77c | zonca-k8s-node-nf-1 | ACTIVE | zonca_k8s_network=10.0.0.3                 | JS-API-Featured-Ubuntu18-Dec-7-2018 | m1.small |&lt;/span&gt;
&lt;span class="err"&gt;+--------------------------------------+---------------------+--------+--------------------------------------------+-------------------------------------+----------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As expected we have now 1 master and 3 nodes.&lt;/p&gt;
&lt;p&gt;Then change the folder to the root of the repository and check you can connect to it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ansible -i inventory/$CLUSTER/hosts -m ping all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If any of the new nodes is Unreachable, you can try rebooting them with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack server reboot zonca-k8s-node-nf-3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Configure the new instances for Kubernetes&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kubespray&lt;/code&gt; has a special playbook &lt;code&gt;scale.yml&lt;/code&gt; that impacts as little as possible the nodes
already running.
I have created a script &lt;code&gt;k8s_scale.sh&lt;/code&gt; in the root folder of my &lt;code&gt;jetstream_kubespray&lt;/code&gt; repository,
launch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash k8s_scale.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/kubernetes-sigs/kubespray/blob/master/docs/getting-started.md#adding-nodes"&gt;See for reference the &lt;code&gt;kubespray&lt;/code&gt; documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once this completes (re-run it if it stops at some point), you should see what Ansible modified:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;zonca-k8s-master-1         : ok=25   changed=3    unreachable=0    failed=0                                   zonca-k8s-node-nf-1        : ok=247  changed=16   unreachable=0    failed=0&lt;/span&gt;
&lt;span class="err"&gt;zonca-k8s-node-nf-2        : ok=257  changed=77   unreachable=0    failed=0                                   zonca-k8s-node-nf-3        : ok=257  changed=77   unreachable=0    failed=0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point you should check the nodes are seen by Kubernetes with &lt;code&gt;kubectl get nodes&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;NAME                  STATUS   ROLES    AGE     VERSION                                                       zonca-k8s-master-1    Ready    master   4h29m   v1.12.5                                                       zonca-k8s-node-nf-1   Ready    node     4h28m   v1.12.5                                                       zonca-k8s-node-nf-2   Ready    node     5m11s   v1.12.5                                                       zonca-k8s-node-nf-3   Ready    node     5m11s   v1.12.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reduce the number of nodes&lt;/h2&gt;
&lt;p&gt;Kubernetes is built to be resilient to node losses, so you could just brutally delete a node with &lt;code&gt;openstack server delete&lt;/code&gt;. However, there is a dedicated playbook, &lt;code&gt;remove-node.yml&lt;/code&gt;, to remove a node cleanly migrating any running services to other nodes and lowering the risk of anything malfunctioning.
I created a script &lt;code&gt;k8s_remove_node.sh&lt;/code&gt;, pass the name of the node you would like to eliminate (or a comma separated list of many names):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash k8s_remove_node.sh zonca-k8s-node-nf-3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the node has disappeared by &lt;code&gt;kubectl get nodes&lt;/code&gt; but the underlying Openstack instance is still running, delete it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack server delete zonca-k8s-node-nf-3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For consistency you could now modify &lt;code&gt;inventory/$CLUSTER/cluster.tf&lt;/code&gt; and reduce the number of nodes accordingly.&lt;/p&gt;</content><category term="misc"></category><category term="kubernetes"></category><category term="kubespray"></category><category term="jetstream"></category><category term="jupyterhub"></category></entry><entry><title>Deploy Kubernetes with Kubespray 2.8.2 and JupyterHub with helm recipe 0.8 on Jetstream</title><link href="http://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html" rel="alternate"></link><published>2019-02-22T18:00:00-08:00</published><updated>2019-02-22T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2019-02-22:/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html</id><summary type="html">&lt;p&gt;Back in September 2018 I published a &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html"&gt;tutorial to deploy Kubernetes on Jetstream&lt;/a&gt; using Kubernetes.&lt;/p&gt;
&lt;p&gt;Software in the Kubernetes space moves very fast, so I decided to update the recipe to use the newer Kubespray 2.8.2 that deploys Kubernetes v1.12.5.&lt;/p&gt;
&lt;p&gt;Please follow the old tutorial and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back in September 2018 I published a &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html"&gt;tutorial to deploy Kubernetes on Jetstream&lt;/a&gt; using Kubernetes.&lt;/p&gt;
&lt;p&gt;Software in the Kubernetes space moves very fast, so I decided to update the recipe to use the newer Kubespray 2.8.2 that deploys Kubernetes v1.12.5.&lt;/p&gt;
&lt;p&gt;Please follow the old tutorial and note the updates below.&lt;/p&gt;
&lt;h3&gt;Switch to kubespray 2.8.2&lt;/h3&gt;
&lt;p&gt;Once you get my fork of kubespray with a few fixes for Jetstream:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/zonca/jetstream_kubespray&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;switch to the newer 2.8.2 version&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git checkout -b branch_v2.8.2 origin/branch_v2.8.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See an &lt;a href="https://github.com/zonca/jetstream_kubespray/pull/5"&gt;overview of my changes compared to the standard &lt;code&gt;kubespray&lt;/code&gt; release 2.8.2&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Use the new template&lt;/h3&gt;
&lt;p&gt;The name of my template is now just &lt;code&gt;zonca&lt;/code&gt; instead of &lt;code&gt;zonca_kubespray&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Before running Terraform, inside &lt;code&gt;jetstream_kubespray&lt;/code&gt;, copy from my template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;export CLUSTER=$USER&lt;/span&gt;
&lt;span class="err"&gt;cp -LRp inventory/zonca inventory/$CLUSTER&lt;/span&gt;
&lt;span class="err"&gt;cd inventory/$CLUSTER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Explore kubernetes&lt;/h3&gt;
&lt;p&gt;In case you are interested in exploring some of the capabilities of Kubernetes, you can check &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-explore.html"&gt;the second part of my tutorial&lt;/a&gt;, nothing in this section is required to run JupyterHub.&lt;/p&gt;
&lt;h3&gt;Install JupyterHub&lt;/h3&gt;
&lt;p&gt;Finally you can use &lt;code&gt;helm&lt;/code&gt; to install JupyterHub, see the &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html"&gt;last part of my tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consider that I have updated the repository &lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream"&gt;https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/a&gt; to install the &lt;code&gt;0.8.0&lt;/code&gt; version of the &lt;code&gt;helm&lt;/code&gt; package just released yesterday, see &lt;a href="https://blog.jupyter.org/zero-to-jupyterhub-helm-chart-0-8-b99e0a79fd2a"&gt;their blog post with more details&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Thanks&lt;/h3&gt;
&lt;p&gt;Thanks to the Kubernetes, Kubespray and JupyterHub community for delivering great open-source software and to XSEDE for giving me the opportunity to work on this. Special thanks to my collaborators Julien Chastang and Rich Signell.&lt;/p&gt;</content><category term="misc"></category><category term="kubernetes"></category><category term="kubespray"></category><category term="jetstream"></category></entry><entry><title>Deploy Pangeo on Kubernetes deployment on Jetstream created with Kubespray</title><link href="http://zonca.github.io/2018/12/kubernetes-jetstream-kubespray-pangeo.html" rel="alternate"></link><published>2018-12-20T01:00:00-08:00</published><updated>2018-12-20T01:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-12-20:/2018/12/kubernetes-jetstream-kubespray-pangeo.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://pangeo.io/"&gt;Pangeo collaboration for Big Data Geoscience&lt;/a&gt; maintains a helm
chart with a prefigured JupyterHub deployment on Kubernetes which also supports launching
private dask workers.
This is very useful because the Jupyter Notebook users can launch a cluster of worker
containers inside Kubernetes and process larger amounts of data than …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://pangeo.io/"&gt;Pangeo collaboration for Big Data Geoscience&lt;/a&gt; maintains a helm
chart with a prefigured JupyterHub deployment on Kubernetes which also supports launching
private dask workers.
This is very useful because the Jupyter Notebook users can launch a cluster of worker
containers inside Kubernetes and process larger amounts of data than they could using only
their notebook container.&lt;/p&gt;
&lt;h2&gt;Setup Kubernetes on Jetstream with Kubespray&lt;/h2&gt;
&lt;p&gt;First check out my &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray.html"&gt;tutorial on deploying Kubernetes on Jetstream with Kubespray&lt;/a&gt;.
You just need to complete the first part, &lt;strong&gt;do not install&lt;/strong&gt; JupyterHub, it is installed
as part of the Pangeo deployment.&lt;/p&gt;
&lt;p&gt;I also recommend to setup &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;helm&lt;/code&gt; to run locally so that the following steps can be executed on the local machine, see the instructions at the bottom of the tutorial mentioned above.
otherwise you need to &lt;code&gt;ssh&lt;/code&gt; into the master node and type &lt;code&gt;helm&lt;/code&gt; commands there.&lt;/p&gt;
&lt;h2&gt;Install Pangeo with Helm&lt;/h2&gt;
&lt;p&gt;Pangeo publishes a &lt;a href="https://github.com/pangeo-data/helm-chart"&gt;Helm chart&lt;/a&gt; (a software package for Kubernetes) and we can leverage that
to setup the deployment.&lt;/p&gt;
&lt;p&gt;First add the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;helm repo add pangeo https://pangeo-data.github.io/helm-chart/&lt;/span&gt;
&lt;span class="err"&gt;helm repo update&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then download my repository with all the configuration files and helper scripts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a &lt;code&gt;secrets.yaml&lt;/code&gt; file running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash create_secrets.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then head to the &lt;code&gt;pangeo_helm&lt;/code&gt; folder and customize &lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/blob/master/pangeo_helm/config_jupyterhub_pangeo_helm.yaml"&gt;&lt;code&gt;config_jupyterhub_pangeo_helm.yaml&lt;/code&gt;&lt;/a&gt;,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have prepopulated very small limits for testing, increase those for production&lt;/li&gt;
&lt;li&gt;I am using the docker image &lt;code&gt;zonca/pangeo_notebook_rsignell&lt;/code&gt;, you can remove &lt;code&gt;image:&lt;/code&gt; and the 2 lines below to use the standard Pangeo notebook image (defined in their &lt;a href="https://github.com/pangeo-data/helm-chart/blob/master/pangeo/values.yaml"&gt;&lt;code&gt;values.yaml&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;cookieSecret&lt;/code&gt; and &lt;code&gt;secretToken&lt;/code&gt; from &lt;code&gt;secrets.yaml&lt;/code&gt; you created above&lt;/li&gt;
&lt;li&gt;Customize &lt;code&gt;ingress&lt;/code&gt; - &lt;code&gt;hosts&lt;/code&gt; with the hostname of your master instance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally you can deploy it running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash install_pangeo.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Login by pointing your browser at &lt;a href="http://js-XXX-YYY.jetstream-cloud.org"&gt;http://js-XXX-YYY.jetstream-cloud.org&lt;/a&gt;, the default dummy authenticator only needs a username and empty password.&lt;/p&gt;
&lt;h2&gt;Customize and launch dask workers&lt;/h2&gt;
&lt;p&gt;Once you login to the Jupyter Notebook, you can customize the &lt;code&gt;worker-template.yaml&lt;/code&gt; file available in your home folder,
I have &lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/blob/master/pangeo_helm/worker_template.yaml"&gt;an example of it with very small limits&lt;/a&gt; in the &lt;code&gt;pangeo_helm&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;This file is used by &lt;code&gt;dask_kubernetes&lt;/code&gt; to launch workers on your behalf, see for example the &lt;code&gt;dask-array.ipynb&lt;/code&gt; notebook available in your home folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dask_kubernetes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KubeCluster&lt;/span&gt;
&lt;span class="n"&gt;cluster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KubeCluster&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cluster&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will launch 3 workers on the cluster which are then available to launch jobs on with &lt;a href="https://dask.pydata.org"&gt;&lt;code&gt;dask&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can check with &lt;code&gt;kubectl&lt;/code&gt; that the workers are executing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get pods -n pangeo
NAME                         READY   STATUS    RESTARTS   AGE
dask-zonca-d191b7a4-d8jhft   &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          28m
dask-zonca-d191b7a4-dx9dhs   &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          28m
dask-zonca-d191b7a4-dzmgvv   &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          28m
hub-55f5bf597-f5bnt          &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          55m
jupyter-zonca                &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          38m
proxy-66576956d7-r926j       &lt;span class="m"&gt;1&lt;/span&gt;/1     Running   &lt;span class="m"&gt;0&lt;/span&gt;          55m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And also access the Dask GUI, using the menu on the left or the link provided by &lt;code&gt;dask_kubernetes&lt;/code&gt; inside the Notebook.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of the Dask UI" src="/images/dask_ui_workers.png"&gt;&lt;/p&gt;</content><category term="misc"></category><category term="kubernetes"></category><category term="kubespray"></category><category term="jetstream"></category><category term="jupyterhub"></category></entry><entry><title>Setup two factor authentication for UCSD, and Lastpass</title><link href="http://zonca.github.io/2018/12/twofactor-auth-ucsd.html" rel="alternate"></link><published>2018-12-12T18:00:00-08:00</published><updated>2018-12-12T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-12-12:/2018/12/twofactor-auth-ucsd.html</id><summary type="html">&lt;p&gt;Starting at the end of January 2019 UCSD requires every employee to have activated
two factor authentication.&lt;/p&gt;
&lt;p&gt;Go over to &lt;a href="https://duo-registration.ucsd.edu"&gt;https://duo-registration.ucsd.edu&lt;/a&gt; to register your devices and
&lt;a href="https://twostep.ucsd.edu"&gt;https://twostep.ucsd.edu&lt;/a&gt; to read more details.&lt;/p&gt;
&lt;p&gt;Here some suggestions after I have used this for a few months.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Starting at the end of January 2019 UCSD requires every employee to have activated
two factor authentication.&lt;/p&gt;
&lt;p&gt;Go over to &lt;a href="https://duo-registration.ucsd.edu"&gt;https://duo-registration.ucsd.edu&lt;/a&gt; to register your devices and
&lt;a href="https://twostep.ucsd.edu"&gt;https://twostep.ucsd.edu&lt;/a&gt; to read more details.&lt;/p&gt;
&lt;p&gt;Here some suggestions after I have used this for a few months.&lt;/p&gt;
&lt;p&gt;The most convenient option is definitely to have the Duo application installed on
your phone, so that once you try to login it sends a notification to your phone,
you click accept and you're done.&lt;/p&gt;
&lt;p&gt;Second best is to use the Duo or the Google Authenticator app to generate codes,
then you can copy those codes into the login form, and this is anyway useful for
VPN access, you choose the "2 Steps secured - allthroughucsd" option, type your
password followed by a comma and the code, otherwise just the password and get a
push notification on your primary device.&lt;/p&gt;
&lt;p&gt;Then you can just add a mobile number and receive a text or add a landline and
receive a call.&lt;/p&gt;
&lt;p&gt;I also recommend to buy a security key and add it as a authentication option
at &lt;a href="https://duo-registration.ucsd.edu"&gt;https://duo-registration.ucsd.edu&lt;/a&gt;, either &lt;a href="https://store.google.com/product/titan_security_key_kit"&gt;Google Titan&lt;/a&gt; or a &lt;a href="https://www.yubico.com/products/yubikey-hardware/"&gt;Yubico key&lt;/a&gt; (I have a Titan), you can
keep it always with you so that if you don't have your phone or the phone battery
is dead, you can plug the security key in your USB port on the laptop and click on
its button to authenticate.&lt;/p&gt;
&lt;p&gt;Anther option is to request a fob token, a device that generates and displays timed codes and that
is independent of a phone, see &lt;a href="https://blink.ucsd.edu/technology/security/services/two-step-login/guide.html#token"&gt;instructions on the UCSD website&lt;/a&gt;. They say there are only a limited number available and you need
to be prepared to justify why you are requesting one.&lt;/p&gt;
&lt;h2&gt;Other services&lt;/h2&gt;
&lt;p&gt;Now that you already have Duo installed on your phone, I recommend to also activate
two factor auth on all other services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XSEDE&lt;/li&gt;
&lt;li&gt;NERSC&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;li&gt;Amazon&lt;/li&gt;
&lt;li&gt;Microsoft&lt;/li&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consider that most of them just request the second step verification if you are on
a new device, so you need to do the verification just once in a while and it provides
a lot of security. Many of those also support the security key.&lt;/p&gt;
&lt;h2&gt;Password handling with Lastpass&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Update October 2019&lt;/strong&gt;: Fed up of using Lastpass, their interface is clunky and slow, both in Chrome and Android, I switched to &lt;a href="https://bitwarden.com"&gt;Bitwarden&lt;/a&gt;. Way better, it also allows sharing with another user, only downside is that the do not offer Duo push 2FA for free, you need premium, but still supports using Duo as a token generator.&lt;/p&gt;
&lt;p&gt;As you are into security, just go all the way and also install a password manager.
UCSD provides free enterprise accounts for all employees, see &lt;a href="https://blink.ucsd.edu/technology/security/services/lastpass/index.html"&gt;the details&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With Lastpass, you just remember 1 strong password to descrypt all of your other passwords.
If you ever used the Google Chrome builtin password manager, this is way way better.&lt;/p&gt;
&lt;p&gt;You install the Lastpass extension on your browsers and the Lastpass app on your phone.&lt;/p&gt;
&lt;p&gt;The only issue with Lastpass is that by default the Lastpass app on the smartphone automatically
logsout every 30 minutes or so, so you have to re-authenticate very often. This is due to UCSD
having configured it too strictly. I recommend to have a personal account and save all of the passwords
in the personal account and then link it from the Enterprise account.
Now from the desktop/laptop browsers you can use your Enterprise account, from the smartphone app instead
use the personal account.&lt;/p&gt;
&lt;p&gt;You can also automatically import your Google Chrome passwords into Lastpass.&lt;/p&gt;
&lt;p&gt;Now you have no excuse to re-use the same password, automatically generate a 20 char random password and save it in Lastpass.&lt;/p&gt;
&lt;h3&gt;Save one-time codes&lt;/h3&gt;
&lt;p&gt;When you activate two factor auth on Google/Github and many other services, they also give you some one-time codes that you can use to login to the service if you do not have access to your phone, you can save them as "Notes" into the related account inside Lastpass.&lt;/p&gt;
&lt;h3&gt;Activate 2 factor auth for Lastpass&lt;/h3&gt;
&lt;p&gt;You should also activate 2 factor auth in Lastpass, it also supports Duo so the configuration is similar to the configuration for UCSD. Only issue is that they do not support a security key here, so you can only add your smartphone.&lt;/p&gt;</content><category term="misc"></category><category term="security"></category><category term="ucsd"></category></entry><entry><title>Deploy JupyterHub on a Supercomputer for a workshop or tutorial 2018 edition</title><link href="http://zonca.github.io/2018/11/jupyterhub-supercomputer.html" rel="alternate"></link><published>2018-11-07T11:00:00-08:00</published><updated>2018-11-07T11:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-11-07:/2018/11/jupyterhub-supercomputer.html</id><summary type="html">&lt;p&gt;I described how to deploy JupyterHub with each user session running on a different
node of a Supercomputer in &lt;a href="https://arxiv.org/abs/1805.04781"&gt;my paper for PEARC18&lt;/a&gt;,
however things are moving fast in the space and I am employing a different strategy
this year, in particular relying on &lt;a href="https://the-littlest-jupyterhub.readthedocs.io"&gt;the littlest JupyterHub project&lt;/a&gt;
for the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I described how to deploy JupyterHub with each user session running on a different
node of a Supercomputer in &lt;a href="https://arxiv.org/abs/1805.04781"&gt;my paper for PEARC18&lt;/a&gt;,
however things are moving fast in the space and I am employing a different strategy
this year, in particular relying on &lt;a href="https://the-littlest-jupyterhub.readthedocs.io"&gt;the littlest JupyterHub project&lt;/a&gt;
for the initial deployment.&lt;/p&gt;
&lt;h2&gt;Initial deployment of JupyterHub&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://the-littlest-jupyterhub.readthedocs.io"&gt;The littlest JupyterHub project&lt;/a&gt; has great documentation
on how to deploy JupyterHub working on a single server on a wide array of providers.&lt;/p&gt;
&lt;p&gt;In my case I logged in to the &lt;a href="https://dashboard.cloud.sdsc.edu/"&gt;dashboard&lt;/a&gt; of &lt;a href="http://www.sdsc.edu/services/ci/cloud.html"&gt;SDSC Cloud&lt;/a&gt;, a OpenStack
deployment at the San Diego Supercomputer Center, and requested an instance with 16 GB of RAM and 6 vCPUs with Ubuntu 18.04. Make sure you attach a floating public IP to the instance and open up ports 22 for SSH and 80,443 for HTTP/HTTPS.&lt;/p&gt;
&lt;p&gt;Then I followed the &lt;a href="https://the-littlest-jupyterhub.readthedocs.io/en/latest/install/custom-server.html"&gt;installation tutorial for custom servers&lt;/a&gt;, just make sure that you first create in the virtual machine the admin user you specify in the installation script, also
make sure to use the same username of your Github account, as we will later setup Github Authentication.&lt;/p&gt;
&lt;p&gt;You can connect to the instance and check JupyterHub is working and you can login with your user and access the admin panel,
for SDSC Cloud the address is &lt;code&gt;http://xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu&lt;/code&gt;, filled in with the instance floating IP address.&lt;/p&gt;
&lt;h3&gt;Setup HTTPS&lt;/h3&gt;
&lt;p&gt;Follow the Littlest JupyterHub documentation on how to get a SSL certificate through Letsencrypt automatically, after this you should be able to access JupyterHub from &lt;code&gt;https://xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu&lt;/code&gt; or a custom domain you pointed there.&lt;/p&gt;
&lt;h2&gt;Authentication with Github&lt;/h2&gt;
&lt;p&gt;Follow the Littlest JupyterHub documentation, just make sure to set the &lt;code&gt;http&lt;/code&gt; address and not the &lt;code&gt;https&lt;/code&gt; address.&lt;/p&gt;
&lt;h2&gt;Interface with Comet via batchspawner&lt;/h2&gt;
&lt;p&gt;We want all users to run on Comet as a single "Gateway" user, as JupyterHub executes as the &lt;code&gt;root&lt;/code&gt; user on the server, we want to create a SSH key for the &lt;code&gt;root&lt;/code&gt; user and copy the public key to the home folder of the gateway user on Comet so that we can SSH without a password.&lt;/p&gt;
&lt;p&gt;Instead, if you would like each user to utilize their own XSEDE account, you need them to authenticate via XSEDE and get a certificate from the XSEDE API that can be used to login to Comet on behalf of the user, see &lt;a href="https://github.com/jupyterhub/jupyterhub-deploy-hpc/tree/master/batchspawner-xsedeoauth-sshtunnel-sdsccomet"&gt;an example deployment of this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First install &lt;code&gt;batchspawner&lt;/code&gt; with &lt;code&gt;pip&lt;/code&gt; in the Python environment of the hub, this is different than the Python environment of the user, you can have access to it logging in with the &lt;code&gt;root&lt;/code&gt; user and running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export PATH=/opt/tljh/hub/bin:&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Set the configuration file, see &lt;a href="https://gist.github.com/zonca/55f7949983e56088186e99db53548ded"&gt;&lt;code&gt;spawner.py&lt;/code&gt; on this Gist&lt;/a&gt; and copy it into the &lt;code&gt;/opt/tljh/config/jupyterhub_config.d&lt;/code&gt; folder, then add the private SSH key of the tunnelbot user, which is a user on the Virtual Machine with no shell (set &lt;code&gt;/bin/false&lt;/code&gt; in &lt;code&gt;/etc/passwd&lt;/code&gt;) but that can setup a SSH tunnel from Comet back to the Hub.&lt;/p&gt;
&lt;p&gt;Also customize all paths and usernames in the file.&lt;/p&gt;
&lt;p&gt;Reload the Jupyterhub configuration with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;tljh-config reload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then check the Hub logs with &lt;code&gt;sudo journalctl -r -u jupyterhub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The most complicated part is making sure that the environment variables defined by JupyterHub, the most important is the token which allows the singleuser server to authenticate itself with the Hub, are correctly propagated through SSH. See in &lt;code&gt;spawner.py&lt;/code&gt; how I explicitely pass the variables over SSH.&lt;/p&gt;
&lt;p&gt;Also, as all workshop participants access Comet with the same user account, I automatically create a folder with their Github username and checkout the Notebooks for the workshop in that folder. Then start JupyterLab in that folder, so that the users do not interfere, we are not worrying about security here, with the current setup a user can open a terminal inside JupyterLab and access the folder of another person.&lt;/p&gt;
&lt;h2&gt;How to setup the tunnelbot user&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;On the JupyterHub virtual machine, create a user named &lt;code&gt;tunnelbot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo su tunnelbot&lt;/code&gt; to act as that user, then create a key with &lt;code&gt;ssh-keygen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;enter the &lt;code&gt;.ssh&lt;/code&gt; folder and &lt;code&gt;cp id_rsa.pub authorized_keys&lt;/code&gt; so that the ssh key can be used from Comet to ssh passwordless to the server&lt;/li&gt;
&lt;li&gt;now get the &lt;strong&gt;private key&lt;/strong&gt; from &lt;code&gt;/home/tunnelbot/.ssh/id_rsa&lt;/code&gt; and paste it into &lt;code&gt;spawner.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;now make sure you set the shell of &lt;code&gt;tunnelbot&lt;/code&gt; to &lt;code&gt;/bin/false&lt;/code&gt; in &lt;code&gt;/etc/passwd/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;for increased security, please also follow the steps in &lt;a href="https://askubuntu.com/questions/48129/how-to-create-a-restricted-ssh-user-for-port-forwarding"&gt;this stackoverflow answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Thanks to the Jupyter and JupyterHub teams for releasing great software with outstanding documentation, in particular Yuvi Panda for the simplicity and elegance in the design of the Littlest JupyterHub deployment.&lt;/p&gt;</content><category term="misc"></category><category term="jupyterhub"></category><category term="comet"></category><category term="xsede"></category></entry><entry><title>Advanced pandas with Astrophysics example Notebook</title><link href="http://zonca.github.io/2018/10/pandas-astro-example.html" rel="alternate"></link><published>2018-10-26T18:00:00-07:00</published><updated>2018-10-26T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-10-26:/2018/10/pandas-astro-example.html</id><content type="html">&lt;p&gt;Taught a lesson today on advanced &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;pandas&lt;/code&gt; based on an example application in Astrophysics with simulations of data from the &lt;a href="https://en.wikipedia.org/wiki/Planck_(spacecraft)"&gt;Planck Satellite&lt;/a&gt;, features also a Binder button to run it yourself. Jupyter Notebook available at: &lt;a href="https://github.com/zonca/pandas-astro-example"&gt;https://github.com/zonca/pandas-astro-example&lt;/a&gt; under CC-BY&lt;/p&gt;</content><category term="misc"></category><category term="jupyter"></category><category term="pandas"></category><category term="binder"></category></entry><entry><title>Bring your computing to the San Diego Supercomputer Center</title><link href="http://zonca.github.io/2018/10/compute-at-sdsc.html" rel="alternate"></link><published>2018-10-24T18:00:00-07:00</published><updated>2018-10-24T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-10-24:/2018/10/compute-at-sdsc.html</id><summary type="html">&lt;p&gt;I am often asked what computing resources are available at the San Diego Supercomputer Center for scientists and what is the best way to be granted access. I decided to write a blog post with an overview of all the options, consider that I'm writing this in October 2018, so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am often asked what computing resources are available at the San Diego Supercomputer Center for scientists and what is the best way to be granted access. I decided to write a blog post with an overview of all the options, consider that I'm writing this in October 2018, so please cross-check on the official websites.&lt;/p&gt;
&lt;h2&gt;Comet&lt;/h2&gt;
&lt;p&gt;Our key resource is the &lt;a href="http://www.sdsc.edu/support/user_guides/comet.html"&gt;Comet Supercomputer&lt;/a&gt;, a 2000 nodes traditional supercomputer with 72 GPU nodes, each with 4 GPUs.
Comet has powerful CPUs with 24 cores and lots of memory per node (128GB) and a very fast local flash drive on each node.
It is also suitable to run large amounts of single node jobs, so you can exploit it even if you don't have a multi-node parallel software.&lt;/p&gt;
&lt;p&gt;Comet is a XSEDE resource, XSEDE is basically a consortium of many large US supercomputers dedicated to Science,  it reviews applications from US scientists and grants them supercomputing resources for free. It is funded by National Science Foundation.&lt;/p&gt;
&lt;h3&gt;How to request resources on Comet&lt;/h3&gt;
&lt;p&gt;Ordered from the lowest to the largest amount of resources needed, which means they are ordered by the amount of effort it takes to get each type of allocation.&lt;/p&gt;
&lt;p&gt;The amount of resources on Comet are billed in core hours (sometimes named SUs), if you request a Comet node for 1 hour you are charged 24 hours, comet GPUs are billed 14 core hours for each hour on each GPU. The newest Comet GPU nodes have P100 instead of K80, those are billed 1.5 times the older GPU nodes, i.e. 21 core hours per hour.
Comet also has a shared queue where you can request and be charged for a portion of a Comet node (you also get the proportional amount of memory), i.e. you can request 6 cores and pay only 6 core hours per hour and get access to 32GB of RAM.&lt;/p&gt;
&lt;h4&gt;Trial allocation&lt;/h4&gt;
&lt;p&gt;Anybody can request a trial allocation on Comet with a quick 1 paragraph justification and be approved within a day for 1000 core hours to be used within 6 month. This is useful to try Comet out, run some test jobs. See the &lt;a href="https://portal.xsede.org/allocations/startup#trial"&gt;trial allocation page on the XSEDE website&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Campus champions&lt;/h4&gt;
&lt;p&gt;Most US universities have a reference person that facilitates access to XSEDE supercomputers, it is often somebody in the Information Technology office or in a Chancellor of Research or a professor. This person is given a large amount of supercomputing hours on all XSEDE resources and local professors, postdocs and graduate students can request to be added to this allocation and use many thousands of core hours, depending on availability.
Campus champions are currently available in 241 (!!) US institutions, &lt;a href="https://www.xsede.org/web/site/community-engagement/campus-champions/current"&gt;see the list on the XSEDE website&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;HPC@UC&lt;/h4&gt;
&lt;p&gt;If you are at any of the University of California campuses, you have an expedited way of getting resources at SDSC.
You can submit a request for up to 1 million core hours (more often ~500K core hours) on Comet on the &lt;a href="http://www.sdsc.edu/collaborate/hpc_at_uc.html"&gt;HPC@UC page&lt;/a&gt;. It just requires a 3 page justification and is answered within 10 business days. You are not eligible if your research group has an active XSEDE allocation.&lt;/p&gt;
&lt;h4&gt;Startup allocation&lt;/h4&gt;
&lt;p&gt;Startup allocations are really quick to prepare, they just require a 1 page justification and CV of the Principal Investigator and grant up to 50K core hours on Comet, if your research is funded by NSF/NASA/NIH remember to specify that. See the &lt;a href="https://portal.xsede.org/allocations/startup"&gt;startup page on XSEDE for more details&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They are reviewed continously so you should be approved within a few days. Generally you are supposed to utilize the amount of hours within 1 year, but if your science project is funded for a longer period, you can request a multi-year allocation.&lt;/p&gt;
&lt;h4&gt;XRAC allocation&lt;/h4&gt;
&lt;p&gt;XRAC allocations are full fledged proposals, you can request up to a few million hours on Comet, here you must provide a detailed justification of the resources requested, demonstrate that your software is able to efficiently scale up in parallel, i.e. if in production you want to run on 100 nodes, you should run it on 5/10/50/100 nodes and check that performance does not degrade too much with increased parallelism.
You should have performed those tests in a startup allocation.
The XRAC requests are reviewed quarterly, see the &lt;a href="https://portal.xsede.org/allocations/research"&gt;Research allocations page&lt;/a&gt;, there is also a recorded webinar.&lt;/p&gt;
&lt;h2&gt;Triton Shared Computing Cluster&lt;/h2&gt;
&lt;p&gt;The Triton Shared Computing Cluster is a supercomputer at SDSC with specifications a bit lower than Comet and that is not allocated through XSEDE, resources are paid by the users. XSEDE resources are always oversubscribed and often only a portion of the resources requested is granted, scientific groups that do not get enough resources through XSEDE can complement it with an allocation on TSCC.&lt;/p&gt;
&lt;p&gt;The easiest way to get computational hours on TSCC is a pay-as-you-go option where you buy an amount of core-hours at $6c / core-hour (academics have a lower rate based on affiliation).&lt;/p&gt;
&lt;p&gt;But the most cost-effective way is to buy a node to be added to the cluster  for 3 years with full hardware warranty plus 1 extra year with no warranty, so if it breaks it needs to be removed.
You pay a fixed price to buy the node (~$6K) plus yearly operations (~$1.8K if not subsidized by your University, in UC campuses this is generally subsidized and is ~$.5K), see &lt;a href="http://www.sdsc.edu/services/hpc/tscc-purchase.html"&gt;the updated costs on the TSCC page&lt;/a&gt;, also get in touch with them directly for more details.  You can also buy a node with GPUs.&lt;/p&gt;
&lt;p&gt;Then, instead of having direct access to that node, you are given an allocation as big as the computing hours that your node provides to the cluster. This is great because it allows you to not be penalized for incosistent usage patterns. You can pay for 1 node and then use tens of nodes together once in a while. If you have the yearly operations subsidized by campus, the cost per core hour is about $2c, which is quite competitive, and the cluster is in SDSC machine room and professionally managed, updated, backed up.&lt;/p&gt;
&lt;h2&gt;Colocation&lt;/h2&gt;
&lt;p&gt;Larger collaborations might need dedicated resources, it is possible to buy your own nodes, in units of entire racks (48 Rack Units), which depending on the type of blades can be 12 or 24 nodes and colocate it in SDSC's machine room. See the detailed cost on the &lt;a href="http://www.sdsc.edu/services/it/colocation.html"&gt;colocation page&lt;/a&gt;, this is a custom solution and it is not easy to give a simple cost estimate, better write and ask for a quote.&lt;/p&gt;
&lt;h2&gt;Cloud resources (Virtual Machines)&lt;/h2&gt;
&lt;p&gt;SDSC also manages a OpenStack deployment, which is especially suitable for running services, for example websites, databases, APIs but it is also suitable to run long-running single node jobs or interactive data analysis (think Jupyter Notebooks). And Kubernetes, of course! (see my &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray.html"&gt;tutorial for Jetstream, which works also on SDSC Cloud&lt;/a&gt;.
This is also equivalent to Amazon Elastic Cloud Compute (EC2), here you pay for what you use, within UC you provide a funding index and that is charged for each hour used, see the full pricing on the &lt;a href="http://www.sdsc.edu/services/it/cloud.html"&gt;SDSC cloud page&lt;/a&gt;, roughly you are charged $8c an hour for a Virtual Machine with 1 core and 4GB of RAM.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have questions please email me at zonca on the sdsc.edu domain or tweet @andreazonca.&lt;/p&gt;</content><category term="misc"></category><category term="comet"></category><category term="sdsc"></category><category term="xsede"></category></entry><entry><title>Deploy JupyterHub on Kubernetes deployment on Jetstream created with Kubespray 3/3</title><link href="http://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html" rel="alternate"></link><published>2018-09-24T01:00:00-07:00</published><updated>2018-09-24T01:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-09-24:/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html</id><summary type="html">&lt;p&gt;All of the following assumes you are logged in to the master node of the &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray.html"&gt;Kubernetes cluster deployed with kubespray&lt;/a&gt; and checked out the repository:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream"&gt;https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install Jupyterhub&lt;/h2&gt;
&lt;p&gt;First run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash create_secrets.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to create the secret strings needed by JupyterHub then edit its output
&lt;code&gt;secrets …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;All of the following assumes you are logged in to the master node of the &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray.html"&gt;Kubernetes cluster deployed with kubespray&lt;/a&gt; and checked out the repository:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream"&gt;https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install Jupyterhub&lt;/h2&gt;
&lt;p&gt;First run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash create_secrets.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to create the secret strings needed by JupyterHub then edit its output
&lt;code&gt;secrets.yaml&lt;/code&gt; to make sure it is consistent, edit the &lt;code&gt;hosts&lt;/code&gt; lines if needed. For example, supply the Jetstream DNS name of the master node &lt;code&gt;js-XXX-YYY.jetstream-cloud.org&lt;/code&gt; (XXX and YYY are the last 2 groups of the floating IP of the instance AAA.BBB.XXX.YYY). See &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-explore.html"&gt;part 2&lt;/a&gt;, "Publish service externally with ingress".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash configure_helm_jupyterhub.sh&lt;/span&gt;
&lt;span class="err"&gt;bash install_jhub.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check some preliminary pods running with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get pods -n jhub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the &lt;code&gt;proxy&lt;/code&gt; is running, even if &lt;code&gt;hub&lt;/code&gt; is still in preparation, you can check
in browser, you should get "Service Unavailable" which is a good sign that
the proxy is working.&lt;/p&gt;
&lt;h2&gt;Customize JupyterHub&lt;/h2&gt;
&lt;p&gt;After JupyterHub is deployed and integrated with Cinder for persistent volumes,
for any other customizations, first authentication, you are in good hands as the
&lt;a href="https://zero-to-jupyterhub.readthedocs.io/en/stable/extending-jupyterhub.html"&gt;Zero-to-Jupyterhub documentation&lt;/a&gt; is great.&lt;/p&gt;
&lt;p&gt;The only setup that could be peculiar to the deployment on top of &lt;code&gt;kubespray&lt;/code&gt; is setup with HTTPS, see the next section.&lt;/p&gt;
&lt;h2&gt;Setup HTTPS with letsencrypt&lt;/h2&gt;
&lt;p&gt;Kubespray instead of installing &lt;code&gt;kube-lego&lt;/code&gt;, installs &lt;a href="https://cert-manager.readthedocs.io/en/latest/index.html"&gt;&lt;code&gt;certmanager&lt;/code&gt;&lt;/a&gt; to handle HTTPS certificates.&lt;/p&gt;
&lt;p&gt;First we need to create a Issuer, set your email inside &lt;code&gt;setup_https_kubespray/https_issuer.yml&lt;/code&gt; and create it with the usual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create -f setup_https_kubespray/https_issuer.yml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can manually create a HTTPS certificate, &lt;code&gt;certmanager&lt;/code&gt; can be configured to handle this automatically, but as we only need a domain this is pretty quick, edit &lt;code&gt;setup_https_kubespray/https_certificate.yml&lt;/code&gt; and set the domain name of your master node, then create the certificate resource with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create -f setup_https_kubespray/https_certificate.yml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally we can configure JupyterHub to use this certificate, first edit your &lt;code&gt;secrets.yaml&lt;/code&gt; following as an example the file &lt;code&gt;setup_https_kubespray/example_letsencrypt_secrets.yaml&lt;/code&gt;, then update your JupyterHub configuration running again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash install_jhub.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setup HTTPS with custom certificates&lt;/h2&gt;
&lt;p&gt;In case you have custom certificates for your domain, first create a secret in the jupyterhub namespace with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create secret tls cert-secret --key ssl.key --cert ssl.crt -n jhub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then setup ingress to use this in &lt;code&gt;secrets.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ingress&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;YYY&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jetstream&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cloud&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;org&lt;/span&gt;
  &lt;span class="n"&gt;tls&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;YYY&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jetstream&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cloud&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;org&lt;/span&gt;
    &lt;span class="n"&gt;secretName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eventually, you may need to update the certificate. This can be achieved with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create secret tls cert-secret --key ssl.key --cert ssl.crt -n jhub \&lt;/span&gt;
&lt;span class="err"&gt;    --dry-run -o yaml | kubectl apply -f -&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Modify the Kubernetes cluster size&lt;/h2&gt;
&lt;p&gt;See a followup short tutorial on &lt;a href="https://zonca.github.io/2019/02/scale-kubernetes-jupyterhub-manually.html"&gt;scaling Kubernetes manually&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Persistence of user data&lt;/h2&gt;
&lt;p&gt;When a JupyterHub user logs in for the first time, a Kubernetes &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; of the size defined in the configuration file is created. This is a Kubernetes resource that defines a request for storage.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get pvc -n jhub&lt;/span&gt;
&lt;span class="err"&gt;NAME          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE&lt;/span&gt;
&lt;span class="err"&gt;claim-zonca   Bound    pvc-c469967a-3968-11e9-aaad-fa163e9c7d08   1Gi        RWO            standard       2m34s&lt;/span&gt;
&lt;span class="err"&gt;hub-db-dir    Bound    pvc-353114a7-3968-11e9-aaad-fa163e9c7d08   1Gi        RWO            standard       6m34s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inspecting the claims we find out that we have a claim for the user and a claim to store the database of JupyterHub. Currently they are already Bound because they are already satistied.&lt;/p&gt;
&lt;p&gt;Those claims are then satisfied by our Openstack Cinder provisioner to create a Openstack volume and wrap it into a Kubernetes &lt;code&gt;PersistentVolume&lt;/code&gt; resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get pv -n jhub&lt;/span&gt;
&lt;span class="err"&gt;NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM              STORAGECLASS   REASON   AGE&lt;/span&gt;
&lt;span class="err"&gt;pvc-353114a7-3968-11e9-aaad-fa163e9c7d08   1Gi        RWO            Delete           Bound    jhub/hub-db-dir    standard                8m52s&lt;/span&gt;
&lt;span class="err"&gt;pvc-c469967a-3968-11e9-aaad-fa163e9c7d08   1Gi        RWO            Delete           Bound    jhub/claim-zonca   standard                5m4s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This corresponds to Openstack volumes automatically mounted onto the node that is executing the user pod:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;+--------------------------------------+-------------------------------------------------------------+-----------+------+----------------------------------------------+&lt;/span&gt;
&lt;span class="err"&gt;| ID                                   | Name                                                        | Status    | Size | Attached to                                  |&lt;/span&gt;
&lt;span class="err"&gt;+--------------------------------------+-------------------------------------------------------------+-----------+------+----------------------------------------------+&lt;/span&gt;
&lt;span class="err"&gt;| e6eddaaa-d40d-4832-addd-a05343ec3a80 | kubernetes-dynamic-pvc-c469967a-3968-11e9-aaad-fa163e9c7d08 | in-use    |    1 | Attached to zonca-k8s-node-nf-1 on /dev/sdc  |&lt;/span&gt;
&lt;span class="err"&gt;| 00f1e822-8098-4633-804e-46ba44d7de7e | kubernetes-dynamic-pvc-353114a7-3968-11e9-aaad-fa163e9c7d08 | in-use    |    1 | Attached to zonca-k8s-node-nf-1 on /dev/sdb  |&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the user disconnects, the Openstack volume is un-attached from the instance but it is not delete and it is mounted back, optionally on another instance, if the user logs back in.&lt;/p&gt;
&lt;h3&gt;Delete and reinstall JupyterHub&lt;/h3&gt;
&lt;p&gt;Helm release deleted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;helm delete --purge jhub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As long as you do not delete the whole namespace, the volumes are not deleted, therefore you can re-deploy the same version or a newer version using &lt;code&gt;helm&lt;/code&gt; and the same volume is mounted back for the user&lt;/p&gt;
&lt;h3&gt;Delete and recreate Openstack instances&lt;/h3&gt;
&lt;p&gt;When we run terraform to delete all Openstack resources:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash terraform_destroy.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this does not include the Openstack volumes that are created by the Kubernetes persistent volume provisioner.&lt;/p&gt;
&lt;p&gt;In case we are interested in keeping the same ip address, run instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash terraform_destroy_keep_floatingip.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem is that if we recreate Kubernetes again, it doesn't know how to link the Openstack volume to the Persistent Volume of a user.
Therefore we need to backup the Persistent Volumes and the Persistent Volume Claims resources before tearing Kubernetes down:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get pvc -n jhub -o yaml &amp;gt; pvc.yaml&lt;/span&gt;
&lt;span class="err"&gt;kubectl get pv -n jhub -o yaml &amp;gt; pv.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I recommend always to run &lt;code&gt;kubectl&lt;/code&gt; on the local machine instead of the master node, because if you delete the master instance you loose any temporary modification to your scripts. In this case, even more importantly, if you are running on the master node please backup &lt;code&gt;pvc.yaml&lt;/code&gt; and &lt;code&gt;pv.yaml&lt;/code&gt; locally before running &lt;code&gt;terraform_destroy.sh&lt;/code&gt; or they will be wiped out.&lt;/p&gt;
&lt;p&gt;Then open the files with a text editor and delete the Persistent Volume and the Persistent Volume Claim related to &lt;code&gt;hub-db-dir&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Edit &lt;code&gt;pv.yaml&lt;/code&gt; and set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;  persistentVolumeReclaimPolicy:Retain&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otherwise if you create the PV first, it is deleted because there is no PVC.&lt;/p&gt;
&lt;p&gt;Also remove the &lt;code&gt;ClaimRef&lt;/code&gt; section of all the volumes in &lt;code&gt;pv.yaml&lt;/code&gt;, otherwise you get the error "two claims are bound to the same volume, this one is bound incorrectly" on the PVC.&lt;/p&gt;
&lt;p&gt;Now we can proceed to create the cluster again and then restore the volumes with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl apply -f pv.yaml&lt;/span&gt;
&lt;span class="err"&gt;kubectl apply -f pvc.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;Feedback on this is very welcome, please open an issue on the &lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream"&gt;Github repository&lt;/a&gt; or email me at &lt;code&gt;zonca&lt;/code&gt; on the domain of the San Diego Supercomputer Center (sdsc.edu).&lt;/p&gt;</content><category term="misc"></category><category term="kubernetes"></category><category term="kubespray"></category><category term="jetstream"></category><category term="jupyterhub"></category></entry><entry><title>Explore a Kubernetes deployment on Jetstream with Kubespray 2/3</title><link href="http://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-explore.html" rel="alternate"></link><published>2018-09-23T23:00:00-07:00</published><updated>2018-09-23T23:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-09-23:/2018/09/kubernetes-jetstream-kubespray-explore.html</id><summary type="html">&lt;p&gt;This is the second part of the tutorial on deploying Kubernetes with &lt;code&gt;kubespray&lt;/code&gt; and JupyterHub
on Jetstream.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray.html"&gt;first part, we installed Kubernetes on Jetstream with &lt;code&gt;kubespray&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is optional, its main purpose is to familiarize with the Kubernetes deployment on Jetstream
and how the different components play together …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second part of the tutorial on deploying Kubernetes with &lt;code&gt;kubespray&lt;/code&gt; and JupyterHub
on Jetstream.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray.html"&gt;first part, we installed Kubernetes on Jetstream with &lt;code&gt;kubespray&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is optional, its main purpose is to familiarize with the Kubernetes deployment on Jetstream
and how the different components play together before installing JupyterHub.
If you are already familiar with Kubernetes you can skip to &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html"&gt;next part where we will be installing
Jupyterhub using the zerotojupyterhub helm recipe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All the files for the examples below are available on Github,
first SSH to the master node (or do this locally if you setup &lt;code&gt;kubectl&lt;/code&gt; locally):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/span&gt;
&lt;span class="err"&gt;cd jupyterhub-deploy-kubernetes-jetstream&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Test persistent storage with cinder&lt;/h2&gt;
&lt;p&gt;The most important feature that brought me to choose &lt;code&gt;kubespray&lt;/code&gt; as method for installing Kubernetes
is that it automatically sets up persistent storage exploiting Jetstream Volumes.
The Jetstream team already does a great job in providing a persistent storage solution with adequate
redundancy via the Cinder project, part of OpenStack.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubespray&lt;/code&gt; sets up a Kubernetes provisioner so that when a container requests persistent storage,
it talks to the Openstack API and have a dedicated volume (the same type you can create with the
Jetstream Horizon Web interfaces) automatically created and exposed to Kubernetes.&lt;/p&gt;
&lt;p&gt;This is achieved through a storageclass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get storageclass&lt;/span&gt;
&lt;span class="err"&gt;NAME                 PROVISIONER            AGE&lt;/span&gt;
&lt;span class="err"&gt;standard (default)   kubernetes.io/cinder   1h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the file &lt;code&gt;alpine-persistent-volume.yaml&lt;/code&gt; in the repository on how we can request a Cinder volume
to be created and attached to a pod.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create -f alpine-persistent-volume.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can test it by getting a terminal inside the container (&lt;code&gt;alpine&lt;/code&gt; has no &lt;code&gt;bash&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl exec -it alpine -- /bin/sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;look into &lt;code&gt;df -h&lt;/code&gt;, check that there is a 5GB mounted file system which is persistent.&lt;/p&gt;
&lt;p&gt;Also, back to the machine with &lt;code&gt;openstack&lt;/code&gt; access, see how an Openstack volume was dynamically created and attached to the running instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack volume list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack volume list&lt;/span&gt;
&lt;span class="err"&gt;+--------------------------------------+-------------------------------------------------------------+--------+------+--------------------------------------------------+&lt;/span&gt;
&lt;span class="err"&gt;| ID                                   | Name                                                        | Status | Size | Attached to                                      |&lt;/span&gt;
&lt;span class="err"&gt;+--------------------------------------+-------------------------------------------------------------+--------+------+--------------------------------------------------+&lt;/span&gt;
&lt;span class="err"&gt;| 508f1ee7-9654-4c84-b1fc-76dd8751cd6e | kubernetes-dynamic-pvc-e83ec4d6-bb9f-11e8-8344-fa163eb22e63 | in-use |    5 | Attached to kubespray-k8s-node-nf-1 on /dev/sdb  |&lt;/span&gt;
&lt;span class="err"&gt;+--------------------------------------+-------------------------------------------------------------+--------+------+--------------------------------------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Test ReplicaSets, Services and Ingress&lt;/h2&gt;
&lt;p&gt;In this section we will explore how to build redundancy and scale in a service with a
simple example included in the book &lt;a href="https://github.com/luksa/kubernetes-in-action/tree/master/Chapter02/kubia"&gt;Kubernetes in Action&lt;/a&gt;,
which by the way I highly recommend to get started with Kubernetes.&lt;/p&gt;
&lt;p&gt;First let's deploy a service in our Kubernetes cluster,
this service just answers to HTTP requests on port 8080 with the message "You've hit kubia-manual":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cd kubia_test_ingress&lt;/span&gt;
&lt;span class="err"&gt;kubectl create -f kubia-manual.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can test it by checking at which IP Kubernetes created the pod:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl get pods -o wide&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and assign it to the &lt;code&gt;KUBIA_MANUAL_IP&lt;/code&gt; variable, then on one of the nodes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl &lt;span class="nv"&gt;$KUBIA_MANUAL_IP&lt;/span&gt;:8080
You&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;ve hit kubia-manual
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally close it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl delete -f kubia-manual.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Load balancing with ReplicaSets and Services&lt;/h3&gt;
&lt;p&gt;Now we want to scale this service up and provide a set of 3 pods instead of just 1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create -f kubia-replicaset.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we could access those services on 3 different IP addresses, but we would like to have
a single entry point and automatic load balancing across those instances, so we create
a Kubernetes "Service" resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create -f kubia-service.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And test it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get service
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;   AGE
kubernetes   ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.233.0.1      &amp;lt;none&amp;gt;        &lt;span class="m"&gt;443&lt;/span&gt;/TCP   22h
kubia        ClusterIP   &lt;span class="m"&gt;10&lt;/span&gt;.233.28.205   &amp;lt;none&amp;gt;        &lt;span class="m"&gt;80&lt;/span&gt;/TCP    45m
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;curl $KUBIA_SERVICE_IP&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is on port 80 so we don't need &lt;code&gt;:8080&lt;/code&gt; in the URL.
Run many times and check different kubia services answer.&lt;/p&gt;
&lt;h3&gt;Publish service externally with ingress&lt;/h3&gt;
&lt;p&gt;Try to open browser and access the hostname of your master node at:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;http://js-XXX-YYY.jetstream-cloud.org&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where XXX-YYY are the last 2 groups of digits of the floating IP of the master instance,
i.e. AAA.BBB.XXX.YYY, each of them could also be 1 or 2 digits instead of 3.&lt;/p&gt;
&lt;p&gt;The connection should respond with 404.&lt;/p&gt;
&lt;p&gt;At this point, edit the &lt;code&gt;kubia-ingress.yaml&lt;/code&gt; file and replace the &lt;code&gt;host&lt;/code&gt; value with the master node domain name you just derived.&lt;/p&gt;
&lt;p&gt;Now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl create -f kubia-ingress.yaml&lt;/span&gt;
&lt;span class="err"&gt;kubectl get ingress&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Try again in the browser. You should now see something like:&lt;/p&gt;
&lt;p&gt;"You've hit kubia-jqwwp"&lt;/p&gt;
&lt;p&gt;Force reload the browser page a few times and you will see you are hitting a different kubia service.&lt;/p&gt;
&lt;p&gt;Finally,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;kubectl delete -f kubia-ingress.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="kubernetes"></category><category term="kubespray"></category><category term="jetstream"></category></entry><entry><title>Deploy Kubernetes on Jetstream with Kubespray 1/3</title><link href="http://zonca.github.io/2018/09/kubernetes-jetstream-kubespray.html" rel="alternate"></link><published>2018-09-23T18:00:00-07:00</published><updated>2018-09-23T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-09-23:/2018/09/kubernetes-jetstream-kubespray.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Please check the last version of this tutorial (which mostly redirects here but uses a newer &lt;code&gt;kubespray&lt;/code&gt;) at &lt;a href="https://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html"&gt;https://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The purpose of this tutorial series is to deploy Jupyterhub on top of
Kubernetes on Jetstream.
This material was presented as a tutorial at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Please check the last version of this tutorial (which mostly redirects here but uses a newer &lt;code&gt;kubespray&lt;/code&gt;) at &lt;a href="https://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html"&gt;https://zonca.github.io/2019/02/kubernetes-jupyterhub-jetstream-kubespray.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The purpose of this tutorial series is to deploy Jupyterhub on top of
Kubernetes on Jetstream.
This material was presented as a tutorial at the Gateways 2018 conference, see also &lt;a href="https://figshare.com/articles/Hands-on_Tutorial_Deploying_Kubernetes_and_JupyterHub_on_Jetstream/7137884"&gt;the slides on Figshare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compared to my &lt;a href="https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html"&gt;initial tutorial&lt;/a&gt;, I focused on improving automation.
Instead of creating Jetstream instances via the Atmosphere web interface and then
SSHing into the instances and run &lt;code&gt;kubeadm&lt;/code&gt; based commands to setup Docker and Kubernetes we will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;terraform&lt;/code&gt; recipe part of the &lt;code&gt;kubespray&lt;/code&gt; project to interface with the Jetstream API and create a cluster of virtual machines&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;kubespray&lt;/code&gt; ansible recipe to setup a production-ready Kubernetes deployment, optionally with High Availability features like redundant master nodes and much more, see &lt;a href="http://kubespray.io"&gt;kubepray.io&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Create Jetstream Virtual machines with Terraform&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;kubespray&lt;/code&gt; is able to deploy production-ready Kubernetes deployments and initially targeted only
commercial cloud platforms.&lt;/p&gt;
&lt;p&gt;They recently added support for Openstack via a Terraform recipe which is available in &lt;a href="https://github.com/kubernetes-incubator/kubespray/tree/master/contrib/terraform/openstack"&gt;their Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Terraform allows to execute recipes that describe a set of OpenStack resources and their relationship. In the context of this tutorial, we do not need to learn much about Terraform, we will configure and execute the recipe provided by &lt;code&gt;kubespray&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;On a Ubuntu 18.04 install &lt;code&gt;python3-openstackclient&lt;/code&gt; with APT.
Any other platform works as well, also install &lt;code&gt;terraform&lt;/code&gt; by copying the correct binary to &lt;code&gt;/usr/local/bin/&lt;/code&gt;, see &lt;a href="https://www.terraform.io/intro/getting-started/install.html"&gt;https://www.terraform.io/intro/getting-started/install.html&lt;/a&gt;. The current version of the recipe requires Terraform &lt;code&gt;0.11.x&lt;/code&gt;, &lt;strong&gt;not the newest 0.12&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Request API access&lt;/h3&gt;
&lt;p&gt;In order to make sure your XSEDE account can access the Jetstream API, you need to contact the Helpdesk, see the &lt;a href="https://iujetstream.atlassian.net/wiki/spaces/JWT/pages/39682057/Using+the+Jetstream+API"&gt;instructions on the Jetstream Wiki&lt;/a&gt;. You will also receive your &lt;strong&gt;TACC&lt;/strong&gt; password, which could be different than your XSEDE one (username is generally the same).&lt;/p&gt;
&lt;p&gt;Login to the TACC Horizon panel at &lt;a href="https://tacc.jetstream-cloud.org/dashboard"&gt;https://tacc.jetstream-cloud.org/dashboard&lt;/a&gt;, this is basically the low level web interface to OpenStack, a lot more complex and powerful than Atmosphere available at &lt;a href="https://use.jetstream-cloud.org/application"&gt;https://use.jetstream-cloud.org/application&lt;/a&gt;. Use &lt;code&gt;tacc&lt;/code&gt; as domain, your TACC username (generally the same as your XSEDE username) and your TACC password.&lt;/p&gt;
&lt;p&gt;First choose the right project you would like to charge to in the top dropdown menu (see the XSEDE website if you don't recognize the grant code).&lt;/p&gt;
&lt;p&gt;Click on Compute / API Access and download the OpenRC V3 authentication file to your machine. Source it typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;source XX-XXXXXXXX-openrc.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it should ask for your TACC password. This configures all the environment variables needed by the &lt;code&gt;openstack&lt;/code&gt; command line tool to interface with the Openstack API.&lt;/p&gt;
&lt;p&gt;Test with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack flavor list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should return the list of available "sizes" of the Virtual Machines.&lt;/p&gt;
&lt;h3&gt;Clone kubespray&lt;/h3&gt;
&lt;p&gt;I had to make a few modifications to &lt;code&gt;kubespray&lt;/code&gt; to adapt it to Jetstream or backport bug fixes not merged yet, so currently better use my fork of &lt;code&gt;kubespray&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/zonca/jetstream_kubespray&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See an &lt;a href="https://github.com/zonca/jetstream_kubespray/pull/2"&gt;overview of my changes compared to the standard &lt;code&gt;kubespray&lt;/code&gt; release 2.6.0&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Run Terraform&lt;/h3&gt;
&lt;p&gt;Inside &lt;code&gt;jetstream_kubespray&lt;/code&gt;, copy from my template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;export CLUSTER=$USER&lt;/span&gt;
&lt;span class="err"&gt;cp -LRp inventory/zonca_kubespray inventory/$CLUSTER&lt;/span&gt;
&lt;span class="err"&gt;cd inventory/$CLUSTER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open and modify &lt;code&gt;cluster.tf&lt;/code&gt;, choose your image and number of nodes.
Make sure to change the network name to something unique, like the expanded form of &lt;code&gt;$CLUSTER_network&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can find suitable images (they need to be JS-API-Featured, you cannot use the same instances used in Atmosphere):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack image list | grep &amp;quot;JS-API&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I already preconfigured the network UUID both for IU and TACC, but you can crosscheck
looking for the &lt;code&gt;public&lt;/code&gt; network in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack network list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Initialize Terraform:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash terraform_init.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create the resources:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash terraform_apply.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last output log of Terraform should contain the IP of the master node &lt;code&gt;k8s_master_fips&lt;/code&gt;, wait for it to boot then
SSH in with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ssh ubuntu@$IP&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or &lt;code&gt;centos@$IP&lt;/code&gt; for CentOS images.&lt;/p&gt;
&lt;p&gt;Inspect with Openstack the resources created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack server list&lt;/span&gt;
&lt;span class="err"&gt;openstack network list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can cleanup the virtual machines and all other Openstack resources (all data is lost) with &lt;code&gt;bash terraform_destroy.sh&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Install Kubernetes with &lt;code&gt;kubespray&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Change folder back to the root of the &lt;code&gt;jetstream_kubespray&lt;/code&gt; repository,&lt;/p&gt;
&lt;p&gt;First make sure you have a recent version of &lt;code&gt;ansible&lt;/code&gt; installed, you also need additional modules,
so first run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pip install -r requirements.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is useful to create a &lt;code&gt;virtualenv&lt;/code&gt; and install packages inside that.
This will also install &lt;code&gt;ansible&lt;/code&gt;, it is important to install &lt;code&gt;ansible&lt;/code&gt; with &lt;code&gt;pip&lt;/code&gt; so that the path to access the modules is correct. So remove any pre-installed &lt;code&gt;ansible&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then following the &lt;a href="https://github.com/kubernetes-incubator/kubespray/blob/master/contrib/terraform/openstack/README.md#ansible"&gt;&lt;code&gt;kubespray&lt;/code&gt; documentation&lt;/a&gt;, we setup &lt;code&gt;ssh-agent&lt;/code&gt; so that &lt;code&gt;ansible&lt;/code&gt; can SSH from the machine with public IP to the others:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;eval $(ssh-agent -s)&lt;/span&gt;
&lt;span class="err"&gt;ssh-add ~/.ssh/id_rsa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test the connection through ansible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ansible -i inventory/$CLUSTER/hosts -m ping all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If a server is not answering to ping, first try to reboot it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack server reboot $CLUSTER-k8s-node-nf-1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or delete it and run &lt;code&gt;terraform_apply.sh&lt;/code&gt; to create it again.&lt;/p&gt;
&lt;p&gt;check &lt;code&gt;inventory/$CLUSTER/group_vars/all.yml&lt;/code&gt;, in particular &lt;code&gt;bootstrap_os&lt;/code&gt;, I setup &lt;code&gt;ubuntu&lt;/code&gt;, change it to &lt;code&gt;centos&lt;/code&gt; if you used the Centos 7 base image.&lt;/p&gt;
&lt;p&gt;Due to a bug in the recipe, run ( see details in the Troubleshooting notes below):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;export OS_TENANT_ID=$OS_PROJECT_ID&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally run the full playbook, it is going to take a good 10 minutes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ansible-playbook --become -i inventory/$CLUSTER/hosts cluster.yml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the playbook fails with "cannot lock the administrative directory", it is due to the fact that the Virtual Machine is automatically updating so it has locked the APT directory. Just wait a minute and launch it again. It is always safe to run &lt;code&gt;ansible&lt;/code&gt; multiple times.&lt;/p&gt;
&lt;p&gt;If the playbook gives any error, try to retry the above command, sometimes there are temporary failed tasks, Ansible is designed to be executed multiple times with consistent results.&lt;/p&gt;
&lt;p&gt;You should have now a Kubernetes cluster running, test it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh ubuntu@&lt;span class="nv"&gt;$IP&lt;/span&gt;
$ kubectl get pods --all-namespaces
NAMESPACE       NAME                                                   READY     STATUS    RESTARTS   AGE
cert-manager    cert-manager-78fb746bc7-w9r94                          &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
ingress-nginx   default-backend-v1.4-7795cd847d-g25d8                  &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
ingress-nginx   ingress-nginx-controller-bdjq7                         &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kube-apiserver-zonca-kubespray-k8s-master-1            &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kube-controller-manager-zonca-kubespray-k8s-master-1   &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kube-dns-69f4c8fc58-6vhhs                              &lt;span class="m"&gt;3&lt;/span&gt;/3       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kube-dns-69f4c8fc58-9jn25                              &lt;span class="m"&gt;3&lt;/span&gt;/3       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kube-flannel-7hd24                                     &lt;span class="m"&gt;2&lt;/span&gt;/2       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kube-flannel-lhsvx                                     &lt;span class="m"&gt;2&lt;/span&gt;/2       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kube-proxy-zonca-kubespray-k8s-master-1                &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kube-proxy-zonca-kubespray-k8s-node-nf-1               &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kube-scheduler-zonca-kubespray-k8s-master-1            &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kubedns-autoscaler-565b49bbc6-7wttm                    &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     kubernetes-dashboard-6d4dfd56cb-24f98                  &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     nginx-proxy-zonca-kubespray-k8s-node-nf-1              &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
kube-system     tiller-deploy-5c688d5f9b-fpfpg                         &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compare that you have all those services running also in your cluster.
We have also configured NGINX to proxy any service that we will later deploy on Kubernetes,
test it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget localhost
--2018-09-24 &lt;span class="m"&gt;03&lt;/span&gt;:01:14--  http://localhost/
Resolving localhost &lt;span class="o"&gt;(&lt;/span&gt;localhost&lt;span class="o"&gt;)&lt;/span&gt;... &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
Connecting to localhost &lt;span class="o"&gt;(&lt;/span&gt;localhost&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="p"&gt;|&lt;/span&gt;:80... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;404&lt;/span&gt; Not Found
&lt;span class="m"&gt;2018&lt;/span&gt;-09-24 &lt;span class="m"&gt;03&lt;/span&gt;:01:14 ERROR &lt;span class="m"&gt;404&lt;/span&gt;: Not Found.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Error 404 is a good sign, the service is up and serving requests, currently there is nothing to deliver.
Finally test that the routing through the Jetstream instance is working correctly by opening your browser
and test that if you access &lt;code&gt;js-XX-XXX.jetstream-cloud.org&lt;/code&gt; you also get a &lt;code&gt;default backend - 404&lt;/code&gt; message.
If any of the tests hangs or cannot connect, there is probably a networking issue.&lt;/p&gt;
&lt;h2&gt;Next&lt;/h2&gt;
&lt;p&gt;Next you can &lt;a href="https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-explore.html"&gt;explore the kubernetes deployment to learn more about how you deploy resources in the second part of my tutorial&lt;/a&gt; or skip it and proceed directly to the &lt;a href="http://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html"&gt;third and final part of the tutorial and deploy Jupyterhub and configure it with HTTPS&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Troubleshooting notes&lt;/h3&gt;
&lt;p&gt;For future reference, disregard this.&lt;/p&gt;
&lt;p&gt;Failing ansible task: &lt;code&gt;openstack_tenant_id is missing&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;fixed with: &lt;code&gt;export OS_TENANT_ID=$OS_PROJECT_ID&lt;/code&gt;, this should be fixed once &lt;a href="https://github.com/kubernetes-incubator/kubespray/pull/2783"&gt;https://github.com/kubernetes-incubator/kubespray/pull/2783&lt;/a&gt; is merged, anyway this is not blocking.&lt;/p&gt;
&lt;p&gt;Failing task &lt;code&gt;Write cacert file&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;NOTE: had to cherry-pick a commit from &lt;a href="https://github.com/kubernetes-incubator/kubespray/pull/3280"&gt;https://github.com/kubernetes-incubator/kubespray/pull/3280&lt;/a&gt;, this will be unnecessary once this is fixed upstream&lt;/p&gt;
&lt;h2&gt;(Optional) Setup kubectl locally&lt;/h2&gt;
&lt;p&gt;We also set &lt;code&gt;kubectl_localhost: true&lt;/code&gt; and &lt;code&gt;kubeconfig_localhost: true&lt;/code&gt;.
so that &lt;code&gt;kubectl&lt;/code&gt; is installed on your local machine&lt;/p&gt;
&lt;p&gt;it also copies &lt;code&gt;admin.conf&lt;/code&gt; to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;inventory/$CLUSTER/artifacts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now copy that to &lt;code&gt;~/.kube/config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;this has an issue, it has the internal IP of the Jetstream master.
We cannot replace it with the public floating ip because the certificate is not valid for that.
Best workaround is to replace it with &lt;code&gt;127.0.0.1&lt;/code&gt; inside &lt;code&gt;~/.kube/config&lt;/code&gt; at the &lt;code&gt;server:&lt;/code&gt; key.
Then make a SSH tunnel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ssh ubuntu@$IP -f -L 6443:localhost:6443 sleep 3h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt; sends the process in the background&lt;/li&gt;
&lt;li&gt;executing &lt;code&gt;sleep&lt;/code&gt; for 3 hours makes the tunnel automatically close after 3 hours, otherwise &lt;code&gt;-N&lt;/code&gt; would keep the tunnel permanently open&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;(Optional) Setup helm locally&lt;/h2&gt;
&lt;p&gt;ssh into the master node, check helm version with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;helm version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Download the same binary version from &lt;a href="https://github.com/helm/helm/releases"&gt;the release page on Github&lt;/a&gt;
and copy the binary to &lt;code&gt;/url/local/bin&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;helm ls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="kubernetes"></category><category term="kubespray"></category><category term="jetstream"></category></entry><entry><title>PEARC18 Paper on Deploying Jupyterhub at scale on XSEDE</title><link href="http://zonca.github.io/2018/07/pearc18-paper-deploy-jupyterhub-xsede.html" rel="alternate"></link><published>2018-07-23T12:00:00-07:00</published><updated>2018-07-23T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-07-23:/2018/07/pearc18-paper-deploy-jupyterhub-xsede.html</id><summary type="html">&lt;p&gt;Bob Sinkovits and I are presenting a paper at PEARC18 about:&lt;/p&gt;
&lt;p&gt;"Deploying Jupyter Notebooks at scale on XSEDE resources for Science Gateways and workshops"&lt;/p&gt;
&lt;p&gt;See the pre-print on Arxiv: &lt;a href="https://arxiv.org/abs/1805.04781"&gt;https://arxiv.org/abs/1805.04781&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jupyter Notebooks provide an interactive computing environment well suited for Science.
JupyterHub is a multi-user …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bob Sinkovits and I are presenting a paper at PEARC18 about:&lt;/p&gt;
&lt;p&gt;"Deploying Jupyter Notebooks at scale on XSEDE resources for Science Gateways and workshops"&lt;/p&gt;
&lt;p&gt;See the pre-print on Arxiv: &lt;a href="https://arxiv.org/abs/1805.04781"&gt;https://arxiv.org/abs/1805.04781&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jupyter Notebooks provide an interactive computing environment well suited for Science.
JupyterHub is a multi-user Notebook environment developed by the Jupyter team.&lt;/p&gt;
&lt;p&gt;In order to provide adequate amount of memory and CPU to many users for example during workshops,
it is necessary to leverage a distributed system, either leveraging multiple Jetstream instances
or interfacing with a traditional HPC system.&lt;/p&gt;
&lt;p&gt;In this work we present 3 strategies for deploying JupyterHub on XSEDE resources to support
a large number of users, each is linked to the step-by-step tutorial with all necessary configuration files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2017/05/jupyterhub-hpc-batchspawner-ssh.html"&gt;deploy Jupyterhub on a single Jetstream instance and spawn Jupyter Notebook servers for each user on a computing node of a Supercomputer (for example Comet)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2017/10/scalable-jupyterhub-docker-swarm-mode.html"&gt;deploy Jupyterhub on Jetstream using Docker Swarm to distributed the user's containers across many instances and providing persistent storage with quotas through a NFS share&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html"&gt;deploy Jupyterhub on top of Kubernetes across Jetstream instances with persistent storage provided by the Ceph distributed filesystem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://zonca.github.io/docs/pearc18_slides_zonca_sinkovits.pdf"&gt;Presentation slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If are an author at PEARC18, you can follow &lt;a href="https://zonca.github.io/2018/05/pearc18-preprint-arxiv.html"&gt;my instructions on how to publish your preprint to Arxiv&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="singularity"></category><category term="comet"></category><category term="jetstream"></category><category term="jupyterhub"></category></entry><entry><title>Updated Singularity images for Comet</title><link href="http://zonca.github.io/2018/07/singularity-2.5-comet.html" rel="alternate"></link><published>2018-07-22T12:00:00-07:00</published><updated>2018-07-22T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-07-22:/2018/07/singularity-2.5-comet.html</id><summary type="html">&lt;p&gt;Back in January 2017 I wrote a &lt;a href="https://zonca.github.io/2017/01/singularity-hpc-comet.html"&gt;blog post about running Singularity on Comet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recently needed to update all my container images to the latest scientific python packages,
so I also took the opportunity to create both a Docker auto-build repository on DockerHub
and a SingularityHub image.&lt;/p&gt;
&lt;p&gt;Those images …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back in January 2017 I wrote a &lt;a href="https://zonca.github.io/2017/01/singularity-hpc-comet.html"&gt;blog post about running Singularity on Comet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recently needed to update all my container images to the latest scientific python packages,
so I also took the opportunity to create both a Docker auto-build repository on DockerHub
and a SingularityHub image.&lt;/p&gt;
&lt;p&gt;Those images have a working MPI installation which has the same MPI version of Comet so
they can be used as a base for MPI programs.&lt;/p&gt;
&lt;p&gt;The Docker image is based on the Jupyter Datascience notebook, therefore has Python, R and Julia.
the Singularity image on SingularityHub has instead only Python.
Anyway &lt;code&gt;singularity pull&lt;/code&gt; also works with Docker containers, so also the Docker container can easily
be turned into a singularity container.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/zonca/singularity-comet"&gt;https://github.com/zonca/singularity-comet&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="singularity"></category><category term="comet"></category></entry><entry><title>Create DockerHub auto build</title><link href="http://zonca.github.io/2018/07/create-dockerhub-autobuild.html" rel="alternate"></link><published>2018-07-19T18:00:00-07:00</published><updated>2018-07-19T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-07-19:/2018/07/create-dockerhub-autobuild.html</id><summary type="html">&lt;p&gt;It is very convenient to create Autobuild repositories on DockerHub linked to
a Github repository with a &lt;code&gt;Dockerfile&lt;/code&gt;.
Then every time you commit to Github, Dockerhub is going to build the image on
their service and make it available on &lt;a href="https://hub.docker.com"&gt;https://hub.docker.com&lt;/a&gt; and can quickly
be pulled to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is very convenient to create Autobuild repositories on DockerHub linked to
a Github repository with a &lt;code&gt;Dockerfile&lt;/code&gt;.
Then every time you commit to Github, Dockerhub is going to build the image on
their service and make it available on &lt;a href="https://hub.docker.com"&gt;https://hub.docker.com&lt;/a&gt; and can quickly
be pulled to any other system that supports Docker or Singularity.&lt;/p&gt;
&lt;p&gt;Unfortunately if you have many Github organizations and repositories, the process
to set a new repository up gets stuck.&lt;/p&gt;
&lt;p&gt;Fortunately we can bypass the issue by directly accessing the right URL, as suggested
&lt;a href="https://stackoverflow.com/questions/42792240/dockerhub-create-automated-build-step-stuck-at-creating"&gt;on StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I created a simple page to make this quicker, add the right parameters and it automatically
builds the right URL, see:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zonca.github.io/docker-auto-build"&gt;https://zonca.github.io/docker-auto-build&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="docker"></category><category term="github"></category></entry><entry><title>How to organize code and data for simulations at NERSC</title><link href="http://zonca.github.io/2018/06/organize-code-data-simulations-nersc.html" rel="alternate"></link><published>2018-06-20T18:00:00-07:00</published><updated>2018-06-20T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-06-20:/2018/06/organize-code-data-simulations-nersc.html</id><summary type="html">&lt;p&gt;I recently improved my strategy for organizing code and data for simulations run at NERSC,
I'll write it here for reference.&lt;/p&gt;
&lt;h2&gt;Libraries&lt;/h2&gt;
&lt;p&gt;I mostly use Python (often with C/C++ extensions), so I first rely on the Anaconda
module maintained by NERSC, currently &lt;code&gt;python/3.6-anaconda-4.4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If I need …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently improved my strategy for organizing code and data for simulations run at NERSC,
I'll write it here for reference.&lt;/p&gt;
&lt;h2&gt;Libraries&lt;/h2&gt;
&lt;p&gt;I mostly use Python (often with C/C++ extensions), so I first rely on the Anaconda
module maintained by NERSC, currently &lt;code&gt;python/3.6-anaconda-4.4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If I need to add many more packages I can create a conda environment, but for just installing
1 or 2 packages I prefer to just add them to my &lt;code&gt;PYTHONPATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have core libraries that I rely on and often modify to run my simulations,
those should be installed on Global Common Software: &lt;code&gt;/global/common/software/projectname&lt;/code&gt;
which is specifically designed to access small files like Python packages.
I generally create a subfolder and reference it with an environment variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt; export PREFIX=/global/common/software/projectname/zonca/python_prefix&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I create a &lt;code&gt;env.sh&lt;/code&gt; script in the source folder of the package (in Global Home) that loads
the environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;module load python/3.6-anaconda-4.4&lt;/span&gt;
&lt;span class="err"&gt;export PREFIX=/global/common/software/projectname/zonca/python_prefix&lt;/span&gt;
&lt;span class="err"&gt;export PATH=$PREFIX/bin:$PATH&lt;/span&gt;
&lt;span class="err"&gt;export LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH&lt;/span&gt;
&lt;span class="err"&gt;export PYTHONPATH=$PREFIX/lib/python3.6/site-packages:$PYTHONPATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This environment is automatically propagated to the computing nodes when I submit a SLURM script,
therefore I do not add any of these environment details to my SLURM scripts.&lt;/p&gt;
&lt;p&gt;Then I can install a package there with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;python setup.py install --prefix=$PREFIX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or from pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pip install apackage --prefix=$PREFIX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is also common to install a newer version of a package which is already provided by
the base environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pip install apackage --ignore-installed --upgrade --no-deps --prefix=$PREFIX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Simulations SLURM scripts and configuration files&lt;/h2&gt;
&lt;p&gt;I first create a repository on Github for my simulations and clone it to my home folder at NERSC.
I generally create a repository for each experiment, then I create a subfolder for each
type of simulation I am working on.&lt;/p&gt;
&lt;p&gt;Inside a folder I create parameters files to configure my run and slurm scripts to launch the
simulations and put everything under version control immediately, I often create a Pull Request
on Github and ask my collaborators to cross-check the configuration before a submit a run.&lt;/p&gt;
&lt;p&gt;Smaller input data files, even binaries, can be added for convenience to the Github repository.&lt;/p&gt;
&lt;p&gt;Once a run has been validated, inside the simulation type folder I createa a subfolder &lt;code&gt;runs/201806_details_about_run&lt;/code&gt; and
add a &lt;code&gt;README.md&lt;/code&gt;, this will include all the details about the simulation.
I also tag both the core library I depend on and the simulation repository with the same name e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git tag -a 201806_details_about_run -m &amp;quot;software version used for 201806_details_about_run&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'll also add the path at NERSC of the input data and output results.&lt;/p&gt;
&lt;p&gt;Then for future simulations I'll keep modifying the SLURM scripts and parameter files but always have
a reference to each previous version.&lt;/p&gt;
&lt;h2&gt;Larger input data and output data&lt;/h2&gt;
&lt;p&gt;Larger input data and outputs are not suitable for version control and should live in a SCRATCH filesystem.
I always use the Global Scratch &lt;code&gt;$CSCRATCH&lt;/code&gt; which is available both on Edison on Cori and also
from the Jupyter Notebook environment at: &lt;a href="https://jupyter.nersc.gov"&gt;https://jupyter.nersc.gov&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I create a root folder for the project at:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$CSCRATCH/projectname&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then a subfolder for each simulation type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$CSCRATCH/projectname/simulation_type_1&lt;/span&gt;
&lt;span class="err"&gt;$CSCRATCH/projectname/simulation_type_2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I symlink those inside the simulation repository as the folder &lt;code&gt;out/&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cd $HOME/projectname/simulation_type_1&lt;/span&gt;
&lt;span class="err"&gt;ln -s $CSCRATCH/projectname/simulation_type_1 out&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Therefore I can setup my simulation software to save all results inside &lt;code&gt;out/201806_details_about_run&lt;/code&gt;
and this is going to be written to &lt;code&gt;CSCRATCH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This setup makes it very convenient to regularly backup everything to tape using &lt;code&gt;cput&lt;/code&gt; which just backs up
files that are not already on tape, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cd $CSCRATCH&lt;/span&gt;
&lt;span class="err"&gt;hsi&lt;/span&gt;
&lt;span class="err"&gt;cput -R projectname&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is going to synchronize the backup on tape with the latest results on &lt;code&gt;CSCRATCH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I do the same for input files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;mkdir $CSCRATCH/projectname/input_simulation_type_1&lt;/span&gt;
&lt;span class="err"&gt;cd $HOME/projectname/simulation_type_1&lt;/span&gt;
&lt;span class="err"&gt;ln -s $CSCRATCH/projectname/input_simulation_type_1 input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="nersc"></category><category term="python"></category></entry><entry><title>Setup private dask clusters in Kubernetes alongside JupyterHub on Jetstream</title><link href="http://zonca.github.io/2018/06/private-dask-kubernetes-jetstream.html" rel="alternate"></link><published>2018-06-07T18:00:00-07:00</published><updated>2018-06-07T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-06-07:/2018/06/private-dask-kubernetes-jetstream.html</id><summary type="html">&lt;p&gt;In this post we will leverage software made available by the &lt;a href="https://pangeo-data.github.io"&gt;Pangeo community&lt;/a&gt; to allow each user of a &lt;a href="https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html"&gt;Jupyterhub instance deployed on Jetstream on top of Kubernetes&lt;/a&gt; to launch a set of &lt;a href="https://dask.pydata.org"&gt;&lt;code&gt;dask&lt;/code&gt;&lt;/a&gt; workers as containers running inside Kubernetes itself and use them for distributed computing.&lt;/p&gt;
&lt;p&gt;Pangeo also maintains …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post we will leverage software made available by the &lt;a href="https://pangeo-data.github.io"&gt;Pangeo community&lt;/a&gt; to allow each user of a &lt;a href="https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html"&gt;Jupyterhub instance deployed on Jetstream on top of Kubernetes&lt;/a&gt; to launch a set of &lt;a href="https://dask.pydata.org"&gt;&lt;code&gt;dask&lt;/code&gt;&lt;/a&gt; workers as containers running inside Kubernetes itself and use them for distributed computing.&lt;/p&gt;
&lt;p&gt;Pangeo also maintains a deployment of this environment on Google Cloud freely accessible at &lt;a href="https://pangeo.pydata.org"&gt;pangeo.pydata.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security considerations&lt;/strong&gt;: This deployment grants each user administrative access to the Kubernetes API, so each user could use this privilege to terminate other users' pods or dask workers. Therefore it is suitable only for a community of trusted users. There is &lt;a href="https://github.com/pangeo-data/pangeo/issues/135#issuecomment-384320753"&gt;discussion about leveraging namespaces to limit this&lt;/a&gt; but it hasn't been implemented yet.&lt;/p&gt;
&lt;h2&gt;Deploy Kubernetes&lt;/h2&gt;
&lt;p&gt;We need to first create Jetstream instances and deploy Kubernetes on them. We can follow the first part of the tutorial at &lt;a href="https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html"&gt;https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html&lt;/a&gt;.
I also tested with Ubuntu 18.04 instead of Ubuntu 16.04 and edited the &lt;code&gt;install-kubeadm.bash&lt;/code&gt; accordingly, I also removed version specifications in order to pickup the latest Kubernetes version, currently 1.10. See &lt;a href="https://gist.github.com/zonca/5365fd2245462dedaf2297e0417c4662"&gt;my install-kubeadm-18.04.bash&lt;/a&gt;.
Notice that for the &lt;code&gt;http://apt.kubernetes.io/&lt;/code&gt; don't have yet Ubuntu 18.04 packages, so I left &lt;code&gt;xenial&lt;/code&gt;, this should be updated in the future.&lt;/p&gt;
&lt;p&gt;In order to simplify the setup we will just be using ephemeral storage, later we can update the deployment using either Rook following the &lt;a href="https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html"&gt;steps in my original tutorial&lt;/a&gt; or a NFS share (I'll write a tutorial soon about that).&lt;/p&gt;
&lt;h2&gt;Deploy Pangeo&lt;/h2&gt;
&lt;p&gt;Deployment is just a single step because Pangeo published a Helm recipe that depends on the Zero-to-JupyterHub recipe and deploys both in a single step, therefore we &lt;em&gt;should not have deployed JupyterHub beforehand&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First we need to create a &lt;code&gt;yaml&lt;/code&gt; configuration file for the package.
Checkout the Github repository with all the configuration files on the master node of Kubernetes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in the &lt;code&gt;pangeo_helm&lt;/code&gt; folder, there is already a draft of the configuration file.&lt;/p&gt;
&lt;p&gt;We need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run &lt;code&gt;openssl&lt;/code&gt; as instructed inside the file and paste the output tokens to the specified location&lt;/li&gt;
&lt;li&gt;edit the hostname in the &lt;code&gt;ingress&lt;/code&gt; section to the hostname of the Jetstream master node&lt;/li&gt;
&lt;li&gt;customize the memory and CPU requirements, currently they are very low so that this can be tested also in a single small instance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can then deploy with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo helm install pangeo/pangeo -n pangeo --namespace pangeo -f config_pangeo_no_storage.yaml --version=v0.1.1-95ab292&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can optionally check if there are newer versions of the chart at &lt;a href="https://pangeo-data.github.io/helm-chart/"&gt;https://pangeo-data.github.io/helm-chart/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then check that the pods start checking their status with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl -n pangeo get pods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If any is stuck in Pending, check with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl -n pangeo describe &amp;lt;pod-name&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the &lt;code&gt;hub&lt;/code&gt; pod is running, you should be able to connect with your browser to &lt;code&gt;js-xxx-xxx.Jetstream-cloud.org&lt;/code&gt;, by default it runs with a dummy authenticator, at the login form, just type any username and leave the password empty to login.&lt;/p&gt;
&lt;h2&gt;Launch a dask cluster&lt;/h2&gt;
&lt;p&gt;Once you get the Jupyter Notebook instance, you should see a file named &lt;code&gt;worker-template.yaml&lt;/code&gt; in your home folder, this is a template for the configuration and the allocated resources for the pod of each &lt;code&gt;dask&lt;/code&gt; worker.
The default workers for Pangeo are beefy, for testing we can reduce their requirements, see for example my &lt;a href="https://gist.github.com/zonca/21ef3125eee7af5c2548e505d47dc200"&gt;worker-template.yaml&lt;/a&gt; that works on a small Jetstream VM.&lt;/p&gt;
&lt;p&gt;Then inside &lt;code&gt;examples/&lt;/code&gt; we have several example notebooks that show how to use &lt;code&gt;dask&lt;/code&gt; for distributed computing.
&lt;code&gt;dask-array.ipynb&lt;/code&gt; shows basic functionality for distributed multi-dimensional arrays.&lt;/p&gt;
&lt;p&gt;The most important piece of code is the creation of dask workers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dask_kubernetes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KubeCluster&lt;/span&gt;
&lt;span class="n"&gt;cluster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KubeCluster&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cluster&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we execute this cell &lt;code&gt;dask_kubernetes&lt;/code&gt; contacts the Kubernetes API using the &lt;a href="https://github.com/pangeo-data/helm-chart/blob/master/pangeo/templates/dask-kubernetes-rbac.yaml"&gt;serviceaccount &lt;code&gt;daskkubernetes&lt;/code&gt;&lt;/a&gt; mounted on the pods by the Helm chart and requests new pods to be launched.
In fact we can check on the terminal again with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl -n pangeo get pods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;that new pods should be about to run.
It also provides buttons to change the number of running workers, either manually or adaptively based on the required resources.&lt;/p&gt;
&lt;p&gt;This also runs the &lt;code&gt;dask&lt;/code&gt; scheduler on the pod that is running the Jupyter Notebook and we can connect to it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dask.distributed&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From now on all &lt;code&gt;dask&lt;/code&gt; commands will automatically execute commands on the &lt;code&gt;dask&lt;/code&gt; cluster.&lt;/p&gt;
&lt;h2&gt;Customize the JupyterHub deployment&lt;/h2&gt;
&lt;p&gt;We can then customize the JupyterHub deployment for example to add authentication or permanent storage.
Notice that all configuration options inside the &lt;code&gt;config_pangeo_no_storage.yaml&lt;/code&gt; are inside the &lt;code&gt;jupyterhub:&lt;/code&gt; tag, this is due to the fact that &lt;code&gt;jupyterhub&lt;/code&gt; is another Helm package which we are configuring through the &lt;code&gt;pangeo&lt;/code&gt; Helm package.
Therefore make sure that any configuration option found in my previous tutorials or on the &lt;a href="https://zero-to-jupyterhub.readthedocs.io/en/latest/"&gt;Zero-to-Jupyterhub&lt;/a&gt; documentation needs to be indented accordingly.&lt;/p&gt;
&lt;p&gt;Then we can either run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo helm delete --purge pangeo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then install it from scratch again or just update the running cluster with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo helm upgrade pangeo -f config_pangeo_no_storage.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="jupyter"></category><category term="jetstream"></category><category term="dask"></category></entry><entry><title>How to post a PEARC18 paper pre-print to Arxiv</title><link href="http://zonca.github.io/2018/05/pearc18-preprint-arxiv.html" rel="alternate"></link><published>2018-05-12T18:00:00-07:00</published><updated>2018-05-12T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-05-12:/2018/05/pearc18-preprint-arxiv.html</id><summary type="html">&lt;h2&gt;Quick version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you have the DOI from ACM&lt;/li&gt;
&lt;li&gt;If you have Latex: create a zip with sources, figures and &lt;code&gt;.bbl&lt;/code&gt; (not &lt;code&gt;.bib&lt;/code&gt;), no output PDF&lt;/li&gt;
&lt;li&gt;If you have Word: export to PDF&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://arxiv.org/submit"&gt;https://arxiv.org/submit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Choose the first option for license and "Computer Science" and …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Quick version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you have the DOI from ACM&lt;/li&gt;
&lt;li&gt;If you have Latex: create a zip with sources, figures and &lt;code&gt;.bbl&lt;/code&gt; (not &lt;code&gt;.bib&lt;/code&gt;), no output PDF&lt;/li&gt;
&lt;li&gt;If you have Word: export to PDF&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://arxiv.org/submit"&gt;https://arxiv.org/submit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Choose the first option for license and "Computer Science" and "Distributed, Parallel, and Cluster Computing" for category&lt;/li&gt;
&lt;li&gt;In Metadata set Comments as: "7 pages, 3 figures, PEARC '18: Practice and Experience in Advanced Research Computing, July 22--26, 2018, Pittsburgh, PA, USA"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make sure you set the DOI&lt;/strong&gt; or you violate ACM rules&lt;/li&gt;
&lt;li&gt;Follow instructions until you publish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follows the step-by-step version:&lt;/p&gt;
&lt;h2&gt;Why upload a pre-print to arXiv&lt;/h2&gt;
&lt;p&gt;Journals provide a Open Access option, but it is very expensive, however, they generally allow authors to upload manuscripts before copy-editing to non-profit pre-print servers like the &lt;code&gt;arXiv&lt;/code&gt;.
This makes your paper accessible to anybody without the need of any Journal subscription, you can also upload your work months before the conference proceedings are available.&lt;/p&gt;
&lt;p&gt;See for example the page of my PEARC18 paper on the &lt;code&gt;arXiv&lt;/code&gt;: &lt;a href="https://arxiv.org/abs/1805.04781"&gt;https://arxiv.org/abs/1805.04781&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Before publishing any pre-print, you need to check on the Journal or Conference website
if it is allowed and at what conditions.&lt;/p&gt;
&lt;p&gt;PEARC18 in particular publishes with ACM, therefore we can look at the &lt;a href="http://authors.acm.org/main.html"&gt;author rights page on the ACM website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Currently the requirements for posting a pre-print are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the paper needs to be accepted and peer-reviewed&lt;/li&gt;
&lt;li&gt;this is the version by the author, before copy-editing, if any, by the journal&lt;/li&gt;
&lt;li&gt;it needs a DOI pointing to the ACM version of the paper&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Get a DOI&lt;/h2&gt;
&lt;p&gt;A DOI is generated once the author chooses a license.
PEARC18 first authors should have received an email around May 10th with a link to the ACM
website to choose a license.
There are 3 choices, Open Access is quite expensive, but we do not need that, we are still allowed
to post the pre-print even with any of the other 2 licenses, I personally recommend the
"license" option, that does not transfer copyright to ACM.
After completing this you should receive a DOI, which is a set of numbers of the form &lt;code&gt;10.1145/xxxxx.xxxxxx&lt;/code&gt;.
Also remember to add the license text you will receive via email to the paper before going on with the upload.&lt;/p&gt;
&lt;h2&gt;Prepare your Latex submission&lt;/h2&gt;
&lt;p&gt;The arXiv requires the source for any Latex paper.
If you are using the online platform &lt;a href="https://overleaf.com"&gt;Overleaf&lt;/a&gt;, click on "Project" and then "Download as zip" at the bottom.
If you are using anything else, create a zip file with all the paper sources and figures, &lt;em&gt;not the output PDF&lt;/em&gt;, also make sure that you include the &lt;code&gt;.bbl&lt;/code&gt; file, not the &lt;code&gt;.bib&lt;/code&gt;, so you need to compile your paper locally and add just the &lt;code&gt;.bbl&lt;/code&gt; to the archive.
Also, the arXiv dislikes large figures, so if you already know you have them, better resize or lower their quality before submission. Anyway you can just submit it as it is and check if they are accepted.&lt;/p&gt;
&lt;h2&gt;Prepare your Word submission&lt;/h2&gt;
&lt;p&gt;Export the paper as PDF.&lt;/p&gt;
&lt;h2&gt;Upload to arXiv&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;a href="https://arxiv.org/submit"&gt;https://arxiv.org/submit&lt;/a&gt;, either login or create a new account.&lt;/li&gt;
&lt;li&gt;At the submission page, fill the form, for license, the safest is to use the first option: "arXiv.org perpetual, non-exclusive license to distribute this article (Minimal rights required by arXiv.org)"&lt;/li&gt;
&lt;li&gt;For "Archive and Subject Class", choose "Computer Science" and "Distributed, Parallel, and Cluster Computing" unless in the list there is a more suitable field&lt;/li&gt;
&lt;li&gt;Then upload the Latex sources zip file or the conversion of the Word file to PDF.&lt;/li&gt;
&lt;li&gt;Once you have uploaded the zip file, it shows you a list of the archive content, you can delete extra files are not needed to build the paper, if you used the Overleaf ACM template, remove &lt;code&gt;sample-sigconf-authordraft.tex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the paper doesn't build, the arXiv displays the log, check for missing files or unsupported packages in particular, you can click "Add files" to upload different files&lt;/li&gt;
&lt;li&gt;If the paper successfully builds, click on the "View" button to check that the PDF is fine&lt;/li&gt;
&lt;li&gt;In the Metadata, complete the form, in the Comments, add also the conference information, for example "7 pages, 3 figures, PEARC '18: Practice and Experience in Advanced Research Computing, July 22--26, 2018, Pittsburgh, PA, USA"&lt;/li&gt;
&lt;li&gt;Still in Metadata, &lt;strong&gt;make sure you add the DOI&lt;/strong&gt; otherwise it is a violation of the conditions by ACM, the DOI is in the form  &lt;code&gt;10.1145/xxxxxx.xxxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finally check the preview and finalize your submission&lt;/li&gt;
&lt;li&gt;The submission is not available immediately, it will first be in "Processing" stage and it will be published in the next few days, you'll get an email with the publishing date and time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Update your submission&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anytime before publication you can update (overwrite) your submission&lt;/li&gt;
&lt;li&gt;After your pre-print is published you can update it at will but all previous versions will always be available on the arXiv servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to update the publication, login to the Arxiv and click on the "Replace" icon to update your paper with a new version.&lt;/p&gt;</content><category term="misc"></category><category term="pearc18"></category><category term="openscience"></category></entry><entry><title>Launch a shared dask cluster in Kubernetes alongside JupyterHub on Jetstream</title><link href="http://zonca.github.io/2018/05/shared-dask-kubernetes-jetstream.html" rel="alternate"></link><published>2018-05-04T18:00:00-07:00</published><updated>2018-05-04T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-05-04:/2018/05/shared-dask-kubernetes-jetstream.html</id><summary type="html">&lt;p&gt;Let's assume we have already a Kubernetes deployment and have installed JupyterHub, see for example my &lt;a href="https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html"&gt;previous tutorial on Jetstream&lt;/a&gt;.
Now that users can login and access a Jupyter Notebook, we would also like to provide them more computing power for their interactive data exploration. The easiest way is through …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's assume we have already a Kubernetes deployment and have installed JupyterHub, see for example my &lt;a href="https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html"&gt;previous tutorial on Jetstream&lt;/a&gt;.
Now that users can login and access a Jupyter Notebook, we would also like to provide them more computing power for their interactive data exploration. The easiest way is through &lt;a href="https://dask.pydata.org"&gt;&lt;code&gt;dask&lt;/code&gt;&lt;/a&gt;, we can launch a scheduler and any number of workers as containers inside Kubernetes so that users can leverage the computing power of many Jetstream instances at once.&lt;/p&gt;
&lt;p&gt;There are 2 main strategies, we can give each user their own dask cluster with exclusive access and this would be more performant but cause quick spike of usage of the Kubernetes cluster, or just launch a shared cluster and give all users access to that.&lt;/p&gt;
&lt;p&gt;In this tutorial we cover the second scenario, we'll cover the first scenario in a following tutorial.&lt;/p&gt;
&lt;p&gt;We will deploy first Jupyterhub through the Zero-to-JupyterHub guide, then launch via Helm a fixed size dask clusters and show how users can connect, submit distributed Python jobs and monitor their execution on the dashboard.&lt;/p&gt;
&lt;p&gt;The configuration files mentioned in the tutorial are available in the Github repository &lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream"&gt;zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Deploy JupyterHub&lt;/h2&gt;
&lt;p&gt;First we start from Jupyterhub on Jetstream with Kubernetes at &lt;a href="https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html"&gt;https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Optionally, for testing purposes, we can simplify the deployment by skipping permanent storage, if this is an option, see the relevant section below.&lt;/p&gt;
&lt;p&gt;We want to install Jupyterhub in the &lt;code&gt;pangeo&lt;/code&gt; namespace with the name &lt;code&gt;jupyter&lt;/code&gt;, replace the &lt;code&gt;helm install&lt;/code&gt; line in the tutorial with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo helm install --name jupyter jupyterhub/jupyterhub -f config_jupyterhub_pangeo_helm.yaml --namespace pangeo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;pangeo&lt;/code&gt; configuration file is using a different single user image which has the right version of &lt;code&gt;dask&lt;/code&gt; for this tutorial.&lt;/p&gt;
&lt;h2&gt;(Optional) Simplify deployment using ephemeral storage&lt;/h2&gt;
&lt;p&gt;Instead of installing and configuring rook, we can temporarily disable permanent storage to make the setup quicker and easier to maintain.&lt;/p&gt;
&lt;p&gt;In the JupyterHub configuration &lt;code&gt;yaml&lt;/code&gt; set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hub&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;

&lt;span class="n"&gt;singleuser&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now every time a user container is killed and restarted, all data are gone, this is good enough for testing purposes.&lt;/p&gt;
&lt;h2&gt;Configure Github authentication&lt;/h2&gt;
&lt;p&gt;Follow the instructions on the Zero-to-Jupyterhub documentation, at the end you should have in the YAML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;
  &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;zonca&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;otherusername&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;clientId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxxxxxxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;clientSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;callbackUrl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://js-xxx-xxx.jetstream-cloud.org/hub/oauth_callback&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Test Jupyterhub&lt;/h2&gt;
&lt;p&gt;Connect to the master node with your browser at: &lt;code&gt;https://js-xxx-xxx.jetstream-cloud.org&lt;/code&gt;
Login with your Github credentials, you should get a Jupyter Notebook.&lt;/p&gt;
&lt;p&gt;You can also check that your pod is running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl get pods -n pangeo&lt;/span&gt;
&lt;span class="err"&gt;NAME                                  READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span class="err"&gt;jupyter-zonca                         1/1       Running   0          2m&lt;/span&gt;
&lt;span class="err"&gt;......other pods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install Dask&lt;/h2&gt;
&lt;p&gt;We want to deploy a single dask cluster that all the users can submit jobs to.&lt;/p&gt;
&lt;p&gt;Customize the &lt;code&gt;dask_shared/dask_config.yaml&lt;/code&gt; file available in the repository,
for testing purposes I set just 1 GB RAM and 1 CPU limits on each of 3 workers.
We can change &lt;code&gt;replicas&lt;/code&gt; of the workers to add more.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo helm install stable/dask --name=dask --namespace=pangeo -f dask_config.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then check that the &lt;code&gt;dask&lt;/code&gt; instances are running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo kubectl get pods --namespace pangeo
NAME                              READY     STATUS    RESTARTS   AGE
dask-jupyter-647bdc8c6d-mqhr4     &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          22m
dask-scheduler-5d98cbf54c-4rtdr   &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          22m
dask-worker-6457975f74-dqhsh      &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          22m
dask-worker-6457975f74-lpvk4      &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          22m
dask-worker-6457975f74-xzcmc      &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          22m
hub-7f75b59fc5-8c2pg              &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          6d
jupyter-zonca                     &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          10m
proxy-6bbf67f6bd-swt7f            &lt;span class="m"&gt;2&lt;/span&gt;/2       Running   &lt;span class="m"&gt;0&lt;/span&gt;          6d
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Access the scheduler and launch a distributed job&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kube-dns&lt;/code&gt; gives a name to each service and automatically propagates it to each pod, so we can connect by name&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dask.distributed&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dask-scheduler:8786&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can access the 3 workers that we launched before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Client&lt;/span&gt;
&lt;span class="c"&gt;Scheduler: tcp://dask-scheduler:8786&lt;/span&gt;
&lt;span class="c"&gt;Dashboard: http://dask-scheduler:8787/status&lt;/span&gt;
&lt;span class="err"&gt;Cluster&lt;/span&gt;
&lt;span class="c"&gt;Workers: 3&lt;/span&gt;
&lt;span class="c"&gt;Cores: 6&lt;/span&gt;
&lt;span class="c"&gt;Memory: 12.43 GB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can run an example computation with dask array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dask.array&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;da&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;da&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;20000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;chunks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;persist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Access the Dask dashboard for monitoring job execution&lt;/h3&gt;
&lt;p&gt;We need to setup ingress so that a path points to the Dask dashboard instead of Jupyterhub,&lt;/p&gt;
&lt;p&gt;Checkout the file &lt;code&gt;dask_shared/dask_webui_ingress.yaml&lt;/code&gt; in the repository, it routes the path &lt;code&gt;/dask&lt;/code&gt;
to the &lt;code&gt;dask-scheduler&lt;/code&gt; service.&lt;/p&gt;
&lt;p&gt;Create the ingress resource with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl create ingress -n pangeo -f dask_webui_ingress.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All users can now access the dashboard at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://js-xxx-xxx.jetstream-cloud.org/dask/status"&gt;https://js-xxx-xxx.jetstream-cloud.org/dask/status&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure to use &lt;code&gt;/dask/status/&lt;/code&gt; and not only &lt;code&gt;/dask&lt;/code&gt;.
Currently this is not authenticated, so this address is publicly available.
A simple way to hide it is to choose a custom name instead of &lt;code&gt;/dask&lt;/code&gt; and edit
the ingress accordingly with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl edit ingress dask -n pangeo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="jupyter"></category><category term="jetstream"></category><category term="dask"></category></entry><entry><title>Install a BOINC server on Jetstream</title><link href="http://zonca.github.io/2018/03/boinc-server-jetstream.html" rel="alternate"></link><published>2018-03-29T18:00:00-07:00</published><updated>2018-03-29T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-03-29:/2018/03/boinc-server-jetstream.html</id><summary type="html">&lt;p&gt;&lt;a href="https://boinc.berkeley.edu/"&gt;BOINC&lt;/a&gt; is the leading platform for volunteer computing.&lt;/p&gt;
&lt;p&gt;Scientists can create a project on the platform and submit computational jobs that will
be executed on computers of volunteers all over the world.&lt;/p&gt;
&lt;p&gt;In this post we'll deploy a BOINC server on Jetstream. All US scientists can get a free
&lt;a href="https://jetstream-cloud.org/allocations.php"&gt;allocation …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://boinc.berkeley.edu/"&gt;BOINC&lt;/a&gt; is the leading platform for volunteer computing.&lt;/p&gt;
&lt;p&gt;Scientists can create a project on the platform and submit computational jobs that will
be executed on computers of volunteers all over the world.&lt;/p&gt;
&lt;p&gt;In this post we'll deploy a BOINC server on Jetstream. All US scientists can get a free
&lt;a href="https://jetstream-cloud.org/allocations.php"&gt;allocation on Jetstream via XSEDE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The deployment will be based on the &lt;a href="https://github.com/marius311/boinc-server-docker"&gt;Docker setup developed by the Cosmology@Home project&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Prepare a Jetstream Virtual Machine&lt;/h2&gt;
&lt;p&gt;First we login on the Atmosphere Jetstream control panel and create a new instance
of Ubuntu 16.04 with Docker preinstalled, a "small" size is enough for testing.&lt;/p&gt;
&lt;h3&gt;(Optional) Mount a Jetstream Volume for docker images&lt;/h3&gt;
&lt;p&gt;It is ideal to have a dedicated Jetstream Volume and mount it in the location where
Docker stores its data. So we have more space, less usage of the root filesystem
and no issues on the OS if we get out of disk space.&lt;/p&gt;
&lt;p&gt;We can create a volume of 10/20 GB in the Jetstream control panel and attach it to
the running Virtual Machine. This will be automatically mounted to &lt;code&gt;/vol_b&lt;/code&gt;, we
want to mount instead to &lt;code&gt;/var/lib/docker&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo systemctl stop docker&lt;/span&gt;
&lt;span class="err"&gt;sudo mv /var/lib/docker/* /vol_b/&lt;/span&gt;
&lt;span class="err"&gt;sudo umount /vol_b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace &lt;code&gt;/vol_b&lt;/code&gt; with &lt;code&gt;/var/lib/docker&lt;/code&gt; in &lt;code&gt;/etc/fstab&lt;/code&gt;, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;zonca@js-xxx-xxx:~$ cat /etc/fstab&lt;/span&gt;
&lt;span class="err"&gt;LABEL=cloudimg-rootfs   /        ext4   defaults        0 0&lt;/span&gt;
&lt;span class="err"&gt;/dev/sdb /var/lib/docker ext4 defaults,nofail 0 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo mount /var/lib/docker&lt;/span&gt;
&lt;span class="err"&gt;sudo systemctl start docker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Update Docker&lt;/h3&gt;
&lt;p&gt;Docker in 16.04 is a bit old, we want to update it to a more recent version.&lt;/p&gt;
&lt;p&gt;We also want to make sure to remove the old &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;docker-compose&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo apt remove docker-compose docker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then install a recent version,
we can follow the instructions from the docker website or use this script:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/zonca/f5faba190f5285c68dad48e897622e90"&gt;https://gist.github.com/zonca/f5faba190f5285c68dad48e897622e90&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I adapted it from &lt;a href="https://github.com/data-8/kubeadm-bootstrap/blob/master/install-kubeadm.bash"&gt;kubeadm-bootstrap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally install the latest &lt;code&gt;docker-compose&lt;/code&gt;, see the &lt;a href="https://docs.docker.com/compose/install/#install-compose"&gt;documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last step, add your user to the &lt;code&gt;docker&lt;/code&gt; group:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo adduser $USER docker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;logout and back in and make sure you can run &lt;code&gt;docker&lt;/code&gt; commands without sudo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker ps&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install BOINC server via Docker&lt;/h3&gt;
&lt;p&gt;Follow the &lt;a href="https://github.com/marius311/boinc-server-docker"&gt;instructions from &lt;code&gt;boinc-server-docker&lt;/code&gt;&lt;/a&gt;
to launch a test deployment, in the last step, specify a &lt;code&gt;URL_BASE&lt;/code&gt; so that
the deployment will be accessible from outside connections:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;URL_BASE=http://$(hostname) docker-compose up -d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can check that the 3 containers are running with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker ps&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and inspect their logs with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker logs &amp;lt;container_id&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After a few minutes you should be able to check that the server is running at the
public address of your instance:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://js-xxx-xxx.jetstream-cloud.org/boincserver/"&gt;http://js-xxx-xxx.jetstream-cloud.org/boincserver/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;(Optional) Mount Jetstream volumes on the containers&lt;/h2&gt;
&lt;p&gt;The Docker compose recipe defines 3 Docker volumes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysql&lt;/code&gt;: Data of the MySQL database&lt;/li&gt;
&lt;li&gt;&lt;code&gt;project&lt;/code&gt;: Files about the project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;results&lt;/code&gt;: Result of the BOINC jobs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;those volumes are managed internally
by Docker and stored somewhere inside &lt;code&gt;/var/lib/docker&lt;/code&gt; on the host node.&lt;/p&gt;
&lt;p&gt;Docker also allows to mount specific folders from the host into a container,
if we back these folders by a Jetstream volume, we can have dedicated detachable Jetstream volumes
that live independently from any virtual machine.&lt;/p&gt;
&lt;p&gt;Let's start by &lt;code&gt;mysql&lt;/code&gt;, the same process can then be replicated for the other resources.&lt;/p&gt;
&lt;p&gt;We create another Jetstream volume from the Atmosphere, name it &lt;code&gt;mysql&lt;/code&gt; and attach it to the virtual machine,
this will be automatically mounted to &lt;code&gt;/vol_c&lt;/code&gt;, we can rename it by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo umount /vol_c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace &lt;code&gt;vol_c&lt;/code&gt; with &lt;code&gt;mysql&lt;/code&gt; in &lt;code&gt;/etc/fstab&lt;/code&gt;, finally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo mount /mysql&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally you can modify the &lt;code&gt;docker-compose.yml&lt;/code&gt; to use this folder instead of a Docker Volume:&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;volumes:&lt;/code&gt; section, remove &lt;code&gt;mysql:&lt;/code&gt;, in the definition of the MySQL service,
replace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;volumes:&lt;/span&gt;
&lt;span class="c"&gt; - &amp;quot;mysql:/var/lib/mysql&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;volumes:&lt;/span&gt;
&lt;span class="c"&gt; - &amp;quot;/mysql:/var/lib/mysql&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So that instead of using a Docker Volume named &lt;code&gt;mysql&lt;/code&gt; is creating a bind-mount to &lt;code&gt;/mysql&lt;/code&gt; on the host.&lt;/p&gt;
&lt;h2&gt;Test jobs&lt;/h2&gt;
&lt;p&gt;Open a terminal in the BOINC server container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bash&lt;/span&gt;


&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;boinc2docker_create_work&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
    &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;alpine&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;open(&amp;#39;/root/shared/results/hello.txt&amp;#39;,&amp;#39;w&amp;#39;).write(&amp;#39;Hello BOINC&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can test a client connection and execution either with a standard BOINC desktop client or on another Jetstream instance.&lt;/p&gt;
&lt;h3&gt;Test with a BOINC Desktop client&lt;/h3&gt;
&lt;p&gt;Follow the instructions on the &lt;a href="https://boinc.berkeley.edu/"&gt;BOINC website&lt;/a&gt; to install a client for your OS, install also VirtualBox, then set as the URL of the BOINC server the URL of the server we just created.&lt;/p&gt;
&lt;h3&gt;Test with a BOINC client in another Jetstream instance&lt;/h3&gt;
&lt;p&gt;Create another Ubuntu with Docker tiny instane on Jetstream, login,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo adduser $USER docker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need Virtualbox:
sudo apt install virtualbox-dkms&lt;/p&gt;
&lt;p&gt;and reboot to make sure VirtualBox is active.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetstream&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cloud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;boinc&lt;/span&gt; &lt;span class="n"&gt;boinccmd&lt;/span&gt; &lt;span class="c1"&gt;--create_account $URL email password name&lt;/span&gt;

&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Success&lt;/span&gt;
&lt;span class="n"&gt;poll&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;operation&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt;
&lt;span class="n"&gt;poll&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;operation&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt;
&lt;span class="n"&gt;poll&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;operation&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;de9c4cc66b8c923d04f834a0609ae742&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can save the account key in a environment variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;URL=http://js-xxx-xxx.jetstream-cloud.org/boincserver/&lt;/span&gt;
&lt;span class="err"&gt;URL=http://js-xxx-xxx.jetstream-cloud.org/boincserver/&lt;/span&gt;
&lt;span class="err"&gt;account_key=de9c4cc66b8c923d04f834a0609ae742&lt;/span&gt;
&lt;span class="err"&gt;docker exec boinc boinccmd --project_attach $URL $account_key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can check the logs for the job being received and executed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker logs boinc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Started&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer_e9e858f6a2ba5a3e5a04b5799ef2de1c21a58602ffd400838ed10599f1b4a42c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Finished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer_10ffed26db733866a346caf7c79558e4addb23ae085a991b5e7237edaa69f8e2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Finished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer_e9e858f6a2ba5a3e5a04b5799ef2de1c21a58602ffd400838ed10599f1b4a42c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Started&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer_0e650ab7661f993eff514b84c6e7b775f5be8c6dde8b63eb584f0f22ea24005f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Started&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image_4fcaf5fb5f2b8230c53b5fd4c4325df00021d45272dc4bfbb2148e5ca91ac166&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Finished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer_0e650ab7661f993eff514b84c6e7b775f5be8c6dde8b63eb584f0f22ea24005f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Finished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image_4fcaf5fb5f2b8230c53b5fd4c4325df00021d45272dc4bfbb2148e5ca91ac166&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Starting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;boinc2docker_3766_1522410497&lt;/span&gt;&lt;span class="mf"&gt;.503524&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sending&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;work&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Requesting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Scheduler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;got&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;---&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vbox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;indicates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;disabled&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Computation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;boinc2docker_3766_1522410497&lt;/span&gt;&lt;span class="mf"&gt;.503524&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;boinc2docker_3766_1522410497&lt;/span&gt;&lt;span class="mf"&gt;.503524&lt;/span&gt;&lt;span class="n"&gt;_0_r207563194_0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tgz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;boinc2docker_3766_1522410497&lt;/span&gt;&lt;span class="mf"&gt;.503524&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;absent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Starting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;boinc2docker_3766_1522410497&lt;/span&gt;&lt;span class="mf"&gt;.503524&lt;/span&gt;&lt;span class="n"&gt;_1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;---&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vbox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;indicates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;disabled&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Computation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;boinc2docker_3766_1522410497&lt;/span&gt;&lt;span class="mf"&gt;.503524&lt;/span&gt;&lt;span class="n"&gt;_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;boincserver&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;boinc2docker_3766_1522410497&lt;/span&gt;&lt;span class="mf"&gt;.503524&lt;/span&gt;&lt;span class="n"&gt;_1_r1095010587_0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tgz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;boinc2docker_3766_1522410497&lt;/span&gt;&lt;span class="mf"&gt;.503524&lt;/span&gt;&lt;span class="n"&gt;_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;absent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="boinc"></category><category term="jetstream"></category><category term="gateways"></category></entry><entry><title>Use the distributed file format Zarr on Jetstream Swift object storage</title><link href="http://zonca.github.io/2018/03/zarr-on-jetstream.html" rel="alternate"></link><published>2018-03-03T18:00:00-08:00</published><updated>2018-03-03T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2018-03-03:/2018/03/zarr-on-jetstream.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Updated again in January 2019&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Zarr&lt;/h2&gt;
&lt;p&gt;Zarr is a pretty new file format designed for cloud computing, see &lt;a href="http://zarr.readthedocs.io"&gt;documentation&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=np_p4JBAIYI"&gt;a webinar&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Zarr is also supported by &lt;a href="http://dask.pydata.org"&gt;dask&lt;/a&gt;, the parallel computing framework for Python,
and the Dask team implemented storage backends for &lt;a href="https://github.com/dask/gcsfs"&gt;Google Cloud Storage&lt;/a&gt; and
&lt;a href="https://github.com/dask/s3fs"&gt;Amazon …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Updated again in January 2019&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Zarr&lt;/h2&gt;
&lt;p&gt;Zarr is a pretty new file format designed for cloud computing, see &lt;a href="http://zarr.readthedocs.io"&gt;documentation&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=np_p4JBAIYI"&gt;a webinar&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Zarr is also supported by &lt;a href="http://dask.pydata.org"&gt;dask&lt;/a&gt;, the parallel computing framework for Python,
and the Dask team implemented storage backends for &lt;a href="https://github.com/dask/gcsfs"&gt;Google Cloud Storage&lt;/a&gt; and
&lt;a href="https://github.com/dask/s3fs"&gt;Amazon S3&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Use OpenStack swift on Jetstream for object storage&lt;/h2&gt;
&lt;p&gt;Jetstream also offers (currently in beta) access to object storage via OpenStack Swift.
This is a separate service from the Jetstream Virtual Machines, so you do not need to spin
any Virtual Machine dedicated to storing the data but just use the object storage already
provided by Jetstream.&lt;/p&gt;
&lt;h2&gt;Read Zarr files from object store&lt;/h2&gt;
&lt;p&gt;If somebody else has already made available some files on object store and set their visibility
to "public", anybody can read them.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://gist.github.com/zonca/bda69ab917bde831845d530e52eae6e5"&gt;example Notebook to read Zarr files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;OpenStack Swift already provides an endpoint which has an interface compatible with Amazon S3, therefore
we can directly use the &lt;code&gt;S3FileSystem&lt;/code&gt; provided by &lt;code&gt;s3fs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we can build a &lt;code&gt;S3Map&lt;/code&gt; object which &lt;code&gt;zarr&lt;/code&gt; and &lt;code&gt;xarray&lt;/code&gt; can access.
I removed the endpoint url from the Notebook to avoid test traffic. You can request it to
the XSEDE helpdesk.&lt;/p&gt;
&lt;p&gt;In this example I am using the &lt;code&gt;distributed&lt;/code&gt; scheduler on a single node, you can scale up your computation
having workers distributed on multiple nodes, just make sure that all the workers have access to the
&lt;code&gt;zarr&lt;/code&gt;, &lt;code&gt;xarray&lt;/code&gt;, &lt;code&gt;s3fs&lt;/code&gt; packages.&lt;/p&gt;
&lt;h2&gt;Write Zarr files or read private files&lt;/h2&gt;
&lt;p&gt;In this case we need authentication.&lt;/p&gt;
&lt;p&gt;First you need to ask to the XSEDE helpdesk API access to Jetstream, this also gives access
to the Horizon interface, which has many advanced features that are not available in Atmosphere.&lt;/p&gt;
&lt;p&gt;Consider that credentials are different whether you are using the object store at IU or TACC,
therefore make sure that credentials and &lt;code&gt;JETSTREAM_SWIFT_ENDPOINT&lt;/code&gt; are consistent.&lt;/p&gt;
&lt;h3&gt;Create a bucket&lt;/h3&gt;
&lt;p&gt;Object store systems are organized on buckets, which are like root folders of our filesystem.
From the Horizon interface, we can choose Object Store -&amp;gt; Containers (quite confusing way of referring to buckets in OpenStack).
Here we can check content of existing buckets or create a new one.&lt;/p&gt;
&lt;h3&gt;Get credentials&lt;/h3&gt;
&lt;p&gt;From Horizon, choose the project you want to charge usage from the dropdown menu at the top.&lt;/p&gt;
&lt;p&gt;Then download the openstack RC file version 3 from: &lt;a href="https://iu.jetstream-cloud.org/project/api_access/"&gt;https://iu.jetstream-cloud.org/project/api_access/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At this point we need to transform it into Amazon-style credentials, you can do this on
any host, not necessarily on Jetstream, install OpenStack client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pip install python-openstackclient&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;source the openstackRC file, put the password, this is the TACC password (the same used to access Horizon), NOT the XSEDE Password.&lt;/p&gt;
&lt;p&gt;Now we can check the content of the bucket we created above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack object list my_bucket&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now create ec2 credentials with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;openstack ec2 credentials create&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is going to display AWS access key and AWS secret, we can save credentials in &lt;code&gt;~/.aws/config&lt;/code&gt;
in the machine we want then use to write to object store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[default]&lt;/span&gt;
&lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;RegionOne&lt;/span&gt;
&lt;span class="na"&gt;aws_access_key_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/span&gt;
&lt;span class="na"&gt;aws_secret_access_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Test access&lt;/h3&gt;
&lt;p&gt;We can check if we can successfully login using &lt;code&gt;s3fs&lt;/code&gt;, notice we &lt;strong&gt;do not use&lt;/strong&gt; &lt;code&gt;anon=True&lt;/code&gt; as
we did before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;s3fs&lt;/span&gt;
&lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s3fs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S3FileSystem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;JETSTREAM_SWIFT_ENDPOINT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_bucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure that &lt;code&gt;JETSTREAM_SWIFT_ENDPOINT&lt;/code&gt; &lt;strong&gt;does not&lt;/strong&gt; include &lt;code&gt;/swift/v1&lt;/code&gt;!&lt;/p&gt;
&lt;h3&gt;Read a file from local filesystem and write to Object store&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://gist.github.com/zonca/f7cb1c7845f6b821dc8d178f84253ba3"&gt;this notebook as an example of writing to object store&lt;/a&gt;,
first we make sure to have the necessary Python packages,
then we use &lt;code&gt;xarray&lt;/code&gt; to read data from NetCDF and then write back to Zarr first locally and then
via &lt;code&gt;s3fs&lt;/code&gt; to Openstack Swift.&lt;/p&gt;
&lt;p&gt;See the Zarr documentation about how to tweak, compression, data transformations and chunking.&lt;/p&gt;
&lt;h3&gt;Troubleshooting&lt;/h3&gt;
&lt;p&gt;In case anything doesn't work, you can get the debug logging executing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
&lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_stream_logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;before&lt;/strong&gt; executing &lt;code&gt;s3fs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, in case you believe anything is not working in &lt;code&gt;s3fs&lt;/code&gt;, here is a &lt;a href="https://gist.github.com/zonca/73e14d98698cba67d71a55309b02b265"&gt;handy test script using only &lt;code&gt;boto3&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="jupyter"></category><category term="jetstream"></category><category term="zarr"></category></entry><entry><title>Install custom Python environment on Jupyter Notebooks at NERSC</title><link href="http://zonca.github.io/2017/12/custom-conda-python-jupyter-nersc.html" rel="alternate"></link><published>2017-12-21T18:00:00-08:00</published><updated>2017-12-21T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-12-21:/2017/12/custom-conda-python-jupyter-nersc.html</id><summary type="html">&lt;h2&gt;Jupyter Notebooks at NERSC&lt;/h2&gt;
&lt;p&gt;NERSC has provided a JupyterHub instance for quite some time to all NERSC users.
It is currently running on a dedicated large-memory node on Cori, so now it can access also data on
Cori &lt;code&gt;$SCRATCH&lt;/code&gt;, not only &lt;code&gt;/project&lt;/code&gt; and &lt;code&gt;$HOME&lt;/code&gt;. See &lt;a href="http://www.nersc.gov/users/data-analytics/data-analytics-2/jupyter-and-rstudio/"&gt;their documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Customize your Python …&lt;/h2&gt;</summary><content type="html">&lt;h2&gt;Jupyter Notebooks at NERSC&lt;/h2&gt;
&lt;p&gt;NERSC has provided a JupyterHub instance for quite some time to all NERSC users.
It is currently running on a dedicated large-memory node on Cori, so now it can access also data on
Cori &lt;code&gt;$SCRATCH&lt;/code&gt;, not only &lt;code&gt;/project&lt;/code&gt; and &lt;code&gt;$HOME&lt;/code&gt;. See &lt;a href="http://www.nersc.gov/users/data-analytics/data-analytics-2/jupyter-and-rstudio/"&gt;their documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Customize your Python environment&lt;/h2&gt;
&lt;p&gt;NERSC provides Anaconda in a Ubuntu container, of course the user doesn't have permission to write to the Anaconda folder to install new packages.&lt;/p&gt;
&lt;p&gt;The easiest way is to install a custom Python environment is to create another conda environment and then register the Kernel with Jupyter.&lt;/p&gt;
&lt;p&gt;Create a new conda environment, best choice is &lt;code&gt;/project&lt;/code&gt; if you have one, otherwise &lt;code&gt;$HOME&lt;/code&gt; would work.
Access &lt;a href="http://jupyter.nersc.gov"&gt;http://jupyter.nersc.gov&lt;/a&gt;, open a terminal with "New"-&amp;gt;"Terminal".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;conda create --prefix $HOME/myconda python=3.6 ipykernel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the minimal requirement, you could just add &lt;code&gt;anaconda&lt;/code&gt; to get all the latest packages, you can also specify &lt;code&gt;conda-forge&lt;/code&gt; to install other packages, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;source activate myconda&lt;/span&gt;
&lt;span class="err"&gt;conda install -c conda-forge healpy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Register the kernel with the Jupyter Notebook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ipython kernel install --name myconda --user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The name of the kernel specified here doesn't need to be the same as the conda environment name, but it is simpler.&lt;/p&gt;
&lt;p&gt;Once the conda environment is active, you can also install packages with &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;conda install pip&lt;/span&gt;
&lt;span class="err"&gt;pip install somepackage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="jupyterhub"></category><category term="python"></category><category term="nersc"></category></entry><entry><title>ECSS Symposium about Jupyterhub deployments on XSEDE</title><link href="http://zonca.github.io/2017/12/ecss-symposium.html" rel="alternate"></link><published>2017-12-15T18:00:00-08:00</published><updated>2017-12-15T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-12-15:/2017/12/ecss-symposium.html</id><summary type="html">&lt;h2&gt;Jupyter Notebooks at scale for Gateways and Workshops&lt;/h2&gt;
&lt;p&gt;ECSS Symposium, 19 December 2017, Web presentation to the XSEDE &lt;a href="https://www.xsede.org/for-users/ecss"&gt;Extended Collaborative Support Services&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overview on deployment options for Jupyter Notebooks at scale on XSEDE resources.&lt;/p&gt;
&lt;h2&gt;Presentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1vxtRaeju7qWrb_RXcsh-m2lKEDZoFBCJE0SWOMi-wNo/edit?usp=sharing"&gt;Google doc slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=BE6tRuJtq8c"&gt;Recording of the talk on Youtube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tutorials&lt;/h2&gt;
&lt;p&gt;Step-by-step tutorials and configuration files …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Jupyter Notebooks at scale for Gateways and Workshops&lt;/h2&gt;
&lt;p&gt;ECSS Symposium, 19 December 2017, Web presentation to the XSEDE &lt;a href="https://www.xsede.org/for-users/ecss"&gt;Extended Collaborative Support Services&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overview on deployment options for Jupyter Notebooks at scale on XSEDE resources.&lt;/p&gt;
&lt;h2&gt;Presentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1vxtRaeju7qWrb_RXcsh-m2lKEDZoFBCJE0SWOMi-wNo/edit?usp=sharing"&gt;Google doc slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=BE6tRuJtq8c"&gt;Recording of the talk on Youtube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tutorials&lt;/h2&gt;
&lt;p&gt;Step-by-step tutorials and configuration files to deploy JupyterHub on XSEDE resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2017/05/jupyterhub-hpc-batchspawner-ssh.html"&gt;spawn Notebooks on a traditional HPC system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2017/10/scalable-jupyterhub-docker-swarm-mode.html"&gt;setup a distributed scalable system on Jetstream instances via &lt;strong&gt;Docker Swarm&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html"&gt;setup a distributed scalable system on Jetstream instances via &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Publication&lt;/h2&gt;
&lt;p&gt;Paper in preparation: "Deploying Jupyter Notebooks at scale on XSEDE for Science Gateways and workshops", Andrea Zonca and Robert Sinkovits, PEARC18&lt;/p&gt;</content><category term="misc"></category><category term="jupyterhub"></category><category term="jetstream"></category><category term="gateways"></category></entry><entry><title>Deploy scalable Jupyterhub with Kubernetes on Jetstream</title><link href="http://zonca.github.io/2017/12/scalable-jupyterhub-kubernetes-jetstream.html" rel="alternate"></link><published>2017-12-05T18:00:00-08:00</published><updated>2017-12-05T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-12-05:/2017/12/scalable-jupyterhub-kubernetes-jetstream.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tested in June 2018 with Ubuntu 18.04 and Kubernetes 1.10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updated in February 2018 with newer version of &lt;code&gt;kubeadm-bootstrap&lt;/code&gt;, Kubernetes 1.9.2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The best infrastructure available to deploy Jupyterhub at scale is Kubernetes. Kubernetes provides a fault-tolerant system to deploy, manage and scale containers. The Jupyter …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tested in June 2018 with Ubuntu 18.04 and Kubernetes 1.10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updated in February 2018 with newer version of &lt;code&gt;kubeadm-bootstrap&lt;/code&gt;, Kubernetes 1.9.2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The best infrastructure available to deploy Jupyterhub at scale is Kubernetes. Kubernetes provides a fault-tolerant system to deploy, manage and scale containers. The Jupyter team released a recipe to deploy Jupyterhub on top of Kubernetes, &lt;a href="https://zero-to-jupyterhub.readthedocs.io"&gt;Zero to Jupyterhub&lt;/a&gt;. In this deployment both the hub, the proxy and all Jupyter Notebooks servers for the users are running inside Docker containers managed by Kubernetes.&lt;/p&gt;
&lt;p&gt;Kubernetes is a highly sophisticated system, for smaller deployments (30/50 users, less then 10 servers), another option is to use the Docker Swarm mode, I covered this in a &lt;a href="https://zonca.github.io/2017/10/scalable-jupyterhub-docker-swarm-mode.html"&gt;tutorial on how to deploy it on Jetstream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are not already familiar with Kubernetes, better first read the &lt;a href="https://zero-to-jupyterhub.readthedocs.io/en/latest/tools.html"&gt;section about tools in Zero to Jupyterhub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this tutorial we will be installing Kubernetes on 2 Ubuntu instances on the XSEDE Jetstream OpenStack-based cloud, configure permanent storage with the Ceph distributed filesystem and run the "Zero to Jupyterhub" recipe to install Jupyterhub on it.&lt;/p&gt;
&lt;h2&gt;Setup two virtual machines&lt;/h2&gt;
&lt;p&gt;First of all we need to create two Virtual Machines from the &lt;a href="https://use.jetstream-cloud.org"&gt;Jetstream Atmosphere admin panel&lt;/a&gt;I tested this on XSEDE Jetstream Ubuntu 16.04 image (with Docker pre-installed), for testing purposes "small" instances work, then they can be scaled up for production. You can name them &lt;code&gt;master_node&lt;/code&gt; and &lt;code&gt;node_1&lt;/code&gt; for example.
Make sure that port 80 and 443 are open to outside connections.&lt;/p&gt;
&lt;p&gt;Then you can SSH into the first machine with your XSEDE username with &lt;code&gt;sudo&lt;/code&gt; privileges.&lt;/p&gt;
&lt;h2&gt;Install Kubernetes&lt;/h2&gt;
&lt;p&gt;The "Zero to Jupyterhub" recipe targets an already existing Kubernetes cluster, for example on Google Cloud. However the Berkeley Data Science Education Program team, which administers one of the largest Jupyterhub deployments to date, released a set of scripts based on the &lt;code&gt;kubeadm&lt;/code&gt; tool to setup Kubernetes from scratch.&lt;/p&gt;
&lt;p&gt;This will install all the Kubernetes services and configure the &lt;code&gt;kubectl&lt;/code&gt; command line tool for administering and monitoring the cluster and the &lt;code&gt;helm&lt;/code&gt; package manager to install pre-packaged services.&lt;/p&gt;
&lt;p&gt;SSH into the first server and follow the instructions at &lt;a href="https://github.com/data-8/kubeadm-bootstrap"&gt;https://github.com/data-8/kubeadm-bootstrap&lt;/a&gt; to "Setup a Master Node"
this will install a more recent version of Docker.&lt;/p&gt;
&lt;p&gt;Once the initialization of the master node is completed, you should be able to check that several containers (pods in Kubernetes) are running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;zonca@js-xxx-xxx:~/kubeadm-bootstrap$ sudo kubectl get pods --all-namespaces&lt;/span&gt;
&lt;span class="err"&gt;NAMESPACE     NAME                                                    READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span class="err"&gt;kube-system   etcd-js-169-xx.jetstream-cloud.org                      1/1       Running   0          1m&lt;/span&gt;
&lt;span class="err"&gt;kube-system   kube-apiserver-js-169-xx.jetstream-cloud.org            1/1       Running   0          1m&lt;/span&gt;
&lt;span class="err"&gt;kube-system   kube-controller-manager-js-169-xx.jetstream-cloud.org   1/1       Running   0          1m&lt;/span&gt;
&lt;span class="err"&gt;kube-system   kube-dns-6f4fd4bdf-nxxkh                                3/3       Running   0          2m&lt;/span&gt;
&lt;span class="err"&gt;kube-system   kube-flannel-ds-rlsgb                                   1/1       Running   1          2m&lt;/span&gt;
&lt;span class="err"&gt;kube-system   kube-proxy-ntmwx                                        1/1       Running   0          2m&lt;/span&gt;
&lt;span class="err"&gt;kube-system   kube-scheduler-js-169-xx.jetstream-cloud.org            1/1       Running   0          2m&lt;/span&gt;
&lt;span class="err"&gt;kube-system   tiller-deploy-69cb6984f-77nx2                           1/1       Running   0          2m&lt;/span&gt;
&lt;span class="err"&gt;support       support-nginx-ingress-controller-k4swb                  1/1       Running   0          36s&lt;/span&gt;
&lt;span class="err"&gt;support       support-nginx-ingress-default-backend-cb84895fb-qs9pp   1/1       Running   0          36s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make also sure routing is working by accessing with your web browser the address of the Virtual Machine &lt;code&gt;js-169-xx.jetstream-cloud.org&lt;/code&gt; and verify you are getting the error message &lt;code&gt;default backend - 404&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then SSH to the other server and set it up as a worker following the instructions in "Setup a Worker Node" at &lt;a href="https://github.com/data-8/kubeadm-bootstrap"&gt;https://github.com/data-8/kubeadm-bootstrap&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;Once the setup is complete on the worker, log back in to the master and check that the worker joined Kubernetes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;zonca@js-169-xx:~/kubeadm-bootstrap$ sudo kubectl get nodes&lt;/span&gt;
&lt;span class="err"&gt;NAME                             STATUS    ROLES     AGE       VERSION&lt;/span&gt;
&lt;span class="err"&gt;js-168-yyy.jetstream-cloud.org   Ready     &amp;lt;none&amp;gt;    1m        v1.9.2&lt;/span&gt;
&lt;span class="err"&gt;js-169-xx.jetstream-cloud.org    Ready     master    2h        v1.9.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setup permanent storage for Kubernetes&lt;/h2&gt;
&lt;p&gt;The cluster we just setup has no permament storage, so user data would disappear every time a container is killed.
We woud like to provide users with a permament home that would be available across all of the Kubernetes cluster, so that even if a user container spawns again on a different server, the data are available.&lt;/p&gt;
&lt;p&gt;First we want to login again to Jetstream web interface and create 2 Volumes (for example 10 GB) and attach them one each to the master and to the first node, these will be automatically mounted on &lt;code&gt;/vol_b&lt;/code&gt;, with no need of rebooting the servers.&lt;/p&gt;
&lt;p&gt;Kubernetes has capability to provide Permanent Volumes but it needs a backend distributed file system. In this tutorial we will be using &lt;a href="https://rook.io/"&gt;Rook&lt;/a&gt; which sets up the Ceph distributed filesystem across the nodes.&lt;/p&gt;
&lt;p&gt;We can first use Helm to install the Rook services (I ran my tests with &lt;code&gt;v0.6.1&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo helm repo add rook-alpha https://charts.rook.io/alpha&lt;/span&gt;
&lt;span class="err"&gt;sudo helm install rook-alpha/rook&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then check that the pods have started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;zonca@js-xxx-xxx:~/kubeadm-bootstrap$ sudo kubectl get pods&lt;/span&gt;
&lt;span class="err"&gt;NAME                            READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span class="err"&gt;rook-agent-2v86r                1/1       Running   0          1h&lt;/span&gt;
&lt;span class="err"&gt;rook-agent-7dfl9                1/1       Running   0          1h&lt;/span&gt;
&lt;span class="err"&gt;rook-operator-88fb8f6f5-tss5t   1/1       Running   0          1h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the pods have started we can actually configure the storage, copy this &lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/blob/master/storage_rook/rook-cluster.yaml"&gt;&lt;code&gt;rook-cluster.yaml&lt;/code&gt; file&lt;/a&gt; to the master node. Better clone all of the repository as we will be using other files later.&lt;/p&gt;
&lt;p&gt;The most important bits are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dataDirHostPath&lt;/code&gt;: this is a folder to save the Rook configuration, we can set it to &lt;code&gt;/var/lib/rook&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storage: directories&lt;/code&gt;: this is were data is stored, we can set this to &lt;code&gt;/vol_b&lt;/code&gt; which is the default mount point of Volumes on Jetstream. This way we can more easily back those up or increase their size.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;versionTag&lt;/code&gt;: make sure this is the same as your &lt;code&gt;rook&lt;/code&gt; version (you can find it with &lt;code&gt;sudo helm ls&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then run it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl create -f rook-cluster.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And wait for the services to launch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;zonca@js-xxx-xxx:~/kubeadm-bootstrap$ sudo kubectl -n rook get pods&lt;/span&gt;
&lt;span class="err"&gt;NAME                              READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span class="err"&gt;rook-api-68b87d48d5-xmkpv         1/1       Running   0          6m&lt;/span&gt;
&lt;span class="err"&gt;rook-ceph-mgr0-5ddd685b65-kw9bz   1/1       Running   0          6m&lt;/span&gt;
&lt;span class="err"&gt;rook-ceph-mgr1-5fcf599447-j7bpn   1/1       Running   0          6m&lt;/span&gt;
&lt;span class="err"&gt;rook-ceph-mon0-g7xsk              1/1       Running   0          7m&lt;/span&gt;
&lt;span class="err"&gt;rook-ceph-mon1-zbfqt              1/1       Running   0          7m&lt;/span&gt;
&lt;span class="err"&gt;rook-ceph-mon2-c6rzf              1/1       Running   0          6m&lt;/span&gt;
&lt;span class="err"&gt;rook-ceph-osd-82lj5               1/1       Running   0          6m&lt;/span&gt;
&lt;span class="err"&gt;rook-ceph-osd-cpln8               1/1       Running   0          6m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This step launches the distributed file system Ceph on all nodes.&lt;/p&gt;
&lt;p&gt;Finally we can create a new StorageClass which provides block storage for the pods to store data persistently, get &lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/blob/master/storage_rook/rook-storageclass.yaml"&gt;&lt;code&gt;rook-storageclass.yaml&lt;/code&gt; from the same repository we used before&lt;/a&gt; and execute with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl create -f rook-storageclass.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now have the rook storageclass available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl get storageclass&lt;/span&gt;
&lt;span class="err"&gt;NAME         PROVISIONER&lt;/span&gt;
&lt;span class="err"&gt;rook-block   rook.io/block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;(Optional) Test Rook Persistent Storage&lt;/h3&gt;
&lt;p&gt;Optionally, we can deploy a simple pod to verify that the storage system is working properly.&lt;/p&gt;
&lt;p&gt;You can copy &lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/blob/master/storage_rook/alpine-rook.yaml"&gt;&lt;code&gt;alpine-rook.yaml&lt;/code&gt; from Github&lt;/a&gt;
and launch it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl create -f alpine-rook.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is a very small pod with Alpine Linux that creates a 2 GB volume from Rook and mounts it on &lt;code&gt;/data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This creates a Pod with Alpine Linux that requests a Persistent Volume Claim to be mounted under &lt;code&gt;/data&lt;/code&gt;. The Persistent Volume Claim specified the type of storage and its size. Once the Pod is created, it asks the Persistent Volume Claim to actually request Rook to prepare a Persistent Volume that is then mounted into the Pod.&lt;/p&gt;
&lt;p&gt;We can verify the Persistent Volumes are created and associated with the pod, check:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl get pv&lt;/span&gt;
&lt;span class="err"&gt;sudo kubectl get pvc&lt;/span&gt;
&lt;span class="err"&gt;sudo kubectl get logs alpine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can get a shell in the pod with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl exec -it alpine  -- /bin/sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;access &lt;code&gt;/data/&lt;/code&gt; and make sure we can write some files.&lt;/p&gt;
&lt;p&gt;Once you have completed testing, you can delete the pod and the Persistent Volume Claim with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl delete -f alpine-rook.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Persistent Volume will be automatically deleted by Kubernetes after a few minutes.&lt;/p&gt;
&lt;h2&gt;Setup HTTPS with letsencrypt&lt;/h2&gt;
&lt;p&gt;We need &lt;code&gt;kube-lego&lt;/code&gt; to automatically get a HTTPS certificate from Letsencrypt,
For more information see the Ingress section on the &lt;a href="http://zero-to-jupyterhub.readthedocs.io/en/latest/advanced.html"&gt;Zero to Jupyterhub Advanced topics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First we need to customize the Kube Lego configuration, edit the &lt;code&gt;config_kube-lego_helm.yaml&lt;/code&gt; file from the repository and set your email address, then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo helm install stable/kube-lego --namespace=support --name=lego -f config_kube-lego_helm.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then after you deploy Jupyterhub if you have some HTTPS trouble, you should check the logs of the kube-lego pod. First find the name of the pod with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl get pods -n support&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then check its logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl logs -n support lego-kube-lego-xxxxx-xxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install Jupyterhub&lt;/h2&gt;
&lt;p&gt;Read all of the documentation of "Zero to Jupyterhub", then download &lt;a href="https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/blob/master/config_jupyterhub_helm.yaml"&gt;&lt;code&gt;config_jupyterhub_helm.yaml&lt;/code&gt; from the repository&lt;/a&gt; and customize it with the URL of the master node (for Jetstream &lt;code&gt;js-xxx-xxx.jetstream-cloud.org&lt;/code&gt;) and generate the random strings for security, finally run the Helm chart:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/&lt;/span&gt;
&lt;span class="err"&gt;sudo helm repo update&lt;/span&gt;
&lt;span class="err"&gt;sudo helm install jupyterhub/jupyterhub --version=v0.6 --name=jup \&lt;/span&gt;
&lt;span class="err"&gt;    --namespace=jup -f config_jupyterhub_helm.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you modify the configuration you can update the deployment with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo helm upgrade jup jupyterhub/jupyterhub -f config_jupyterhub_helm.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Test Jupyterhub&lt;/h3&gt;
&lt;p&gt;Connect to the public URL of your master node instance at: &lt;a href="https://js-xxx-xxx.jetstream-cloud.org"&gt;https://js-xxx-xxx.jetstream-cloud.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Try to login with your XSEDE username and password and check if Jupyterhub works properly.&lt;/p&gt;
&lt;p&gt;If something is wrong, check:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl --namespace=jup get pods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Get the name of the &lt;code&gt;hub&lt;/code&gt; pod and check the logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl --namespace=jup logs hub-xxxx-xxxxxxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check that Rook is working properly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl --namespace=jup get pv&lt;/span&gt;
&lt;span class="err"&gt;sudo kubectl --namespace=jup get pvc&lt;/span&gt;
&lt;span class="err"&gt;sudo kubectl --namespace=jup describe pvc claim-YOURXSEDEUSERNAME&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Administration tips&lt;/h2&gt;
&lt;h3&gt;Add more servers to Kubernetes&lt;/h3&gt;
&lt;p&gt;We can create more Ubuntu instances (with a volume attached) and add them to Kubernetes by repeating the same setup we performed on the first worker node.
Once the node joins Kubernetes, it will be automatically used as a node for the distributed filesystem by Rook and be available to host user containers.&lt;/p&gt;
&lt;h3&gt;Remove a server from Kubernetes&lt;/h3&gt;
&lt;p&gt;Launch first the &lt;code&gt;kubectl drain&lt;/code&gt; command to move the currently active pods to other nodes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo kubectl get nodes&lt;/span&gt;
&lt;span class="err"&gt;sudo kubectl drain &amp;lt;node name&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then suspend or delete the instance on the Jetstream admin panel.&lt;/p&gt;
&lt;h3&gt;Configure a different authentication system&lt;/h3&gt;
&lt;p&gt;"Zero to Jupyterhub" supports out of the box authentication with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XSEDE credentials with CILogon&lt;/li&gt;
&lt;li&gt;Many Campuses credentials with CILogon&lt;/li&gt;
&lt;li&gt;Globus&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://zero-to-jupyterhub.readthedocs.io/en/latest/extending-jupyterhub.html#authenticating-with-oauth2"&gt;the documentation&lt;/a&gt; and modify &lt;code&gt;config_jupyterhub_helm_v0.5.0.yaml&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Jupyter team, in particular Yuvi Panda, for providing a great software platform and a easy-to-user resrouce for deploying it and for direct support in debugging my issues&lt;/li&gt;
&lt;li&gt;XSEDE Extended Collaborative Support Services for supporting part of my time to work on deploying Jupyterhub on Jetstream and providing computational time on Jetstream&lt;/li&gt;
&lt;li&gt;Pacific Research Platform, in particular John Graham, Thomas DeFanti and Dmitry Mishin (SDSC) for access to their Kubernetes platform for testing&lt;/li&gt;
&lt;li&gt;XSEDE Jetstream's Jeremy Fischer for prompt answers to my questions on Jetstream&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="jupyterhub"></category><category term="jetstream"></category><category term="gateways"></category></entry><entry><title>Store a conda environment inside a Notebook</title><link href="http://zonca.github.io/2017/12/store-conda-environment-inside-notebook.html" rel="alternate"></link><published>2017-12-04T18:00:00-08:00</published><updated>2017-12-04T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-12-04:/2017/12/store-conda-environment-inside-notebook.html</id><summary type="html">&lt;p&gt;Last August, during the Container Analysis Environments Workshop held at Urbana-Champaign,
we had discussion about reproducibility in the Jupyter Notebooks.
There came out the idea of storing all the details about the Python environment inside the Notebook,
in the metadata.&lt;/p&gt;
&lt;p&gt;I released an experimental package on Github (and PyPI):&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/zonca/nbenv"&gt;https …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last August, during the Container Analysis Environments Workshop held at Urbana-Champaign,
we had discussion about reproducibility in the Jupyter Notebooks.
There came out the idea of storing all the details about the Python environment inside the Notebook,
in the metadata.&lt;/p&gt;
&lt;p&gt;I released an experimental package on Github (and PyPI):&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/zonca/nbenv"&gt;https://github.com/zonca/nbenv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For simplicity it only supports &lt;code&gt;conda&lt;/code&gt; environment, but it also supports having &lt;code&gt;pip&lt;/code&gt;-installed packages
inside those environments.&lt;/p&gt;
&lt;p&gt;It automatically saves the &lt;code&gt;conda&lt;/code&gt; environment as metadata inside the &lt;code&gt;.ipynb&lt;/code&gt; document and then provides
a command line tool to inspect it and create a new &lt;code&gt;conda&lt;/code&gt; environment based on it.&lt;/p&gt;
&lt;p&gt;I am not sure this is the best design, please open Issues on Github to send me feedback!&lt;/p&gt;</content><category term="misc"></category><category term="jupyter-notebook"></category></entry><entry><title>How to modify Singularity images on a Supercomputer</title><link href="http://zonca.github.io/2017/11/modify-singularity-images.html" rel="alternate"></link><published>2017-11-06T18:00:00-08:00</published><updated>2017-11-06T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-11-06:/2017/11/modify-singularity-images.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://singularity.lbl.gov/"&gt;Singularity&lt;/a&gt; allows to run your own OS within most Supercomputers, see my previous post about &lt;a href="https://zonca.github.io/2017/01/singularity-hpc-comet.html"&gt;Running Ubuntu on Comet via Singularity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Singularity's adoption by High Performance Computing centers has been driven by its strict security model. It never allows a user in a container to have &lt;code&gt;root&lt;/code&gt; privileges unless …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://singularity.lbl.gov/"&gt;Singularity&lt;/a&gt; allows to run your own OS within most Supercomputers, see my previous post about &lt;a href="https://zonca.github.io/2017/01/singularity-hpc-comet.html"&gt;Running Ubuntu on Comet via Singularity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Singularity's adoption by High Performance Computing centers has been driven by its strict security model. It never allows a user in a container to have &lt;code&gt;root&lt;/code&gt; privileges unless the user is &lt;code&gt;root&lt;/code&gt; on the Host system.&lt;/p&gt;
&lt;p&gt;This means that you can only modify containers on a machine where you have &lt;code&gt;root&lt;/code&gt;. Therefore you generally build a container on your local machine and then copy it to a Supercomputer.
The process is tedious if you are still tweaking your container and modifying it often, and each time your have to copy back a 4 or maybe 8 GB container image.&lt;/p&gt;
&lt;p&gt;In the next section I'll investigate possible solutions/workarounds.&lt;/p&gt;
&lt;h2&gt;Use DockerHub&lt;/h2&gt;
&lt;p&gt;Singularity can pull a container from DockerHub, so it is convenient if you are already using Docker, maybe to provide a simple way to install your software.&lt;/p&gt;
&lt;p&gt;I found out that if you are using the Automatic build of your container by DockerHub itself, this is very slow, sometimes it takes 30 minutes to have your new container build.&lt;/p&gt;
&lt;p&gt;Therefore the best is to manually build your container locally and then push it to DockerHub. A Docker container is organized in layers of the filesystem, so for small tweaks to your image you transfer tens of MB to DockerHub instead of GB.&lt;/p&gt;
&lt;p&gt;Then from the Supercomputer you can run &lt;code&gt;singularity pull docker://ubuntu:latest&lt;/code&gt; with no need of &lt;code&gt;root&lt;/code&gt; privileges. Singularity keeps a cache of the docker layers, so you would download just the layers modified in the previous step.&lt;/p&gt;
&lt;h2&gt;Build your application locally&lt;/h2&gt;
&lt;p&gt;If you are modifying an application often you could build a Singularity container with all the requirements, copy it to the Supercomputer and then build your application there. This is also useful if the architecture of your CPU is different between your local machine and the Supercomputer and you are worried the compiler would not apply all the possible optimizations.&lt;/p&gt;
&lt;p&gt;In this case you can use &lt;code&gt;singularity shell&lt;/code&gt; to get a terminal inside the container, then build your software with the compiler toolchain available &lt;strong&gt;inside the container&lt;/strong&gt; and then install it to your &lt;code&gt;$HOME&lt;/code&gt; folder, then modify your &lt;code&gt;$PATH&lt;/code&gt; and &lt;code&gt;$LD_LIBRARY_PATH&lt;/code&gt; to execute and load libraries from this local folder.&lt;/p&gt;
&lt;p&gt;This is also useful in case the container has already an application installed but you want to develop on it. You can follow this process and then mask the installed application with your new version.&lt;/p&gt;
&lt;p&gt;Of course this makes your analysis &lt;strong&gt;not portable&lt;/strong&gt;, the software is not available inside the container.&lt;/p&gt;
&lt;h3&gt;Freeze your application inside the container&lt;/h3&gt;
&lt;p&gt;Once you have completed tweaking the application on the Supercomputer, you can now switch back to your local machine, get the last version of your application and install it system-wide inside the container so that it will be portable.&lt;/p&gt;
&lt;p&gt;On the other hand, you might be concerned about performance and prefer to have the application built on the Supercomputer. You can run the build process (e.g. &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;python setup.py build) on the Supercomputer in your home, then sync the build artifacts back to your local machine and run the install process there (e.g&lt;/code&gt;sudo make install&lt;code&gt;or&lt;/code&gt;sudo python setup.py install&lt;code&gt;). Optionally use&lt;/code&gt;sshfs` to mount the build folder on both machines and make the process transparent.&lt;/p&gt;
&lt;h2&gt;Use a local Singularity registry&lt;/h2&gt;
&lt;p&gt;Singularity released &lt;a href="https://singularityhub.github.io/singularity-registry/inst/"&gt;&lt;code&gt;singularity-registry&lt;/code&gt;&lt;/a&gt;, an application to build a local image registry, like DockerHub, that can take care of building containers.&lt;/p&gt;
&lt;p&gt;This can be hosted locally at a Supercomputing Center to provide a local building service. For example Texas Advanced Computing Center &lt;a href="https://www.slideshare.net/JohnFonner1/biocontainers-for-supercomputers-2000-accessible-discoverable-singularity-apps"&gt;builds locally Singularity images from BioContainers&lt;/a&gt;, software packages for the Life Sciences.&lt;/p&gt;
&lt;p&gt;Otherwise, for example,  a user at SDSC could install Singularity Registry on SDSC Cloud and configure it to mount one of Comet's filesystems and build the container images there. Even installing Singularity Registry on Jetstream could be an option thanks to its fast connection to other XSEDE resources.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have any feedback, please reach me at &lt;a href="https://twitter.com/andreazonca"&gt;@andreazonca&lt;/a&gt; or find my email from there.&lt;/p&gt;</content><category term="misc"></category><category term="singularity"></category><category term="hpc"></category><category term="Comet"></category></entry><entry><title>Deploy scalable Jupyterhub on Docker Swarm mode</title><link href="http://zonca.github.io/2017/10/scalable-jupyterhub-docker-swarm-mode.html" rel="alternate"></link><published>2017-10-26T18:00:00-07:00</published><updated>2017-10-26T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-10-26:/2017/10/scalable-jupyterhub-docker-swarm-mode.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Jupyterhub genrally requires roughly 500MB per user for light data processing and many GB for heavy data processing, therefore it is often necessary to deploy it across multiple machines to support many users.&lt;/p&gt;
&lt;p&gt;The recommended scalable deployment for Jupyterhub is on Kubernetes, see &lt;a href="https://zonca.github.io/2016/05/jupyterhub-docker-swarm.html"&gt;Zero to Jupyterhub&lt;/a&gt; (and I'll cover …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Jupyterhub genrally requires roughly 500MB per user for light data processing and many GB for heavy data processing, therefore it is often necessary to deploy it across multiple machines to support many users.&lt;/p&gt;
&lt;p&gt;The recommended scalable deployment for Jupyterhub is on Kubernetes, see &lt;a href="https://zonca.github.io/2016/05/jupyterhub-docker-swarm.html"&gt;Zero to Jupyterhub&lt;/a&gt; (and I'll cover it next). However the learning curve for Kubernetes is quite steep, I believe that for smaller deployments (30/50 users, 10 users per machine) and where high availability is not critical, deploying on Docker with Swarm Mode is a simpler option.&lt;/p&gt;
&lt;p&gt;In the past I have covered a &lt;a href="https://zonca.github.io/2016/05/jupyterhub-docker-swarm.html"&gt;Jupyterhub deployment on the old version of Docker Swarm&lt;/a&gt; using &lt;code&gt;DockerSpawner&lt;/code&gt;. The most important difference is that the last version of Docker has a more sophisticated "Swarm mode" that allows you to launch and manage services instead of individual containers, support for this is provided by &lt;a href="https://github.com/cassinyio/SwarmSpawner"&gt;&lt;code&gt;SwarmSpawner&lt;/code&gt;&lt;/a&gt;. Thanks to the new architecture, we do not need to have actual Unix accounts on the Host but all users can run with the &lt;code&gt;jovyan&lt;/code&gt; user account defined only inside the Docker containers. Then we can also deploy Jupyterhub itself as a Docker container instead of installing it on the Host.&lt;/p&gt;
&lt;h2&gt;Setup a Virtual Machine for the Hub&lt;/h2&gt;
&lt;p&gt;First of all we need to create a Virtual Machine, I tested this on XSEDE Jetstream CentOS 7 image (with Docker pre-installed), but I would recommend Ubuntu 16.04 which is more universally used so it is easier to find support for it.
The same setup would work on a bare-metal server.&lt;/p&gt;
&lt;p&gt;Make sure that a recent version of Docker is installed, I used &lt;code&gt;17.07.0-ce&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Setup networking so that port 80 and 443 are accessible for HTTP and HTTPS. Associate a Public IP to this instance so that it is accessible from the Internet.&lt;/p&gt;
&lt;p&gt;Add your user to the &lt;code&gt;docker&lt;/code&gt; group so you do not need &lt;code&gt;sudo&lt;/code&gt; to run &lt;code&gt;docker&lt;/code&gt; commands. Check that &lt;code&gt;docker&lt;/code&gt; works running &lt;code&gt;docker info&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Clone the config files repository&lt;/h3&gt;
&lt;p&gt;I recommend to create the folder &lt;code&gt;/etc/jupyterhub&lt;/code&gt;, set ownership to your user and clone my configuration repository there:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/zonca/deploy-jupyterhub-dockerswarm /etc/jupyterhub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup Swarm&lt;/h3&gt;
&lt;p&gt;The first node is going to be the &lt;em&gt;Master&lt;/em&gt; node of the Swarm, launch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker swarm init --advertise-addr INTERNAL_IP_ADDRESS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is better to use a internal IP address, for example on Jetstream the &lt;code&gt;192.xxx.xxx.xxx&lt;/code&gt; IP. This is the address that the other instances will use to connect to this node.&lt;/p&gt;
&lt;p&gt;This command will print out the string that the other nodes will need to run to join this swarm, save it for later (you can recover it with &lt;code&gt;docker swarm join-token&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;Install the NGINX web server&lt;/h3&gt;
&lt;p&gt;NGINX is going to sit in front of Jupyterhub as a proxy and handle SSL (at the end of this tutorial), we are going to have also NGINX as a Docker service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker pull nginx:latest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's test that Docker and the networking is working correctly, launch &lt;code&gt;nginx&lt;/code&gt; with the default configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker service create \&lt;/span&gt;
&lt;span class="err"&gt;  --name nginx \&lt;/span&gt;
&lt;span class="err"&gt;  --publish 80:80 \&lt;/span&gt;
&lt;span class="err"&gt;  nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is going to create a service, then the service creates the containers, check with &lt;code&gt;docker service ls&lt;/code&gt; and &lt;code&gt;docker ps&lt;/code&gt;, if a container dies, the service will automatically relaunch it.
Now if you connect to your instance from an external machine you should see the NGINX welcome page.
If this is not the case check &lt;code&gt;docker ps -a&lt;/code&gt; and &lt;code&gt;docker logs INSTANCE_ID&lt;/code&gt; to debug the issue.&lt;/p&gt;
&lt;p&gt;Finally remove the service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker service rm nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now run the service with the configuration for Jupyterhub, edit &lt;code&gt;nginx.conf&lt;/code&gt; and replace &lt;code&gt;SERVER_URL&lt;/code&gt; then launch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash ngnx_service.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point you should gate a Gateway error if you connect with a browser to your instance.&lt;/p&gt;
&lt;h3&gt;Install Jupyterhub&lt;/h3&gt;
&lt;p&gt;Before launching Jupyterhub you need to create a Docker network so that the containers in the swarm can communicate easily:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker network create --driver overlay jupyterhub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can launch the official Jupyterhub 0.8.0 container as a service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker service create \&lt;/span&gt;
&lt;span class="err"&gt;  --name jupyterhubserver \&lt;/span&gt;
&lt;span class="err"&gt;  --network jupyterhub \&lt;/span&gt;
&lt;span class="err"&gt;  --detach=true \&lt;/span&gt;
&lt;span class="err"&gt;  jupyterhub/jupyterhub:0.8.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would run Jupyterhub with the default &lt;code&gt;jupyterhub_config.py&lt;/code&gt; with local auth and local spawner.
If you connect to the instance now you should see the Jupyterhub login page, you cannot login because you don't have
a user account inside the container. We'll setup authentication next.&lt;/p&gt;
&lt;h4&gt;Configure Jupyterhub&lt;/h4&gt;
&lt;p&gt;Next we want to customize the hub, first login on &lt;a href="http://hub.docker.com"&gt;http://hub.docker.com&lt;/a&gt; and create a new repository,
then follow the instructions there to setup &lt;code&gt;docker push&lt;/code&gt; on your server so you can push your image 
to the registy.&lt;/p&gt;
&lt;p&gt;This is necessary because Swarm might spawn the service on a different machine, so itneeds an external
registry to make sure to pull the right image.&lt;/p&gt;
&lt;p&gt;You can now customize the hub image in &lt;code&gt;/etc/jupyterhub/hub&lt;/code&gt; with &lt;code&gt;docker build . -t yourusername/jupyterhub-docker&lt;/code&gt;
and push it remotely with &lt;code&gt;docker push yourusername/jupyterhub-docker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This image includes &lt;code&gt;oauthenticator&lt;/code&gt; for Github, Google, CILogon and Globus authentication and &lt;code&gt;swarmspawner&lt;/code&gt; for
spawning containers for the users.&lt;/p&gt;
&lt;p&gt;We can now create &lt;code&gt;jupyterhub_config.py&lt;/code&gt;, for now we just want temporary home folders, so replace the &lt;code&gt;mounts&lt;/code&gt; variable with &lt;code&gt;[]&lt;/code&gt; in &lt;code&gt;c.SwarmSpawner.container_spec&lt;/code&gt;. Then customize the server URL &lt;code&gt;server_url.com&lt;/code&gt; and IP &lt;code&gt;SERVER_IP&lt;/code&gt; (it will be necessary later).
At the bottom of &lt;code&gt;jupyterhub_config.py&lt;/code&gt; we can also customize CPU and memory contraints. Unfortunately there is no easy way to setup a custom disk space limit.&lt;/p&gt;
&lt;p&gt;Follow the documentation of &lt;code&gt;oauthenticator&lt;/code&gt; to setup authentication.&lt;/p&gt;
&lt;p&gt;Create the folder &lt;code&gt;/var/nfs&lt;/code&gt; that we will configure later but it is harcoded in the script to launch the service.&lt;/p&gt;
&lt;p&gt;Temporarily remove from &lt;code&gt;launch_service_jupyterhub.sh&lt;/code&gt; the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;--mount src=nfsvolume,dst=/var/nfs \&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Launch the service from &lt;code&gt;/etc/jupyterhub&lt;/code&gt; with &lt;code&gt;bash launch_service_jupyterhub.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Check in the script that we are mounting the Docker socket into the container so that Jupyterhub can launch Docker containers for the users. We also mount the &lt;code&gt;/etc/jupyterhub&lt;/code&gt; folder so that it has access to &lt;code&gt;jupyterhub_config.py&lt;/code&gt;. We also contraint it to run in the manager node of this Swarm, this assures that it always runs on this first node. We could later add another manager node for resiliency and the Hub could potentially spawn there with no issues.&lt;/p&gt;
&lt;p&gt;At this point we have a first working configuration of Jupyterhub, try to login and check if the notebooks are working.
This configuration has no permanent storage, so the users will have a home folder inside their container and will be able to
write Notebooks and data there up to the image reaching 10GB, so about 5GB.
If they logout and log back in they will find their files still there, but if they do "Close my Server" from the control panel
or if for any other reason their container is removed, they will loose their data.
So this setup could be used for short workshops or demos.&lt;/p&gt;
&lt;h2&gt;Setup other nodes&lt;/h2&gt;
&lt;p&gt;We can create another Virtual Machine with the same version of Docker and make sure that the two machines internally have all the port open to simplify networking. Any additional machine &lt;strong&gt;needs no open ports&lt;/strong&gt; to the outside world, all connections will go through nginx.&lt;/p&gt;
&lt;p&gt;We can have it join the Swarm by pasting the token got at Swarm initialization on the first node.&lt;/p&gt;
&lt;p&gt;Now when Jupyterhub launches a single user container, it could spawn either on this server or on the first server, Swarm will automatically take care of load balancing. It will also automatically download the Docker image specified in &lt;code&gt;jupyterhub_config.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can add as many nodes as necessary.&lt;/p&gt;
&lt;h2&gt;Setup Permanent storage&lt;/h2&gt;
&lt;p&gt;Surprisingly enough, Swarm has no easy way to setup permament storage that would automatically move data from one node to another in case a user container is re-spawned on another server. There are some volume plugins but I believe that their configuration is so complex that at this point would be better to directly switch to Kubernetes.
In order to achieve a simpler setup that I believe could easily handle few tens of users we can use NFS. Moreover Docker volumes can handle NFS natively, so we don't even need to have home folders owned by each user but we can just point Docker volumes to our NFS folder and Docker will manage that for us and we can just use one single user. Users cannot access other people's files because only their own folder is mounted into their container.&lt;/p&gt;
&lt;h3&gt;Setup a NFS server&lt;/h3&gt;
&lt;p&gt;First we need to decide which server acts as NFS server, for small deployments we can have just the first server which runs the hub also handle this, for more performance we might want to have a dedicated server that only runs NFS and which is part of the internal network but does not participate in the Swarm so that it won't have user containers running on it.&lt;/p&gt;
&lt;p&gt;In a Cloud environment like Jetstream or Amazon, it is useful to create a Volume and attach it to that instance so that we can enlarge it later or back it up independently from the Instance and that would survive the Hub instance. Make sure to choose the XFS filesystem if you need to setup disk space contraints. Mount it in &lt;code&gt;/var/nfs/&lt;/code&gt; and make sure it is writable by any user.&lt;/p&gt;
&lt;p&gt;On that server we can install NFS following the OS instructions and setup &lt;code&gt;/etc/exports&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;/var/nfs        *(rw,sync,no_subtree_check)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The NFS port is accessible only on the internal network anyway so we can just accept any connection.&lt;/p&gt;
&lt;p&gt;SSH into any of the Swarm nodes and check this works fine with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo mount 192.NFS.SRV.IP:/var/nfs /mnt&lt;/span&gt;
&lt;span class="err"&gt;touch /mnt/writing_works&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup Jupyterhub to use Docker Volumes over NFS&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;/etc/jupyterhub/jupyterhub_config.py&lt;/code&gt; we should configure the mounts to &lt;code&gt;swarmspawner&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;mounts = [{&amp;#39;type&amp;#39;: &amp;#39;volume&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;           &amp;#39;source&amp;#39;: &amp;#39;jupyterhub-user-{username}&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;           &amp;#39;target&amp;#39;: notebook_dir,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;#39;no_copy&amp;#39; : True,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;#39;driver_config&amp;#39; : {&lt;/span&gt;
&lt;span class="err"&gt;          &amp;#39;name&amp;#39; : &amp;#39;local&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;#39;options&amp;#39; : {&lt;/span&gt;
&lt;span class="err"&gt;             &amp;#39;type&amp;#39; : &amp;#39;nfs4&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;             &amp;#39;o&amp;#39; : &amp;#39;addr=SERVER_IP,rw&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;             &amp;#39;device&amp;#39; : &amp;#39;:/var/nfs/{username}/&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;           }&lt;/span&gt;
&lt;span class="err"&gt;        },&lt;/span&gt;
&lt;span class="err"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace &lt;code&gt;SERVER_IP&lt;/code&gt; with your server, this tells the Docker &lt;code&gt;local&lt;/code&gt; Volume driver to mount folders &lt;code&gt;/var/nfs/{username}&lt;/code&gt; as home folders of the single user notebook container.&lt;/p&gt;
&lt;p&gt;The only problem is that these folders need to be pre-existing, so I modified the &lt;code&gt;swarmspawner&lt;/code&gt; plugin to create those folders the first time a user authenticates, please let me know if there is a better way and I'll improve this tutorial.
See the branch &lt;code&gt;createfolder&lt;/code&gt; on &lt;a href="https://github.com/zonca/SwarmSpawner/tree/createfolder"&gt;my fork of &lt;code&gt;swarmspawner&lt;/code&gt;&lt;/a&gt;.
In order to install this you need to modify your custom &lt;code&gt;jupyterhub-docker&lt;/code&gt; to install from there (see the commented out section in &lt;code&gt;hub/Dockerfile&lt;/code&gt;).
Often the &lt;code&gt;Authenticator&lt;/code&gt; transform the username into a hash, so I added a feature on this spawner to also create a text file &lt;code&gt;HASH_email.txt&lt;/code&gt; and save the email of the user there so that it is easier to check directly from the filesystem who owns a specific folder.&lt;/p&gt;
&lt;p&gt;For this to work the Hub needs access to &lt;code&gt;/var/nfs/&lt;/code&gt;, the best way to achieve this is to create another Volume, add the &lt;code&gt;NFS_SERVER_IP&lt;/code&gt; and launch on the first server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash create_volume_nfs.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then uncomment the &lt;code&gt;--mount src=nfsvolume,dst=/var/nfs \&lt;/code&gt; line from &lt;code&gt;launch_service_jupyterhub.sh&lt;/code&gt; and relaunch the service so that it is available locally.&lt;/p&gt;
&lt;p&gt;At this point you should test that if you login, then stop/kill the container, your data should still be there when you launch it again.&lt;/p&gt;
&lt;h3&gt;Setup user quota&lt;/h3&gt;
&lt;p&gt;The Docker local Volume driver does not support setting a user quota so we have to resort to our filesystem. You can modify &lt;code&gt;/etc/fstab&lt;/code&gt; to mount the XFS volume with the &lt;code&gt;pquota&lt;/code&gt; option that supports setting a limit to a folders and all of its subfolders. We cannot use user quotas because all of the users are running under the same UNIX account.&lt;/p&gt;
&lt;p&gt;Create a folder &lt;code&gt;/var/nfs/testquota&lt;/code&gt; and then test that setting quota is working with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo set_quota.sh /var/nfs testquota&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There should be a space between &lt;code&gt;/var/nfs&lt;/code&gt; and &lt;code&gt;testquota&lt;/code&gt;, then check with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bash get_quota.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see a quota of &lt;code&gt;1GB&lt;/code&gt; for that folder. Modify &lt;code&gt;set_quota.sh&lt;/code&gt; to choose another size.&lt;/p&gt;
&lt;h4&gt;Automatically set quotas&lt;/h4&gt;
&lt;p&gt;We want quota to be automatically set each time the spawner creates another folder, &lt;code&gt;incrond&lt;/code&gt; can monitor a folder for any new created file and launch the &lt;code&gt;set_quota.sh&lt;/code&gt; script for us.&lt;/p&gt;
&lt;p&gt;Install the &lt;code&gt;incrond&lt;/code&gt; package and make sure it is active and restarted on boot. Then customize it with &lt;code&gt;sudo incrontab -e&lt;/code&gt; and paste the content of &lt;code&gt;incrontab&lt;/code&gt; in &lt;code&gt;/etc/jupyterhub&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now delete your user folder in &lt;code&gt;/var/nfs&lt;/code&gt; and launch Jupyterhub again to check that the folder is created with the correct quota. The spawner also creates a &lt;code&gt;/var/nfs/{username}_QUOTA_NOT_SET&lt;/code&gt; that is deleted then by the &lt;code&gt;set_quota.sh&lt;/code&gt; script.&lt;/p&gt;
&lt;h2&gt;Setup HTTPS&lt;/h2&gt;
&lt;p&gt;We would like to setup NGINX to provide SSL encryption for Jupyterhub using the free Letsencrypt service. The main issue is that those certificates need to be renewed every few months, so we need a service running regularly to take care of that.&lt;/p&gt;
&lt;p&gt;The simplest option would be to add &lt;code&gt;--publish 8000&lt;/code&gt; to the Jupyterhub so that Jupyterhub exposes its port to the host and then remove the NGINX Docker container and install NGINX and certbot directly on the first host following &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04"&gt;a standard setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, to keep the setup more modular, we'll proceed and use another NGINX container that comes equipped with automatic Let's Encrypt certificates request and renewal available at: &lt;a href="https://github.com/linuxserver/docker-letsencrypt"&gt;https://github.com/linuxserver/docker-letsencrypt&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Modify networking setup&lt;/h3&gt;
&lt;p&gt;One complication is that this container requires additional privileges to handle networking that are not availble in Swarm mode, so we will run this container outside of the Swarm on the first node.&lt;/p&gt;
&lt;p&gt;We need to make the &lt;code&gt;jupyterhub&lt;/code&gt; network that we created before attachable by containers outside the Swarm.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker service rm nginx&lt;/span&gt;
&lt;span class="err"&gt;bash remove_service_jupyterhub.sh&lt;/span&gt;
&lt;span class="err"&gt;docker network rm jupyterhub&lt;/span&gt;
&lt;span class="err"&gt;docker network create --driver overlay --attachable jupyterhub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then add &lt;code&gt;--publish 8000&lt;/code&gt; to &lt;code&gt;launch_service_juputerhub.sh&lt;/code&gt; and start Jupyterhub again. Make sure that if you SSH to the first node you can &lt;code&gt;wget localhost:8000&lt;/code&gt; successfully but if you try to access &lt;code&gt;yourdomain:8000&lt;/code&gt; from the internet you &lt;strong&gt;should not&lt;/strong&gt; be able to connect (the port should be closed by the networking configuration on OpenStack for example).&lt;/p&gt;
&lt;h3&gt;Test the NGINX/Letsencrypt container&lt;/h3&gt;
&lt;p&gt;Create a volume to save the configuration and the logs (optionally on the NFS volume):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker volume create --driver local nginx_volume&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test the container running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker run \&lt;/span&gt;
&lt;span class="err"&gt;  --cap-add=NET_ADMIN \&lt;/span&gt;
&lt;span class="err"&gt;  --name nginx \&lt;/span&gt;
&lt;span class="err"&gt;  -p 443:443 \&lt;/span&gt;
&lt;span class="err"&gt;  -e EMAIL=your_email@domain.edu \&lt;/span&gt;
&lt;span class="err"&gt;  -e URL=your.domain.org \&lt;/span&gt;
&lt;span class="err"&gt;  -v nginx_volume:/config \&lt;/span&gt;
&lt;span class="err"&gt;  linuxserver/letsencrypt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If this works correctly, connect to &lt;a href="https://your.domain.org"&gt;https://your.domain.org&lt;/a&gt;, you should have a valid SSL certificate and a welcome message. If not check &lt;code&gt;docker logs nginx&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Configure NGINX to proxy Jupyterhub&lt;/h3&gt;
&lt;p&gt;We can use &lt;code&gt;letsencrypt_container_nginx.conf&lt;/code&gt; to handle NGINX configuration with HTTPS support, this loads the certificates from a path automatically created by the &lt;code&gt;letsencrypt&lt;/code&gt; container.&lt;/p&gt;
&lt;p&gt;Customize &lt;code&gt;launch_letsencrypt_container.sh&lt;/code&gt; and then run it, it will create the NGINX container again and it will also bind-mount the NGINX configuration into the container.&lt;/p&gt;
&lt;p&gt;Now you should be able to connect to your server over HTTPS and access Jupyterhub.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;Feedback appreciated, &lt;a href="https://twitter.com/andreazonca"&gt;@andreazonca&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am also available to support US scientists to deploy scientific gateways through the &lt;a href="https://www.xsede.org/for-users/ecss"&gt;XSEDE ECSS consultation program&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="jupyterhub"></category><category term="docker"></category><category term="jetstream"></category><category term="gateways"></category></entry><entry><title>Setup automated testing on a Github repository with Travis-ci</title><link href="http://zonca.github.io/2017/09/automated-testing-travis-ci-github.html" rel="alternate"></link><published>2017-09-06T18:00:00-07:00</published><updated>2017-09-06T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-09-06:/2017/09/automated-testing-travis-ci-github.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;It is good practice in software development to implement extensive testing of the codebase in order to catch quickly any bug introduced into the code when implementing new features.&lt;/p&gt;
&lt;p&gt;The suite of tests should be easy to execute (possibly one single command, for example with the &lt;code&gt;py.test&lt;/code&gt; runner …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;It is good practice in software development to implement extensive testing of the codebase in order to catch quickly any bug introduced into the code when implementing new features.&lt;/p&gt;
&lt;p&gt;The suite of tests should be easy to execute (possibly one single command, for example with the &lt;code&gt;py.test&lt;/code&gt; runner) and quick to run (more than 1 minute would make it tedious to run).&lt;/p&gt;
&lt;p&gt;The developers should run the unit test suite every time they implement a change to the codebase to make sure anything else has not been broken.&lt;/p&gt;
&lt;p&gt;However, once a commit has been pushed to Github, it is also useful to have automated testing executed automatically, at least for 2 reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run tests in all the environments that need to be supported by the software, for example run with different versions of Python or different versions of a key required external dependancy&lt;/li&gt;
&lt;li&gt;Run tests in a clean environment that has less risks of being contaminated by some mis-configuration on one of the developers' environments&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Travis-CI&lt;/h2&gt;
&lt;p&gt;Travis is a free web based service that allows to register a trigger on Github so that every time a commit is pushed to Github or a Pull Request is opened, it launches an isolated Ubuntu (even if it also supports Mac OS) container for each of the configurations that we want to test, builds the software (if needed) and then runs the test.&lt;/p&gt;
&lt;p&gt;The only requirement is that the Github project needs to be public for the free service. Otherwise there are paid plans for private repositories.&lt;/p&gt;
&lt;h2&gt;Setup on Travis-CI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;a href="http://travis-ci.org"&gt;http://travis-ci.org&lt;/a&gt; and login with a Github account&lt;/li&gt;
&lt;li&gt;In order to automatatically configure the hook on Github, Travis requests writing privileges to your Github account, annoying but convenient&lt;/li&gt;
&lt;li&gt;Leave all default options, just make sure that Pull Requests are automatically tested&lt;/li&gt;
&lt;li&gt;If you have the repository both under an organization and a fork under your account, you can choose either to test both or just the organization repository, anyway your pull requests will be tested before merging.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Preparation of the test scripts&lt;/h2&gt;
&lt;p&gt;In order to automate running the test scripts on Travis-CI, it is important that the test scripts return a exit code different from zero to signal that the tests failed.&lt;/p&gt;
&lt;p&gt;If you are using a test running tool like &lt;code&gt;pytest&lt;/code&gt;, this is automatically done for you. If you are using bash scripts instead, make sure that if the script detects an error it calls &lt;code&gt;exit 1&lt;/code&gt;.
In order to automate running the test scripts on Travis-CI, it is important that the test scripts return a exit code different from zero to signal that the tests failed.&lt;/p&gt;
&lt;p&gt;If you are using a test running tool like &lt;code&gt;pytest&lt;/code&gt;, this is automatically done for you. If you are using bash scripts instead, make sure that if the script detects an error it calls &lt;code&gt;exit 1&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Configuration of the repository&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a new branch on your repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git checkout -b test_travis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a &lt;code&gt;.travis.yml&lt;/code&gt; (mind that it starts with a dot) configuration file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inside this file you can configure how your project is built and tested, for the simple case of &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;perl&lt;/code&gt; scripts you can just write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;trusty&lt;/span&gt;
&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;

&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;$TRAVIS_BUILD_DIR&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt; &lt;span class="n"&gt;run_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the Travis-CI documentation for advanced configuration options&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Now push these changes to your fork of the main repository  and then create a Pull Request to the main repository&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://travis-ci.org/YOUR_ORGANIZATION/YOUR_REPO"&gt;https://travis-ci.org/YOUR_ORGANIZATION/YOUR_REPO&lt;/a&gt; to check the build status and the log&lt;/li&gt;
&lt;li&gt;Once your Pull Request passes the tests, merge it to the main repository so that also the master branch will be tested for all future commits.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Python example&lt;/h2&gt;
&lt;p&gt;In the following example, Travis-CI will create 8 builds, each of the 4 versions of Python will be tested with the 2 versions of &lt;code&gt;numpy&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3.4&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3.5&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3.6&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;NUMPY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.12&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;NUMPY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.13&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;$NUMPY_VERSION&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;
&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;versions&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;below&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Badge in README&lt;/h2&gt;
&lt;p&gt;Aestetic touch, left click on the "Build Passing" image on the Travis-CI page for your repository, choose "Markdown" and paste the code to the &lt;code&gt;README.md&lt;/code&gt; of your repository on Github. This will show in real time if the last version of the code is passing the tests or not.&lt;/p&gt;</content><category term="misc"></category><category term="github"></category><category term="travis"></category><category term="git"></category></entry><entry><title>Deployment of Jupyterhub with Globus Auth to spawn Notebook on Comet in Singularity containers</title><link href="http://zonca.github.io/2017/08/jupyterhub-globus-comet-singularity.html" rel="alternate"></link><published>2017-08-11T18:00:00-07:00</published><updated>2017-08-11T18:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-08-11:/2017/08/jupyterhub-globus-comet-singularity.html</id><summary type="html">&lt;h2&gt;Build Singularity containers to run single user notebook applications&lt;/h2&gt;
&lt;p&gt;Follow the instructions at &lt;a href="https://github.com/zonca/singularity-comet"&gt;https://github.com/zonca/singularity-comet&lt;/a&gt; to build images from the &lt;code&gt;ubuntu_anaconda_jupyterhub.def&lt;/code&gt; and &lt;code&gt;centos_anaconda_jupyterhub.def&lt;/code&gt; definition files, or use the containers I have already built on Comet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;/oasis/scratch/comet/zonca/temp_project/centos_anaconda_jupyterhub.img&lt;/span&gt;
&lt;span class="err"&gt;/oasis/scratch/comet …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;Build Singularity containers to run single user notebook applications&lt;/h2&gt;
&lt;p&gt;Follow the instructions at &lt;a href="https://github.com/zonca/singularity-comet"&gt;https://github.com/zonca/singularity-comet&lt;/a&gt; to build images from the &lt;code&gt;ubuntu_anaconda_jupyterhub.def&lt;/code&gt; and &lt;code&gt;centos_anaconda_jupyterhub.def&lt;/code&gt; definition files, or use the containers I have already built on Comet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;/oasis/scratch/comet/zonca/temp_project/centos_anaconda_jupyterhub.img&lt;/span&gt;
&lt;span class="err"&gt;/oasis/scratch/comet/zonca/temp_project/ubuntu_anaconda_cmb_jupyterhub.img&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These containers have Centos 7 and Ubuntu 16.04 base images, MPI support (not needed for this), Anaconda 4.4.0, the Jupyterhub (for the &lt;code&gt;jupyterhub-singleuser&lt;/code&gt; script) and Jupyterlab (for the awesomeness) packages.&lt;/p&gt;
&lt;h2&gt;Initial setup of Jupyterhub with Ansible&lt;/h2&gt;
&lt;p&gt;First we want to use the Ansible playbook provided by the Jupyter team to setup a Ubuntu Virtual Machine, for example on SDSC Cloud or XSEDE Jetstream.
This sets up already a Jupyterhub instance on a single machine with Github authentication, NGINX with letsencrypt SSL and spawning of Notebooks as local processes.&lt;/p&gt;
&lt;p&gt;Start from: &lt;a href="https://zonca.github.io/2017/02/automated-deployment-jupyterhub-ansible.html"&gt;Automated deployment of Jupyterhub with Ansible&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It looks like there is a compatibility error with &lt;code&gt;conda&lt;/code&gt; 4.3 and above, I had to fix this (and provided PR upstream), I used the version at &lt;a href="https://github.com/zonca/jupyterhub-deploy-teaching/tree/globus_singularity"&gt;https://github.com/zonca/jupyterhub-deploy-teaching/tree/globus_singularity&lt;/a&gt;.
In particular check the example configuration file in the &lt;code&gt;host_vars/&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Once we have executed the scripts, connect to the Virtual Machine, login with Github and check that Notebooks are working.&lt;/p&gt;
&lt;h2&gt;Setup Authentication with Globus&lt;/h2&gt;
&lt;p&gt;Next we can SSH into the Jupyterhub Virtual Machine and customize Jupyterhub configuration in &lt;code&gt;/etc/jupyterhub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;oauthenticator&lt;/code&gt; should alrady be installed,, but it needs the Globus SDK to support authentication with Globus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conda&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;globus_sdk&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then follow the instructions to setup Globus Auth: &lt;a href="https://github.com/jupyterhub/oauthenticator#globus-setup"&gt;https://github.com/jupyterhub/oauthenticator#globus-setup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;you should now have add these lines in &lt;code&gt;/etc/jupyterhub/jupyterhub_config.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;oauthenticator.globus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GlobusOAuthenticator&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticator_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GlobusOAuthenticator&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GlobusOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oauth_callback_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu/hub/oauth_callback&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GlobusOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GlobusOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now be able to login with your Globus ID credentials, see the documentation to support credentials from institutions supported by Globus Auth.
After login, don't worry if you get an error in starting your notebook.&lt;/p&gt;
&lt;h2&gt;Setup Spawning with Batchspawner&lt;/h2&gt;
&lt;p&gt;In my last post about spawning Notebooks on Comet I was using XSEDE authentication so that each user would have to use their own Comet account.
In this scenario instead we imagine a Gateway system where the administrator shares their own allocation with the Gateway users. 
Therefore you should create a SSH keypair for the &lt;code&gt;root&lt;/code&gt; user on the Jupyterhub Virtual Machine and make sure you can login with no need for a password to Comet as the Gateway user.&lt;/p&gt;
&lt;p&gt;Then you need to install &lt;code&gt;batchspawner&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/jupyterhub/batchspawner.git&lt;/span&gt;
&lt;span class="err"&gt;cd batchspawner/&lt;/span&gt;
&lt;span class="err"&gt;sudo /opt/conda/bin/pip install .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then configure the Spawner, see &lt;a href="https://gist.github.com/zonca/aaed55502c4b16535fe947791d02ac32"&gt;my configuration of Jupyterhub: &lt;code&gt;jupyterhub_config.py&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should modify &lt;code&gt;comet_spawner.py&lt;/code&gt; to point to your Gateway user home folder and then fill all the details in &lt;code&gt;jupyterhub_config.py&lt;/code&gt; marked by the &lt;code&gt;CONF&lt;/code&gt; string.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;CometSpawner&lt;/code&gt; I also create a form for the user to choose the parameters of the job and also the Singularity image they want to use.&lt;/p&gt;
&lt;p&gt;Here the spawner uses &lt;code&gt;SSH&lt;/code&gt; to connect to the Comet login node and submit jobs as the Gateway user.&lt;/p&gt;
&lt;p&gt;At this point you should be able to login and launch a job on Comet, execute &lt;code&gt;squeue&lt;/code&gt; on Comet to check if that works or look in the home folder of the Gateway user for the logfile of the job and in &lt;code&gt;/var/log/jupyterhub&lt;/code&gt; on the Virtual machine for errors.&lt;/p&gt;
&lt;h2&gt;Setup tunneling&lt;/h2&gt;
&lt;p&gt;Finally we need a way for the gateway Virtual Machine to access the port on the Comet computing node in order to proxy the Notebook application back to the user.&lt;/p&gt;
&lt;p&gt;The simpler solution is to create a user &lt;code&gt;tunnelbot&lt;/code&gt; on the VM with no shell access, then create a SSH keypair and paste the &lt;strong&gt;private&lt;/strong&gt; key into the &lt;code&gt;jupyterhub_config.py&lt;/code&gt; file (contact me if you have a btter solution!).
The job on Comet sets up then a SSH tunnel between the Comet computing node and the Jupyterhub VM.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;To keep the setup simple, all users are running on the home folder of the Gateway user, for a real deployment, it is possible to create a subfolder for each user beforehand and then use Singularity to mount that as the home folder.&lt;/p&gt;</content><category term="misc"></category><category term="jupyterhub"></category><category term="ansible"></category><category term="sdsc"></category><category term="singularity"></category></entry><entry><title>How to create pull requests on Github</title><link href="http://zonca.github.io/2017/06/quick-github-pull-requests.html" rel="alternate"></link><published>2017-06-30T11:00:00-07:00</published><updated>2017-06-30T11:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-06-30:/2017/06/quick-github-pull-requests.html</id><summary type="html">&lt;p&gt;Pull Requests are the web-based version of sending software patches via email to code maintainers.
They allow a person that has no access to a code repository to submit a code change to the repository administrator for review and 1-click merging.&lt;/p&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a free Github account at &lt;a href="https://github.com"&gt;https://github …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Pull Requests are the web-based version of sending software patches via email to code maintainers.
They allow a person that has no access to a code repository to submit a code change to the repository administrator for review and 1-click merging.&lt;/p&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a free Github account at &lt;a href="https://github.com"&gt;https://github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Login on Github with your credentials&lt;/li&gt;
&lt;li&gt;Go to the homepage of the repository, for example &lt;a href="https://github.com/sdsc/sdsc-summer-institute-2017"&gt;https://github.com/sdsc/sdsc-summer-institute-2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Small changes via Github.com&lt;/h2&gt;
&lt;p&gt;For small changes, like create a folder and upload a few files, or a quick fix on a previous file, you don't even need to use the &lt;code&gt;git&lt;/code&gt; command line client.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you need to &lt;strong&gt;create a folder&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;click on "Create new file"&lt;/li&gt;
&lt;li&gt;in the "Name your file..." box, insert: "yourfolder/README.md"&lt;/li&gt;
&lt;li&gt;in the README.md write a description of the content of the folder, you can use markdown syntax, (see &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;the Markdown Cheatsheet&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;create a bullet list with description of the files you will be uploading next&lt;/li&gt;
&lt;li&gt;Click on "Propose new file"&lt;/li&gt;
&lt;li&gt;this will ask you to create a Pull Request, follow the prompts and make sure to confirm at the end that you want to create a Pull Request, you have to click twice on "Create Pull Request" buttons&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you want to upload files in the folder you just created, you need an additional step, if you want to upload to a folder already existing in the original repo, skip this:&lt;ul&gt;
&lt;li&gt;Go to the fork of the original repository that was created automatically under your account, for example: &lt;a href="https://github.com/YOURUSERNAME/sdsc-summer-institute-2017"&gt;https://github.com/YOURUSERNAME/sdsc-summer-institute-2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click on the dropdown "Branch" menu and look for the branch named &lt;code&gt;patch-1&lt;/code&gt;, or &lt;code&gt;patch-n&lt;/code&gt; if you have more.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click on the "Upload files" button, select and upload all files, a few notes:&lt;ul&gt;
&lt;li&gt;do not upload zip archives&lt;/li&gt;
&lt;li&gt;do not upload large data files, Github is for code&lt;/li&gt;
&lt;li&gt;if you are uploading binary files like images, downgrade them to a small size&lt;/li&gt;
&lt;li&gt;this will ask you to create a Pull Request, follow the prompts and make sure to confirm at the end that you want to create a Pull Request, you have to click twice on "Create Pull Request" buttons&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check that your pull request appeared in the Pull Requests area of the repository, for example &lt;a href="https://github.com/sdsc/sdsc-summer-institute-2017/pulls"&gt;https://github.com/sdsc/sdsc-summer-institute-2017/pulls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Update a previously create Pull Request via Github.com&lt;/h2&gt;
&lt;p&gt;If the repository maintainer has some feedback on your Pull Request, you can update it to accomodate any requested change.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the fork of the original repository that was created automatically under your account, for example: &lt;a href="https://github.com/YOURUSERNAME/sdsc-summer-institute-2017"&gt;https://github.com/YOURUSERNAME/sdsc-summer-institute-2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click on the dropdown "Branch" menu and look for the branch named &lt;code&gt;patch-1&lt;/code&gt;, or &lt;code&gt;patch-n&lt;/code&gt; if you have more.&lt;/li&gt;
&lt;li&gt;Now make changes to files or upload new files, then confirm and write a commit message from the web interface&lt;/li&gt;
&lt;li&gt;Check that your changes appear as updates inside the Pull Request you created before, for example  &lt;a href="https://github.com/sdsc/sdsc-summer-institute-2017/pull/N"&gt;https://github.com/sdsc/sdsc-summer-institute-2017/pull/N&lt;/a&gt; where N is the number assigned to your Pull Request&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Use the command line client&lt;/h2&gt;
&lt;p&gt;For more control and especially if you expect the repository maintainer to make changes to your Pull Request before merging it, better use &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click on the "Fork" button on the top right of the repository&lt;/li&gt;
&lt;li&gt;Now you should be on the copy of the repository under your own account, for example &lt;a href="https://github.com/YOURUSERNAME/sdsc-summer-institute-2017"&gt;https://github.com/YOURUSERNAME/sdsc-summer-institute-2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now open your terminal, if you never used &lt;code&gt;git&lt;/code&gt; before, set it up with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config --global user.name &lt;span class="s2"&gt;&amp;quot;Your Name&amp;quot;&lt;/span&gt;
$ git config --global user.email &lt;span class="s2"&gt;&amp;quot;your@email.edu&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now open your terminal and clone the repository with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/YOURUSERNAME/sdsc-summer-institute-2017&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter in the repository folder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a branch to isolate your changes with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git checkout -b &amp;quot;add_XXXX_material&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now create folders, modify files, you can use any text editor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you are done doing modifications, you can prepare them to be committed with, this adds everything inside the folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git add my_folder&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generally better instead to add each file to make sure you don't accidentally commit wrong files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git add my_folder/aaa.txt my_folder/README.md&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then write this changes to history with a commit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git commit -m &amp;quot;Added material about XXXX&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push changes to Github&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git push -u origin add_XXXX_material&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now go to the homepage of the original repository, for example &lt;a href="https://github.com/sdsc/sdsc-summer-institute-2017"&gt;https://github.com/sdsc/sdsc-summer-institute-2017&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;There should be a yellow notice saying that it detected a recently pushed branch, click on "Compare and Pull Request"&lt;/li&gt;
&lt;li&gt;Add a description&lt;/li&gt;
&lt;li&gt;Confirm with the green "Create Pull Request" button&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case you want to update your Pull Request, repeat the steps of &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt;, any changes will be reflected inside the pull request.&lt;/p&gt;</content><category term="misc"></category><category term="git"></category><category term="github"></category></entry><entry><title>Deploy Jupyterhub on a Supercomputer with SSH Authentication</title><link href="http://zonca.github.io/2017/05/jupyterhub-hpc-batchspawner-ssh.html" rel="alternate"></link><published>2017-05-16T22:00:00-07:00</published><updated>2017-05-16T22:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-05-16:/2017/05/jupyterhub-hpc-batchspawner-ssh.html</id><summary type="html">&lt;p&gt;The best way to deploy Jupyterhub with an interface to a Supercomputer is through the use of &lt;code&gt;batchspawner&lt;/code&gt;. I have a sample deployment explained in an older blog post: &lt;a href="https://zonca.github.io/2017/02/sample-deployment-jupyterhub-hpc.html"&gt;https://zonca.github.io/2017/02/sample-deployment-jupyterhub-hpc.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This setup however requires a OAUTH service, in this case provided by XSEDE …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The best way to deploy Jupyterhub with an interface to a Supercomputer is through the use of &lt;code&gt;batchspawner&lt;/code&gt;. I have a sample deployment explained in an older blog post: &lt;a href="https://zonca.github.io/2017/02/sample-deployment-jupyterhub-hpc.html"&gt;https://zonca.github.io/2017/02/sample-deployment-jupyterhub-hpc.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This setup however requires a OAUTH service, in this case provided by XSEDE, to authenticate the users via web and then provide a X509 certificate that is then used by &lt;code&gt;batchspawner&lt;/code&gt; to
connect to the Supercomputer on behalf of the user and submit the job to spawn a notebook.&lt;/p&gt;
&lt;p&gt;In case an authentication service of this type is not available, another option is to use SSH authentication.&lt;/p&gt;
&lt;p&gt;The starting point is a server with vanilla Jupyterhub installed, good practice would be to use an already available recipe with Ansible, like &lt;a href="https://zonca.github.io/2017/02/automated-deployment-jupyterhub-ansible.html"&gt;https://zonca.github.io/2017/02/automated-deployment-jupyterhub-ansible.html&lt;/a&gt;, that deploys Jupyterhub in a safer way, e.g. NGINX frontend with HTTPS.&lt;/p&gt;
&lt;p&gt;First we want to setup authentication, the simpler way to start would be to use the default authentication with local UNIX user accounts and possibly add Github later.
In any case it is necessary that all the users have both an account on the Supercomputer and on the Jupyterhub server, with the same username, this is tedious but is the simpler way to allow them to authenticate on the Supercomputer.
Then we need to save the &lt;strong&gt;private&lt;/strong&gt; SSH key into each user's &lt;code&gt;.ssh&lt;/code&gt; folder and make sure they can SSH with no password required to the Supercomputer.&lt;/p&gt;
&lt;p&gt;Then we can install &lt;code&gt;batchspawner&lt;/code&gt; and configure Jupyterhub to use it. In the &lt;code&gt;batchspawner&lt;/code&gt; configuration in &lt;code&gt;jupyterhub_config.py&lt;/code&gt;, you have to prefix the scheduler commands with ssh so that Jupyterhub can connect to the Supercomputer to submit the job:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;c.SlurmSpawner.batch_submit_cmd = &amp;#39;ssh {username}@{host} sbatch&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See for example &lt;a href="https://github.com/jupyterhub/jupyterhub-deploy-hpc/blob/master/batchspawner-xsedeoauth-sshtunnel-sdsccomet/jupyterhub_config.py#L66"&gt;my configuration for Comet&lt;/a&gt; and replace &lt;code&gt;gsissh&lt;/code&gt; with &lt;code&gt;ssh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now when users connect, they are authenticated with local UNIX user accounts username and password and then Jupyterhub uses their SSH key to launch a job on the Supercomputer.&lt;/p&gt;
&lt;p&gt;The last issue is how to proxy the Jupyterhub running on a computing node back to the server, here one option would be to create a user on the server with no Terminal access but with the possibility of creating tunnels, then at the end of the job, setup a tunnel using a SSH Private Key pasted into the job script itself, see for example &lt;a href="https://github.com/jupyterhub/jupyterhub-deploy-hpc/blob/master/batchspawner-xsedeoauth-sshtunnel-sdsccomet/jupyterhub_config.py#L54"&gt;my setup on Comet&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyterhub"></category><category term="hpc"></category><category term="comet"></category></entry><entry><title>Configure Globus on your local machine for GridFTP with XSEDE authentication</title><link href="http://zonca.github.io/2017/04/globus-gridftp-local.html" rel="alternate"></link><published>2017-04-19T12:00:00-07:00</published><updated>2017-04-19T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-04-19:/2017/04/globus-gridftp-local.html</id><summary type="html">&lt;p&gt;All the commands are executed on your local machine, the purpose of this tutorial is to be able to use &lt;code&gt;globus-url-copy&lt;/code&gt; to copy efficiently data back and forth between your local machine and a XSEDE Supercomputer on the command line.&lt;/p&gt;
&lt;p&gt;For a simpler point and click web interface, install Globus …&lt;/p&gt;</summary><content type="html">&lt;p&gt;All the commands are executed on your local machine, the purpose of this tutorial is to be able to use &lt;code&gt;globus-url-copy&lt;/code&gt; to copy efficiently data back and forth between your local machine and a XSEDE Supercomputer on the command line.&lt;/p&gt;
&lt;p&gt;For a simpler point and click web interface, install Globus Conect Personal instead: &lt;a href="https://www.globus.org/globus-connect-personal"&gt;https://www.globus.org/globus-connect-personal&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install Globus toolkit&lt;/h2&gt;
&lt;p&gt;See http://toolkit.globus.org/toolkit/docs/latest-stable/admin/install/#install-toolkit&lt;/p&gt;
&lt;p&gt;On Ubuntu, download the deb of the Globus repo from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;wget http://www.globus.org/ftppub/gt6/installers/repo/globus-toolkit-repo_latest_all.deb&lt;/span&gt;
&lt;span class="err"&gt;sudo dpkg -i globus-toolkit-repo_latest_all.deb&lt;/span&gt;
&lt;span class="err"&gt;sudo apt-get install globus-data-management-client&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install XSEDE certificates on your machine&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;wget https://software.xsede.org/security/xsede-certs.tar.gz&lt;/span&gt;
&lt;span class="err"&gt;tar xvf xsede-certs.tar.gz&lt;/span&gt;
&lt;span class="err"&gt;sudo mv certificates /etc/grid-security&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Full instructions here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://software.xsede.org/production/CA/CA-install.html"&gt;https://software.xsede.org/production/CA/CA-install.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Authenticate with the myproxy provided by XSEDE&lt;/h2&gt;
&lt;p&gt;Authenticate with your XSEDE user and password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;myproxy-logon -s myproxy.xsede.org -l $USER -t 36&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can specify the lifetime of the certificate in hours with &lt;code&gt;-t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;you should get a certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;A credential has been received for user zonca in /tmp/x509up_u1000.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can check how much time is left on a certificate by running &lt;code&gt;grid-proxy-info&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Run globus-url-copy&lt;/h2&gt;
&lt;p&gt;For example copy to my home on Comet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;globus-url-copy -vb -p 4 local_file.tar.gz gsiftp://oasis-dm.sdsc.edu///home/zonca/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the quickstart guide on the most used &lt;code&gt;globus-url-copy&lt;/code&gt; options:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://toolkit.globus.org/toolkit/docs/latest-stable/gridftp/user/#gridftp-user-basic"&gt;http://toolkit.globus.org/toolkit/docs/latest-stable/gridftp/user/#gridftp-user-basic&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Synchronize 2 folders&lt;/h2&gt;
&lt;p&gt;Only copy new files using the &lt;code&gt;-sync&lt;/code&gt; and &lt;code&gt;-sync-level&lt;/code&gt; options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;-sync&lt;/span&gt;
&lt;span class="err"&gt;  Only transfer files where the destination does not exist or differs from the source. -sync-level controls how to determine if files differ.&lt;/span&gt;
&lt;span class="err"&gt;-sync-level number&lt;/span&gt;
&lt;span class="err"&gt;  Criteria for determining if files differ when performing a sync transfer. The default sync level is 2.\&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The available levels are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Level 0 will only transfer if the destination does not exist.&lt;/li&gt;
&lt;li&gt;Level 1 will transfer if the size of the destination does not match the size of the source.&lt;/li&gt;
&lt;li&gt;Level 2 will transfer if the time stamp of the destination is older than the time stamp of the source.&lt;/li&gt;
&lt;li&gt;Level 3 will perform a checksum of the source and destination and transfer if the checksums do not match.&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyterhub"></category></entry><entry><title>Sample deployment of Jupyterhub in HPC on SDSC Comet</title><link href="http://zonca.github.io/2017/02/sample-deployment-jupyterhub-hpc.html" rel="alternate"></link><published>2017-02-26T12:00:00-08:00</published><updated>2017-02-26T12:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-02-26:/2017/02/sample-deployment-jupyterhub-hpc.html</id><summary type="html">&lt;p&gt;I have deployed an experimental Jupyterhub service (ask me privately if you would like access) installed on a &lt;a href="http://www.sdsc.edu/services/it/cloud.html"&gt;SDSC Cloud&lt;/a&gt; virtual machine that spawns single user Jupyter notebooks on Comet computing nodes using &lt;a href="https://github.com/jupyterhub/batchspawner"&gt;&lt;code&gt;batchspawner&lt;/code&gt;&lt;/a&gt; and then proxies the Notebook back to the user using SSH-tunneling.&lt;/p&gt;
&lt;h2&gt;Functionality&lt;/h2&gt;
&lt;p&gt;This kind of setup …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have deployed an experimental Jupyterhub service (ask me privately if you would like access) installed on a &lt;a href="http://www.sdsc.edu/services/it/cloud.html"&gt;SDSC Cloud&lt;/a&gt; virtual machine that spawns single user Jupyter notebooks on Comet computing nodes using &lt;a href="https://github.com/jupyterhub/batchspawner"&gt;&lt;code&gt;batchspawner&lt;/code&gt;&lt;/a&gt; and then proxies the Notebook back to the user using SSH-tunneling.&lt;/p&gt;
&lt;h2&gt;Functionality&lt;/h2&gt;
&lt;p&gt;This kind of setup is functionally equivalent to launching a job yourself on Comet, launch &lt;code&gt;jupyter notebook&lt;/code&gt; and then SSH-Tunneling the port to your local machine, but way more convenient. You jus open your browser to  the Jupyterhub instance, authenticate with your XSEDE credentials, choose queue and job length and wait for the Notebook job to be ready (generally it is a matter of minutes).&lt;/p&gt;
&lt;h2&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Jupyter Notebooks have a lot of use-cases on HPC, it can be used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In-situ visualization&lt;/li&gt;
&lt;li&gt;Interactive data analysis when local resources are not enough, either in terms of RAM or disk space&lt;/li&gt;
&lt;li&gt;Monitoring other running jobs&lt;/li&gt;
&lt;li&gt;Launch &lt;a href="https://github.com/ipython/ipyparallel"&gt;IPython Parallel&lt;/a&gt; jobs and distribute computation to them in parallel&lt;/li&gt;
&lt;li&gt;Interact with a running Spark cluster (we support Spark on Comet)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More on this on my &lt;a href="https://zonca.github.io/2015/04/jupyterhub-hpc.html"&gt;Run Jupyterhub on a Supercomputer&lt;/a&gt; old blog post.&lt;/p&gt;
&lt;h2&gt;Setup details&lt;/h2&gt;
&lt;p&gt;The Jupyter team created a repository for sample HPC deployments, I added all configuration files of my deployment there, with all details about the setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyterhub/jupyterhub-deploy-hpc/tree/master/batchspawner-xsedeoauth-sshtunnel-sdsccomet"&gt;Sample deployment in the &lt;code&gt;jupyterhub-deploy-hpc&lt;/code&gt; repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please send feedback opening an issue in that repository and tagging &lt;code&gt;@zonca&lt;/code&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyterhub"></category><category term="hpc"></category><category term="comet"></category></entry><entry><title>Customize your Python environment in Jupyterhub</title><link href="http://zonca.github.io/2017/02/customize-python-environment-jupyterhub.html" rel="alternate"></link><published>2017-02-24T12:00:00-08:00</published><updated>2017-02-24T12:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-02-24:/2017/02/customize-python-environment-jupyterhub.html</id><summary type="html">&lt;p&gt;Usecase: You have access to a Jupyterhub server and you would like to install some packages but cannot use &lt;code&gt;pip install&lt;/code&gt; and modify the systemwide Python installation.&lt;/p&gt;
&lt;h2&gt;Check if conda is available&lt;/h2&gt;
&lt;p&gt;First check if the Python installation you have access to is based on Anaconda, open a Notebook and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Usecase: You have access to a Jupyterhub server and you would like to install some packages but cannot use &lt;code&gt;pip install&lt;/code&gt; and modify the systemwide Python installation.&lt;/p&gt;
&lt;h2&gt;Check if conda is available&lt;/h2&gt;
&lt;p&gt;First check if the Python installation you have access to is based on Anaconda, open a Notebook and type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sx"&gt;!which conda&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;!&lt;/code&gt; executes bash commands instead of Python commands, we want to check if the &lt;code&gt;conda&lt;/code&gt; package manager is installed.&lt;/p&gt;
&lt;p&gt;If not, the setup is a bit tedious, so see my tutorial on &lt;a href="https://zonca.github.io/2015/10/use-own-python-in-jupyterhub.html"&gt;installing Anaconda in your home folder&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Create a conda environment&lt;/h2&gt;
&lt;p&gt;Conda allows to create independent environments in our home folder, this has the advantage that the environment will be writable so we can install any other package with &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;conda install&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sx"&gt;!conda create -n myownenv --clone root&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can declare all the packages you want to install bu good starting point is just to clone the &lt;code&gt;root&lt;/code&gt; environment, this will link all the global packages in your home folder, then you can customize it further.&lt;/p&gt;
&lt;h2&gt;Create a Jupyter Notebook kernel to launch this new environment&lt;/h2&gt;
&lt;p&gt;We need to notify Jupyter of this new Python environment by creating a Kernel, from a Notebook launch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sx"&gt;!source activate myownenv; ipython kernel install --user --name myownenv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Launch a Notebook&lt;/h2&gt;
&lt;p&gt;Go back to the Jupyterhub dashboard, reload the page, now you should have another option in the &lt;code&gt;New&lt;/code&gt; menu that says &lt;code&gt;myownenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to use your new kernel with an existing notebook, click on the notebook file in the dashboard, it will launch with the default kernel, then you can change kernel from the top menu &lt;code&gt;Kernel&lt;/code&gt; &amp;gt; &lt;code&gt;Change kernel&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Install new packages&lt;/h2&gt;
&lt;p&gt;Inside a Notebook using the &lt;code&gt;myownenv&lt;/code&gt; environment you can install other packages running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sx"&gt;!conda install newpackagename&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sx"&gt;!pip install newpackagename&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyterhub"></category></entry><entry><title>Automated deployment of Jupyterhub with Ansible</title><link href="http://zonca.github.io/2017/02/automated-deployment-jupyterhub-ansible.html" rel="alternate"></link><published>2017-02-03T18:00:00-08:00</published><updated>2017-02-03T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-02-03:/2017/02/automated-deployment-jupyterhub-ansible.html</id><summary type="html">&lt;p&gt;Last year I wrote some tutorials on simple deployments of Jupyterhub on Ubuntu 16.04 on the OpenStack deployment &lt;a href="http://www.sdsc.edu/services/it/cloud.html"&gt;SDSC Cloud&lt;/a&gt;, even if most of the steps would also be suitable on other resources like Amazon EC2.&lt;/p&gt;
&lt;p&gt;In more detail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2016/04/jupyterhub-sdsc-cloud.html"&gt;Manually installing Jupyterhub on a single Virtual Machine with users …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Last year I wrote some tutorials on simple deployments of Jupyterhub on Ubuntu 16.04 on the OpenStack deployment &lt;a href="http://www.sdsc.edu/services/it/cloud.html"&gt;SDSC Cloud&lt;/a&gt;, even if most of the steps would also be suitable on other resources like Amazon EC2.&lt;/p&gt;
&lt;p&gt;In more detail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2016/04/jupyterhub-sdsc-cloud.html"&gt;Manually installing Jupyterhub on a single Virtual Machine with users running inside Docker containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2016/04/jupyterhub-image-sdsc-cloud.html"&gt;Quick deployment of the above using a pre-built image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2016/05/jupyterhub-docker-swarm.html"&gt;Jupyterhub distributing user containers on other nodes using Docker Swarm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Jupyter team has released an automated script to deploy Jupyterhub on a single server, see &lt;a href="http://jupyterhub-deploy-teaching.readthedocs.io"&gt;Jupyterhub-deploy-teaching&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this tutorial we will use this script to deploy Jupyterhub to SDSC Cloud using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NGINX handling HTTPS with Letsencrypt certificate&lt;/li&gt;
&lt;li&gt;Github authentication&lt;/li&gt;
&lt;li&gt;Local or Docker user notebooks&lt;/li&gt;
&lt;li&gt;Grading with &lt;code&gt;nbgrader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Memory limit for Docker containers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setup a Virtual Machine to run Jupyterhub&lt;/h2&gt;
&lt;p&gt;Create first a Ubuntu 16.04 Virtual Machine, a default server image works fine.&lt;/p&gt;
&lt;p&gt;In case you are deploying on SDSC Cloud, follow the steps in "Create a Virtual Machine in OpenStack" on my first tutorial at &lt;a href="https://zonca.github.io/2016/04/jupyterhub-sdsc-cloud.html"&gt;https://zonca.github.io/2016/04/jupyterhub-sdsc-cloud.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will also need a DNS entry pointing to the server to create a SSL certificate with Let's Encrypt. Either ask your institution to provide a DNS A entry, e.g. &lt;code&gt;test-jupyterhub.ucsd.edu&lt;/code&gt;, that points to the Public IP of the server.
SDSC Cloud already provides a DNS entry in the form &lt;code&gt;xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you plan on using &lt;code&gt;nbgrader&lt;/code&gt;, you need to create the home folder for the instructor beforehand, so SSH into the server and create a user with your Github username, i.e. I had to execute &lt;code&gt;sudo adduser zonca&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Setup your local machine to run the automation scripts&lt;/h2&gt;
&lt;p&gt;Automation of the server setup is provided by the &lt;a href="http://ansible.com"&gt;Ansible&lt;/a&gt; software tool, it allows to describe a server configuration in great detail (a "playbook") and then connects via SSH to a Virtual Machine and runs Python to install and setup all the required software.&lt;/p&gt;
&lt;p&gt;On your local machine, install &lt;code&gt;Ansible&lt;/code&gt;, at least version 2.1, see &lt;a href="http://docs.ansible.com/ansible/intro_installation.html#getting-ansible"&gt;Ansible docs&lt;/a&gt;, for Ubuntu just add the &lt;a href="https://launchpad.net/~ansible/+archive/ubuntu/ansible"&gt;Ansible PPA repository&lt;/a&gt;.
I tested this with Ansible version 2.2.1.0&lt;/p&gt;
&lt;p&gt;Then you need to configure passwordless SSH connection to your Virtual Machine. Download your SSH key from the OpenStack dashboard, copy it to your &lt;code&gt;~/.ssh&lt;/code&gt; folder and then add an entry to &lt;code&gt;.ssh/config&lt;/code&gt; for the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Host xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu&lt;/span&gt;
&lt;span class="err"&gt;    HostName xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu&lt;/span&gt;
&lt;span class="err"&gt;    User ubuntu&lt;/span&gt;
&lt;span class="err"&gt;    IdentityFile &amp;quot;~/.ssh/sdsccloud.key&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point you should be able to SSH into the machine without typing any password with &lt;code&gt;ssh xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Configure and run the Ansible script&lt;/h2&gt;
&lt;p&gt;Follow the &lt;a href="http://jupyterhub-deploy-teaching.readthedocs.io/en/latest/installation.html"&gt;Jupyterhub-deploy-teaching documentation&lt;/a&gt; to checkout the script, configure and run it.&lt;/p&gt;
&lt;p&gt;The only modification you need to do if you are on SDSC Cloud is that the remote user is &lt;code&gt;ubuntu&lt;/code&gt; and not &lt;code&gt;root&lt;/code&gt;, so modify &lt;code&gt;ansible.cfg&lt;/code&gt; in the root of the repository,
replace &lt;code&gt;remote_user=root&lt;/code&gt; with &lt;code&gt;remote_user=ubuntu&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As an example, see the &lt;a href="https://gist.github.com/zonca/fd2400a2069b5769f32b1c4b57eb97dc"&gt;configuration I used&lt;/a&gt;, just:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy it into &lt;code&gt;host_vars&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rename it to your public DNS record&lt;/li&gt;
&lt;li&gt;fill in &lt;code&gt;proxy_auth_token&lt;/code&gt;, Github OAuth credentials for authentication&lt;/li&gt;
&lt;li&gt;replace &lt;code&gt;zonca&lt;/code&gt; with your Github username everywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The exact version of the &lt;code&gt;jupyterhub-deploy-teaching&lt;/code&gt; code I used for testing is &lt;a href="https://github.com/zonca/jupyterhub-deploy-teaching/releases/tag/sdsc_cloud_jan_17"&gt;on the &lt;code&gt;sdsc_cloud_jan_17&lt;/code&gt; tag on Github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Test the deployment&lt;/h2&gt;
&lt;p&gt;Connect to &lt;a href="https://xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu"&gt;https://xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu&lt;/a&gt; on your browser, you should be redirected to Github for authentication and then access a Jupyter Notebook instance with the Python 3, R and bash kernels running locally on the machine.&lt;/p&gt;
&lt;h2&gt;Optional: Docker&lt;/h2&gt;
&lt;p&gt;In order to provide isolation and resource limits to the users, it is useful to run single user Jupyter Notebooks inside Docker containers.&lt;/p&gt;
&lt;p&gt;You will need to SSH into the Virtual Machine and follow the next steps.&lt;/p&gt;
&lt;h3&gt;Install Docker&lt;/h3&gt;
&lt;p&gt;First of all we need to install and configure Docker on the machine, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/installation/linux/ubuntu/"&gt;https://docs.docker.com/engine/installation/linux/ubuntu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/installation/linux/linux-postinstall/"&gt;https://docs.docker.com/engine/installation/linux/linux-postinstall/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Install dockerspawner&lt;/h3&gt;
&lt;p&gt;Then install the Jupyterhub plugin &lt;code&gt;dockerspawner&lt;/code&gt; that handles launching single user Notebooks inside Docker containers, we want to install from master instead of pypi to avoid an error setting the memory limit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pip install git+https://github.com/jupyterhub/dockerspawner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup the Docker container to run user Notebooks&lt;/h3&gt;
&lt;p&gt;We can first get the standard &lt;code&gt;systemuser&lt;/code&gt; container, this Docker container mounts the home folder of the users inside the container, this way we can have persistent data even if the container gets deleted.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker pull jupyterhub/systemuser&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you do not need &lt;a href="http://nbgrader.readthedocs.io"&gt;&lt;code&gt;nbgrader&lt;/code&gt;&lt;/a&gt; this image is enough, otherwise we have to build our own image, first checkout my Github repository in the home folder of the &lt;code&gt;ubuntu&lt;/code&gt; user on the server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/zonca/systemuser-nbgrader&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then edit the &lt;code&gt;nbgrader_config.py&lt;/code&gt; file to set the correct &lt;code&gt;course_id&lt;/code&gt;, and build the container image running inside the &lt;code&gt;systemuser-nbgrader&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker build -t systemuser-nbgrader .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Configure Jupyterhub to use dockerspawner&lt;/h3&gt;
&lt;p&gt;Then add some configuration for dockerspawner to &lt;code&gt;/etc/jupyterhub/jupyterhub_config.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawner_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dockerspawner.SystemUserSpawner&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DockerSpawner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;systemuser-nbgrader&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# delete this line if you just need `jupyterhub/systemuser`&lt;/span&gt;
                                                                                                          &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spawner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mem_limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;500M&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# or 1G for GB, probably 300M is minimum required just to run simple calculations&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DockerSpawner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;volumes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/srv/nbgrader/exchange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/exchange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# this is necessary for nbgrader to transfer homework back and forth between students and instructor&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DockerSpawner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_containers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# The docker instances need access to the Hub, so the default loopback port doesn&amp;#39;t work:&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.utils.localinterfaces&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;public_ips&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hub_ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;public_ips&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Test the deployment with Docker&lt;/h3&gt;
&lt;p&gt;Connect to &lt;a href="https://xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu"&gt;https://xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu&lt;/a&gt; on your browser, you should be redirected to Github for authentication and then access a Jupyter Notebook instance with the Python 2 or Python 3, open a Notebook and run &lt;code&gt;!hostname&lt;/code&gt; in the first cell, you should find out that you get a Docker hash instead of the machine name, you are inside a container.&lt;/p&gt;
&lt;p&gt;SSH into the machine run &lt;code&gt;docker ps&lt;/code&gt; to find the hash of a running container and then &lt;code&gt;docker stat HASH&lt;/code&gt; to check memory usage and the current limit.&lt;/p&gt;
&lt;p&gt;Check that you can connect to the &lt;code&gt;nbgrader&lt;/code&gt; &lt;code&gt;formgrade&lt;/code&gt; service that allows to manually grade assignments at &lt;a href="https://xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu/services/formgrade-COURSEID"&gt;https://xxx-xxx-xxx-xxx.compute.cloud.sdsc.edu/services/formgrade-COURSEID&lt;/a&gt;, replace &lt;code&gt;COURSEID&lt;/code&gt; with the course identifier you setup in the Ansible script.&lt;/p&gt;
&lt;h3&gt;Pre-built image&lt;/h3&gt;
&lt;p&gt;I also have a saved Virtual Machine snapshot on SDSC Cloud named &lt;code&gt;jupyterhub_ansible_nbgrader_coleman&lt;/code&gt;&lt;/p&gt;</content><category term="misc"></category><category term="jupyterhub"></category><category term="ansible"></category><category term="sdsc"></category></entry><entry><title>How to publish your research software to Github</title><link href="http://zonca.github.io/2017/02/publish-research-software-github.html" rel="alternate"></link><published>2017-02-01T18:00:00-08:00</published><updated>2017-02-01T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-02-01:/2017/02/publish-research-software-github.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Do you want to make your research software available publicly on Github?&lt;/li&gt;
&lt;li&gt;Has your reviewer asked to publish the code described in your paper?&lt;/li&gt;
&lt;li&gt;Would you like to collaborate on your research software with other people, either local or remote?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nowadays many journals require that the software used to produce …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Do you want to make your research software available publicly on Github?&lt;/li&gt;
&lt;li&gt;Has your reviewer asked to publish the code described in your paper?&lt;/li&gt;
&lt;li&gt;Would you like to collaborate on your research software with other people, either local or remote?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nowadays many journals require that the software used to produce results described in a scientific paper be made available publicly
for other peers to be able to reproduce the results or even just explore the analysis more in detail.&lt;/p&gt;
&lt;p&gt;The most popular platform is &lt;a href="http://github.com"&gt;Github&lt;/a&gt;, it allows to create a homepage for your software, keep track of any future code change and allows people to report issues or contribute patches easily.&lt;/p&gt;
&lt;p&gt;I'll assume familiarity with working from the command line.&lt;/p&gt;
&lt;h2&gt;Prepare your software for publication&lt;/h2&gt;
&lt;p&gt;First it is necessary to make sure your code is all inside a single root folder (with any number of subfolders), then cleanup any build artifact, data or executable present in your tree of folders.
Ideally you should only have the source code and documentation.
If you have small datasets (&amp;lt;10MB total) it is convenient to store them inside the repository, otherwise better host them on dedicated free services like &lt;a href="http://figshare.com"&gt;Figshare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should cleanup the build and installation process for your code, if any, and ideally you should structure your code in a standard format to ease adoption, for example using a project template generated by &lt;a href="https://github.com/audreyr/cookiecutter"&gt;Cookiecutter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should create a &lt;code&gt;README.md&lt;/code&gt; file in the root folder of your project, this is very important because it will be transformed into HTML and displayed in the homepage of your software project. Here you should use the Markdown formatting language, see &lt;a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/"&gt;a Markdown cheatsheet on Github&lt;/a&gt;, to explain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;short description of your software&lt;/li&gt;
&lt;li&gt;build/usage requirements for your process&lt;/li&gt;
&lt;li&gt;installation instructions (and point to another file &lt;code&gt;INSTALL.md&lt;/code&gt; for more details)&lt;/li&gt;
&lt;li&gt;quickstart section&lt;/li&gt;
&lt;li&gt;link to usage examples&lt;/li&gt;
&lt;li&gt;link to your paper about the project&lt;/li&gt;
&lt;li&gt;list of developers&lt;/li&gt;
&lt;li&gt;optionally: how users can get support (i.e. a mailing list)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally you should choose a license, otherwise even if the project is public, nobody is allowed to modify and re-use it legally.
Create a &lt;code&gt;LICENSE&lt;/code&gt; file in the root of folder tree and paste the content of the license. I recommend MIT license which is very permissive and simple: &lt;a href="https://choosealicense.com/licenses/mit/"&gt;https://choosealicense.com/licenses/mit/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Create an account on Github&lt;/h2&gt;
&lt;p&gt;Second step is to create an account on Github: this just requires a username, email and password, choose your username carefully because it will become the
root internet address of all your software projects, i.e. &lt;code&gt;https://github.com/username/software-name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A Github account is free and allows any number of public software projects, private repositories are generally available only on paid account, however
who has a &lt;code&gt;.edu&lt;/code&gt; email address can apply for unlimited private repositories by applying for the &lt;a href="https://education.github.com/discount_requests/new"&gt;academic discount&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Create a repository on Github&lt;/h2&gt;
&lt;p&gt;Github hosts software inside a version control system, &lt;code&gt;git&lt;/code&gt;, so that it stores the complete history of all the incremental changes over time and allows to easily
recover previous versions of the software. Each software project is stored in a repository, which includes both the current version and all previous versions of the software.&lt;code&gt;git&lt;/code&gt; is a more modern alternative to &lt;code&gt;subversion&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First you need to create a repository on Github: authenticate on Github.com and click on the "New Repository" button, choose a name for your software project and leave all other options as default.&lt;/p&gt;
&lt;h2&gt;Publish your software on Github&lt;/h2&gt;
&lt;p&gt;Make sure that the &lt;code&gt;git&lt;/code&gt; command line tool is available on the machine where your code is stored, install it from your package manager or see &lt;a href="https://git-scm.com/downloads"&gt;installation instructions on the git website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally you can follow the instructions on the repository homepage &lt;code&gt;https://github.com/username/software-name&lt;/code&gt; in the section &lt;strong&gt;..or create a new repository on the command line&lt;/strong&gt;,
make sure you are in the root folder of your repository and follow this steps:&lt;/p&gt;
&lt;p&gt;Turn the current folder into a &lt;code&gt;git&lt;/code&gt; repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git init&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add recursively all files and folders, otherwise specify filenames or wildcard to pick only some, &lt;strong&gt;be careful not to accidentally upload sensitive content like passwords&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git add *&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Store into the repository a first version of the software:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git commit -m &amp;quot;first version of the software&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tell &lt;code&gt;git&lt;/code&gt; the address of the remote repository on Github (make sure to use your username and the name you chose for your software project):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git remote add origin https://github.com/username/software-name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Upload the software to Github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git push -u origin master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then check in your browser that all the code you meant to publish is available on Github&lt;/p&gt;
&lt;h2&gt;Update your software&lt;/h2&gt;
&lt;p&gt;Whenever in the future you need to make modifications to the software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit the files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add filename1 filename2&lt;/code&gt; to prepare them for commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m "bugfix"&lt;/code&gt; create a version in the history with a explanatory commit message&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt; to publish to Github&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details on &lt;code&gt;git&lt;/code&gt;, check the &lt;a href="https://swcarpentry.github.io/git-novice/"&gt;Software Carpentry lessons&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="git"></category><category term="github"></category><category term="software-carpentry"></category></entry><entry><title>Run Ubuntu in HPC with Singularity</title><link href="http://zonca.github.io/2017/01/singularity-hpc-comet.html" rel="alternate"></link><published>2017-01-13T12:00:00-08:00</published><updated>2017-01-13T12:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2017-01-13:/2017/01/singularity-hpc-comet.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Ever wanted to &lt;code&gt;sudo apt install&lt;/code&gt; packages on a Supercomputer?&lt;/li&gt;
&lt;li&gt;Ever wanted to freeze your software environment and reproduce a calculation after some time?&lt;/li&gt;
&lt;li&gt;Ever wanted to dump your software environment to a file and move it to another Supercomputer? or wanted the same software on your laptop and on …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Ever wanted to &lt;code&gt;sudo apt install&lt;/code&gt; packages on a Supercomputer?&lt;/li&gt;
&lt;li&gt;Ever wanted to freeze your software environment and reproduce a calculation after some time?&lt;/li&gt;
&lt;li&gt;Ever wanted to dump your software environment to a file and move it to another Supercomputer? or wanted the same software on your laptop and on a computing node?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your answer to any of those question is yes, read on! Otherwise, well, still read on, it's awesome!&lt;/p&gt;
&lt;h2&gt;Singularity&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://singularity.lbl.gov"&gt;Singularity&lt;/a&gt; is a software project by Lawrence Berkeley Labs to provide a safe container technology for High Performance Computing,
and it has been available for some time on my favorite Supercomputer, i.e. Comet at the San Diego Supercomputer Center.&lt;/p&gt;
&lt;p&gt;You can read more details on their website, in summary you choose your own Operative System (any GNU/Linux distribution), describe its configuration in a standard format or even
import an existing &lt;code&gt;Dockerfile&lt;/code&gt; (from the popular Docker container technology) and Singularity is able to build an image contained in a single file.
This file can then be executed on any Linux machine with Singularity installed (even on a Comet computing node), so you can run Ubuntu 16.10 or Red Hat 5 or any other flavor, your choice!
It doesn't need any deamon running like Docker, you can just execute a command inside the container by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;singularity exec /path/to/your/image.img your_executable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And your executable is run within the OS of the container.&lt;/p&gt;
&lt;p&gt;The container technology is just sandboxing the environment, not executing a complete OS inside the host OS, so the loss of performance is minimal.&lt;/p&gt;
&lt;p&gt;In summary, referring to the questions above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This allows you to &lt;code&gt;sudo apt install&lt;/code&gt; any package inside this environment when it is on your laptop, and then copy it to any Supercomputer and run your software inside that OS.&lt;/li&gt;
&lt;li&gt;You can store this image to help reproduce your scientific results anytime in the future&lt;/li&gt;
&lt;li&gt;You can develop your software inside a Singularity container and never have to worry about environment issues when you are ready for production runs on HPC or moving across different Supercomputers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Build a Singularity image for SDSC Comet with MPI support&lt;/h2&gt;
&lt;p&gt;One of the trickiest things for such technology in HPC is support for MPI, the key stack for high speed network communication. I have prepared a tutorial on Github on how to build either a CentOS 7 or a Ubuntu 16.04 Singularity container for Comet that allows to use the &lt;code&gt;mpirun&lt;/code&gt; command provided by the host OS on Comet but execute a code that supports MPI within the container.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zonca/singularity-comet"&gt;https://github.com/zonca/singularity-comet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;More complicated setup for Julia with MPI support&lt;/h2&gt;
&lt;p&gt;For a project that needed a setup with Julia with MPI support I built a more complicated container, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zonca/singularity-comet/tree/master/debian_julia"&gt;https://github.com/zonca/singularity-comet/tree/master/debian_julia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Prebuilt containers&lt;/h2&gt;
&lt;p&gt;I made also available my containers on Comet, they are located in my scratch space:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/oasis/scratch/comet/zonca/temp_project&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and are named &lt;code&gt;Centos7.img&lt;/code&gt;, &lt;code&gt;Ubuntu.img&lt;/code&gt; and &lt;code&gt;julia.img&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also copy those images to your local machine and customize them more.&lt;/p&gt;
&lt;h2&gt;Trial accounts on Comet&lt;/h2&gt;
&lt;p&gt;If you don't have an account on Comet yet, you can request a trial allocation:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.xsede.org/web/xup/allocations-overview#types-trial"&gt;https://www.xsede.org/web/xup/allocations-overview#types-trial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content><category term="misc"></category><category term="singularity"></category><category term="comet"></category></entry><entry><title>Jupyterhub Docker Spawner with GPU support</title><link href="http://zonca.github.io/2016/10/dockerspawner-cuda.html" rel="alternate"></link><published>2016-10-12T12:00:00-07:00</published><updated>2016-10-12T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2016-10-12:/2016/10/dockerspawner-cuda.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/jupyterhub/dockerspawner"&gt;Docker Spawner&lt;/a&gt; allows users of Jupyterhub to run Jupyter Notebook inside isolated Docker Containers.
Access to the host NVIDIA GPU was not allowed until NVIDIA release the &lt;a href="https://github.com/NVIDIA/nvidia-docker"&gt;NVIDIA-docker&lt;/a&gt; plugin.&lt;/p&gt;
&lt;h2&gt;Build the Docker image&lt;/h2&gt;
&lt;p&gt;In order to make Jupyerhub work with NVIDIA-docker we need to build a Jupyterhub docker image for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/jupyterhub/dockerspawner"&gt;Docker Spawner&lt;/a&gt; allows users of Jupyterhub to run Jupyter Notebook inside isolated Docker Containers.
Access to the host NVIDIA GPU was not allowed until NVIDIA release the &lt;a href="https://github.com/NVIDIA/nvidia-docker"&gt;NVIDIA-docker&lt;/a&gt; plugin.&lt;/p&gt;
&lt;h2&gt;Build the Docker image&lt;/h2&gt;
&lt;p&gt;In order to make Jupyerhub work with NVIDIA-docker we need to build a Jupyterhub docker image for &lt;code&gt;dockerspawner&lt;/code&gt; that includes both the &lt;code&gt;dockerspawner&lt;/code&gt; &lt;code&gt;singleuser&lt;/code&gt; or &lt;code&gt;systemuser&lt;/code&gt; images and the &lt;code&gt;nvidia-docker&lt;/code&gt; image.&lt;/p&gt;
&lt;p&gt;The Jupyter &lt;code&gt;systemuser&lt;/code&gt; images are built in several steps so let's use them as a starting point, it is good that both image start from Ubuntu 14.04.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the &lt;code&gt;nvidia-docker&lt;/code&gt; repository&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;ubuntu-14.04/cuda/8.0/runtime/Dockerfile&lt;/code&gt;, replace &lt;code&gt;FROM ubuntu:14.04&lt;/code&gt; with &lt;code&gt;FROM jupyterhub/systemuser&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build this image &lt;code&gt;sudo docker build -t systemuser-cuda-runtime runtime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;ubuntu-14.04/cuda/8.0/devel/Dockerfile&lt;/code&gt;, replace &lt;code&gt;FROM cuda:8.0-runtime&lt;/code&gt; with &lt;code&gt;FROM systemuser-cuda-runtime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build this image &lt;code&gt;sudo docker build -t systemuser-cuda-devel devel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we have 2 images, either just CUDA 8.0 runtime or also the compiler &lt;code&gt;nvcc&lt;/code&gt; and other development tools.&lt;/p&gt;
&lt;p&gt;Make sure the image itself runs from the command line on the host:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo nvidia-docker run --rm systemuser-cuda-devel nvidia-smi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configure Jupyterhub&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;jupyterhub_config.py&lt;/code&gt;, first of all set the right image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;c.DockerSpawner.container_image = &amp;quot;systemuser-cuda-devel&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However this is not enough, &lt;code&gt;nvidia-docker&lt;/code&gt; images need special flags to work properly and mount the host GPU into the containers, this is usually performed calling &lt;code&gt;nvidia-docker&lt;/code&gt; instead of &lt;code&gt;docker&lt;/code&gt; from the command line.
In &lt;code&gt;dockerspawner&lt;/code&gt; however, we are directly using the docker library, so we need to properly configure the environment there.&lt;/p&gt;
&lt;p&gt;First of all, we can get the correct flags by calling from the host machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;curl -s localhost:3476/docker/cli&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result for my machine is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;--volume-driver=nvidia-docker --volume=nvidia_driver_361.93.02:/usr/local/nvidia:ro --device=/dev/nvidiactl --device=/dev/nvidia-uvm --device=/dev/nvidia-uvm-tools --device=/dev/nvidia0 --device=/dev/nvidia1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can configure &lt;code&gt;dockerspawner&lt;/code&gt; using those values, in my case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;c.DockerSpawner.read_only_volumes = {&amp;quot;nvidia_driver_361.93.02&amp;quot;:&amp;quot;/usr/local/nvidia&amp;quot;}&lt;/span&gt;
&lt;span class="err"&gt;c.DockerSpawner.extra_create_kwargs = {&amp;quot;volume_driver&amp;quot;:&amp;quot;nvidia-docker&amp;quot;}&lt;/span&gt;
&lt;span class="err"&gt;c.DockerSpawner.extra_host_config = { &amp;quot;devices&amp;quot;:[&amp;quot;/dev/nvidiactl&amp;quot;,&amp;quot;/dev/nvidia-uvm&amp;quot;,&amp;quot;/dev/nvidia-uvm-tools&amp;quot;,&amp;quot;/dev/nvidia0&amp;quot;,&amp;quot;/dev/nvidia1&amp;quot;] }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Test it&lt;/h2&gt;
&lt;p&gt;Login with Jupyterhub, try this notebook: &lt;a href="http://nbviewer.jupyter.org/gist/zonca/a14af3b92ab472580f7b97b721a2251e"&gt;http://nbviewer.jupyter.org/gist/zonca/a14af3b92ab472580f7b97b721a2251e&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Current issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Environment on the Jupyterhub kernel is missing &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, running directly on the image instead is fine&lt;/li&gt;
&lt;li&gt;I'd like to test using &lt;code&gt;numba&lt;/code&gt; in Jupyterhub, but that requires &lt;code&gt;cudatoolkit&lt;/code&gt; 8.0 which is not available yet in Anaconda&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyterhub"></category><category term="cuda"></category></entry><entry><title>Jupyterhub deployment on multiple nodes with Docker Swarm</title><link href="http://zonca.github.io/2016/05/jupyterhub-docker-swarm.html" rel="alternate"></link><published>2016-05-24T12:00:00-07:00</published><updated>2016-05-24T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2016-05-24:/2016/05/jupyterhub-docker-swarm.html</id><summary type="html">&lt;p&gt;This post is part of a series on deploying Jupyterhub on OpenStack tailored at workshops, in the previous posts I showed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zonca.github.io/2016/04/jupyterhub-sdsc-cloud.html"&gt;How to deploy a Jupyterhub on a single server with Docker and Python/R/Julia support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zonca.github.io/2016/04/jupyterhub-image-sdsc-cloud.html"&gt;How to deploy the previous server from a pre-built image and customize it …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This post is part of a series on deploying Jupyterhub on OpenStack tailored at workshops, in the previous posts I showed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zonca.github.io/2016/04/jupyterhub-sdsc-cloud.html"&gt;How to deploy a Jupyterhub on a single server with Docker and Python/R/Julia support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zonca.github.io/2016/04/jupyterhub-image-sdsc-cloud.html"&gt;How to deploy the previous server from a pre-built image and customize it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The limitation of a single server setup is that it cannot scale beyond the resources available on that server, especially memory. Therefore for a workshop that requires to load large amount of data or with lots of students it is recommended to use a multi-server setup.&lt;/p&gt;
&lt;p&gt;Fortunately Docker already provides that flexibility thanks to &lt;a href="https://docs.docker.com/swarm/overview/"&gt;Docker Swarm&lt;/a&gt;. Docker Swarm allows to have a Docker interface that behaves like a normal single server instance but instead launches containers on a pool of servers. Therefore there are mininal changes on the Jupyterhub server.&lt;/p&gt;
&lt;p&gt;Jupyterhub will interface with the Docker Swarm service running locally, Docker Swarm will take care of launching containers across the other nodes. Each container will launch a Jupyter Notebook server for a single user, then Jupyterhub will proxy the container port to the users. Users won't connect directly to the nodes in the Docker Swarm pool. &lt;/p&gt;
&lt;h2&gt;Setup the Jupyterhub server&lt;/h2&gt;
&lt;p&gt;Let's start from the public image already available, see just the first section "Create a Virtual Machine in OpenStack with the pre-built image" in &lt;a href="http://zonca.github.io/2016/04/jupyterhub-image-sdsc-cloud.html"&gt;http://zonca.github.io/2016/04/jupyterhub-image-sdsc-cloud.html&lt;/a&gt; for instructions on how to get the Jupyterhub single server running.&lt;/p&gt;
&lt;h3&gt;Setup Docker Swarm&lt;/h3&gt;
&lt;p&gt;First of all we need to have Docker accessible remotely so we need to configure it to listen on a TCP port, edit &lt;code&gt;/etc/init/docker.conf&lt;/code&gt; and replace &lt;code&gt;DOCKER_OPTS=&lt;/code&gt; in the &lt;code&gt;start&lt;/code&gt; section with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;DOCKER_OPTS=&amp;quot;-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Port 2375 is not open on the OpenStack configuration, so this is not a security issue.&lt;/p&gt;
&lt;p&gt;Then we need to run 2 swarm services in Docker containers, first a distributed key-store listening on port 8500 that is needed for Swarm to store information about all the available nodes, Consul:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker run --restart=always  -d -p 8500:8500 --name=consul progrium/consul -server -bootstrap&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the manager which provides the interface to Docker Swarm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;HUB_LOCAL_IP=$(ip route get 8.8.8.8 | awk &amp;#39;NR==1 {print $NF}&amp;#39;)&lt;/span&gt;
&lt;span class="err"&gt;docker run --restart=always  -d -p 4000:4000 swarm manage -H :4000 --replication --advertise $HUB_LOCAL_IP:4000 consul://$HUB_LOCAL_IP:8500&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sets &lt;code&gt;HUB_LOCAL_IP&lt;/code&gt; to the internal ip of the instance, then starts the Manager container.&lt;/p&gt;
&lt;p&gt;We are running both with automatic restarting, so that they are launched again in case of failure or after reboot.&lt;/p&gt;
&lt;p&gt;You can check if the containers are running with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker ps -a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then you can check if connection works with Docker Swarm on port 4000:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker -H :4000 ps -a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check the Docker documentation for a more robust setup with multiple Consul services and a backup Manager.&lt;/p&gt;
&lt;h3&gt;Setup Jupyterhub&lt;/h3&gt;
&lt;p&gt;Following the work by Jess Hamrick for the &lt;a href="https://github.com/compmodels/jupyterhub"&gt;compmodels Jupyterhub deployment&lt;/a&gt;, we can get the &lt;code&gt;jupyterhub_config.py&lt;/code&gt; from &lt;a href="https://gist.github.com/zonca/83d222df8d0b9eaebd02b83faa676753"&gt;https://gist.github.com/zonca/83d222df8d0b9eaebd02b83faa676753&lt;/a&gt; and copy them into the home of the ubuntu user.&lt;/p&gt;
&lt;h3&gt;Share users home via NFS&lt;/h3&gt;
&lt;p&gt;We have now a distributed system and we need a central location to store the home folders of the users, so that even if they happen to get containers on different server, they can still access their files.&lt;/p&gt;
&lt;p&gt;Install NFS with the package manager:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo apt-get install nfs-kernel-server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;edit &lt;code&gt;/etc/exports&lt;/code&gt;, add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;/home    *(rw,sync,no_root_squash)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ports are not open in the NFS configuration.&lt;/p&gt;
&lt;h2&gt;Setup networking&lt;/h2&gt;
&lt;p&gt;Before preparing a node, create a new security group under Compute -&amp;gt; Access &amp;amp; Security and name it &lt;code&gt;swarm_group&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We need to be able to have open traffic between the &lt;code&gt;swarmsecgroup&lt;/code&gt; and the group of the Jupyterhub instance, &lt;code&gt;jupyterhubsecgroup&lt;/code&gt; in my previous tutorial. So in the new &lt;code&gt;swarmsecgroup&lt;/code&gt;, add this rule: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add Rule&lt;/li&gt;
&lt;li&gt;Rule: ALL TCP&lt;/li&gt;
&lt;li&gt;Direction: Ingress&lt;/li&gt;
&lt;li&gt;Remote: Security Group&lt;/li&gt;
&lt;li&gt;Security Group: &lt;code&gt;jupyterhubsecgroup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add another rule replacing Ingress with Egress.
Now open the &lt;code&gt;jupyterhubsecgroup&lt;/code&gt; group and add the same 2 rules, just make sure to choose as target "Security Group" &lt;code&gt;swarmsecgroup&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On the &lt;code&gt;swarmsecgroup&lt;/code&gt; also add a Rule for SSH traffic from any source choosing CIDR and 0.0.0.0/0, you can disable this after having executed the configuration.&lt;/p&gt;
&lt;h2&gt;Setup the Docker Swarm nodes&lt;/h2&gt;
&lt;h3&gt;Launch a plain Ubuntu instance&lt;/h3&gt;
&lt;p&gt;Launch a new instance, all it &lt;code&gt;swarmnode&lt;/code&gt;, choose the size depending on your requirements, and then choose "Boot from image" and get Ubuntu 14.04 LTS (16.04 should work as well, but I haven't yet tested it). Remember to choose a Key Pair under Access &amp;amp; Security and assign the Security Group &lt;code&gt;swarmsecgroup&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Temporarily add a floating IP to this instance in order to SSH into it, see my first tutorial for more details.&lt;/p&gt;
&lt;h3&gt;Setup Docker Swarm&lt;/h3&gt;
&lt;p&gt;First install Docker engine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo apt update&lt;/span&gt;
&lt;span class="err"&gt;sudo apt install apt-transport-https ca-certificates&lt;/span&gt;
&lt;span class="err"&gt;sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D&lt;/span&gt;
&lt;span class="err"&gt;echo &amp;quot;deb https://apt.dockerproject.org/repo ubuntu-trusty main&amp;quot; | sudo tee /etc/apt/sources.list.d/docker.list &lt;/span&gt;
&lt;span class="err"&gt;sudo apt update&lt;/span&gt;
&lt;span class="err"&gt;sudo apt install -y docker-engine&lt;/span&gt;
&lt;span class="err"&gt;sudo usermod -aG docker ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then make the same edit we did on the hub, edit &lt;code&gt;/etc/init/docker.conf&lt;/code&gt; and replace &lt;code&gt;DOCKER_OPTS=&lt;/code&gt; in the &lt;code&gt;start&lt;/code&gt; section with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;DOCKER_OPTS=&amp;quot;-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart Docker with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo service docker restart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run the container that interfaces with Swarm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;HUB_LOCAL_IP=10.XX.XX.XX&lt;/span&gt;
&lt;span class="err"&gt;NODE_LOCAL_IP=$(ip route get 8.8.8.8 | awk &amp;#39;NR==1 {print $NF}&amp;#39;)&lt;/span&gt;
&lt;span class="err"&gt;docker run --restart=always -d swarm join --advertise=$NODE_LOCAL_IP:2375 consul://$HUB_LOCAL_IP:8500&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copy the address of the Jupyterhub server in the &lt;code&gt;HUB_LOCAL_IP&lt;/code&gt; variable.&lt;/p&gt;
&lt;h3&gt;Setup mounting the home filesystem&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo apt-get install autofs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;add in &lt;code&gt;/etc/auto.master&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;/home         /etc/auto.home&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;create &lt;code&gt;/etc/auto.home&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;echo &amp;quot;* $HUB_LOCAL_IP:/home/&amp;amp;&amp;quot; | sudo tee /etc/auto.home&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;using the internal IP of the hub.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo service autofs restart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;verify by doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ls /home/ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ls /home/training01&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you should see the same files that were on the Jupyterhub server.&lt;/p&gt;
&lt;h3&gt;Create users&lt;/h3&gt;
&lt;p&gt;As we are using system users and mounting the home filesystem it is important that users have the same UID on all nodes, so we are going to run on the node the same script we ran on the Jupyterhub server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt; bash create_users.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Test Jupyterhub&lt;/h3&gt;
&lt;p&gt;Login on the Jupyterhub instance with 2 or more different users, then check on the console of the Hub that the containers were launched on the &lt;code&gt;swarmnode&lt;/code&gt; instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt; docker -H :4000 ps -a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Create more nodes&lt;/h2&gt;
&lt;p&gt;Now that we created a fully functioning node we can clone it to create more to accomodate more users.&lt;/p&gt;
&lt;h3&gt;Create a snapshot of the node&lt;/h3&gt;
&lt;p&gt;First we need to delete all Docker containers, ssh into the &lt;code&gt;swarmnode&lt;/code&gt; and execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt; docker rm -f $(docker ps -a -q)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Docker has a unique identifying key, we need to remove that so that it will be regenerated by the clones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo service docker stop&lt;/span&gt;
&lt;span class="err"&gt;sudo rm /etc/docker/key.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then from Compute-&amp;gt;Instances choose "Create Snapshot", call it &lt;code&gt;swarmnodeimage&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Launch other nodes&lt;/h3&gt;
&lt;p&gt;Click on Launch instance-&amp;gt;"Boot from Snapshot"-&amp;gt;&lt;code&gt;swarmnodeimage&lt;/code&gt;, choose the &lt;code&gt;swarmnodesecgroup&lt;/code&gt; Security Group. Choose any number of instances you need.&lt;/p&gt;
&lt;p&gt;Each node will need to launch the Swarm container with its own local ip, not the same as our first node. Therefore we need to use the "Post Creation"-&amp;gt;"Direct Input" and add this script: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;HUB_LOCAL_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.XX.XX.XX
&lt;span class="nv"&gt;NODE_LOCAL_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ip route get &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8 &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;NR==1 {print $NF}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
docker run --restart&lt;span class="o"&gt;=&lt;/span&gt;always -d swarm join --advertise&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$NODE_LOCAL_IP&lt;/span&gt;:2375 consul://&lt;span class="nv"&gt;$HUB_LOCAL_IP&lt;/span&gt;:8500
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;HUB_LOCAL_IP&lt;/code&gt; is the internal network IP address of the Jupyterhub instance and &lt;code&gt;NODE_LOCAL_IP&lt;/code&gt; will be filled with the IP of the OpenStack image just created.&lt;/p&gt;
&lt;p&gt;See for example Jupyterhub with 3 remote Swarm nodes running containers for 4 training users:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker -H :4000 ps -a
CONTAINER ID        IMAGE                                     COMMAND                  CREATED              STATUS              PORTS                         NAMES
60189f208df2        zonca/jupyterhub-datascience-systemuser   &lt;span class="s2"&gt;&amp;quot;tini -- sh /srv/sing&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;11&lt;/span&gt; seconds ago       Up &lt;span class="m"&gt;7&lt;/span&gt; seconds        &lt;span class="m"&gt;10&lt;/span&gt;.128.1.28:32769-&amp;gt;8888/tcp   swarmnodes-1/jupyter-training04
1d7b05caedb1        zonca/jupyterhub-datascience-systemuser   &lt;span class="s2"&gt;&amp;quot;tini -- sh /srv/sing&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;36&lt;/span&gt; seconds ago       Up &lt;span class="m"&gt;32&lt;/span&gt; seconds       &lt;span class="m"&gt;10&lt;/span&gt;.128.1.27:32768-&amp;gt;8888/tcp   swarmnodes-2/jupyter-training03
733c5ff0a5ed        zonca/jupyterhub-datascience-systemuser   &lt;span class="s2"&gt;&amp;quot;tini -- sh /srv/sing&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;58&lt;/span&gt; seconds ago       Up &lt;span class="m"&gt;54&lt;/span&gt; seconds       &lt;span class="m"&gt;10&lt;/span&gt;.128.1.29:32768-&amp;gt;8888/tcp   swarmnodes-3/jupyter-training02
282abce201dd        zonca/jupyterhub-datascience-systemuser   &lt;span class="s2"&gt;&amp;quot;tini -- sh /srv/sing&amp;quot;&lt;/span&gt;   About a minute ago   Up About a minute   &lt;span class="m"&gt;10&lt;/span&gt;.128.1.28:32768-&amp;gt;8888/tcp   swarmnodes-1/jupyter-training01
29b2d394fab9        swarm                                     &lt;span class="s2"&gt;&amp;quot;/swarm join --advert&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;13&lt;/span&gt; minutes ago       Up &lt;span class="m"&gt;13&lt;/span&gt; minutes       &lt;span class="m"&gt;2375&lt;/span&gt;/tcp                      swarmnodes-2/romantic_easley
8fd3d32fe849        swarm                                     &lt;span class="s2"&gt;&amp;quot;/swarm join --advert&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;13&lt;/span&gt; minutes ago       Up &lt;span class="m"&gt;13&lt;/span&gt; minutes       &lt;span class="m"&gt;2375&lt;/span&gt;/tcp                      swarmnodes-3/clever_mestorf
1ae073f7b78b        swarm                                     &lt;span class="s2"&gt;&amp;quot;/swarm join --advert&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;13&lt;/span&gt; minutes ago       Up &lt;span class="m"&gt;13&lt;/span&gt; minutes       &lt;span class="m"&gt;2375&lt;/span&gt;/tcp                      swarmnodes-1/jovial_goldwasser
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Where to go from here&lt;/h2&gt;
&lt;p&gt;At this level the deployment is quite complicated, so it is probably worth automating it with an &lt;code&gt;ansible&lt;/code&gt; playbook, that will be the subject of the next blog post, I think the result will be a simplified version of &lt;a href="https://github.com/compmodels/jupyterhub-deploy"&gt;Jess Hamrick's compmodels deployment&lt;/a&gt;. Still, I recommend starting with a manual setup to understand how the different pieces work.&lt;/p&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;If &lt;code&gt;docker -H :4000 ps -a&lt;/code&gt; gives the error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Error response from daemon: No elected primary cluster manager&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it means the Consul container is broken, remove it and create it again.&lt;/p&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Thanks to Jess Hamrick for sharing the setup of her &lt;a href="https://github.com/compmodels"&gt;compmodel class on Github&lt;/a&gt;, the Jupyter team for releasing such great tools and Kevin Coakley and the rest of the &lt;a href="http://www.sdsc.edu/services/it/cloud.html"&gt;SDSC Cloud&lt;/a&gt; team for OpenStack support and resources.&lt;/p&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyterhub"></category><category term="sdsc"></category></entry><entry><title>Quick Jupyterhub deployment for workshops with pre-built image</title><link href="http://zonca.github.io/2016/04/jupyterhub-image-sdsc-cloud.html" rel="alternate"></link><published>2016-04-28T12:00:00-07:00</published><updated>2016-04-28T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2016-04-28:/2016/04/jupyterhub-image-sdsc-cloud.html</id><summary type="html">&lt;p&gt;This tutorial explains how to use a OpenStack image I already built to quickly deploy a Jupyterhub Virtual Machine that can provide a good initial setup for a workshop, providing students access to Python 2/3, Julia, R, file editor and terminal with bash.&lt;/p&gt;
&lt;p&gt;For details about building the instance …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This tutorial explains how to use a OpenStack image I already built to quickly deploy a Jupyterhub Virtual Machine that can provide a good initial setup for a workshop, providing students access to Python 2/3, Julia, R, file editor and terminal with bash.&lt;/p&gt;
&lt;p&gt;For details about building the instance yourself for more customization, see the full tutorial at &lt;a href="http://zonca.github.io/2016/04/jupyterhub-sdsc-cloud.html"&gt;http://zonca.github.io/2016/04/jupyterhub-sdsc-cloud.html&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Create a Virtual Machine in OpenStack with the pre-built image&lt;/h2&gt;
&lt;p&gt;Follow the 3 steps at &lt;a href="http://zonca.github.io/2016/04/jupyterhub-sdsc-cloud.html&amp;gt;"&gt;the step by step tutorial&lt;/a&gt; under "Create a Virtual Machine in OpenStack":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network setup&lt;/li&gt;
&lt;li&gt;Create a new Virtual Machine: here instead of choosing the base &lt;code&gt;ubuntu&lt;/code&gt; image, choose &lt;code&gt;jupyterhub_docker&lt;/code&gt;, also you can choose any size, I recommend to start with a &lt;code&gt;c1.large&lt;/code&gt; for experimentation, you can then resize it later to a more powerful instance depending on the needs of your workshop&lt;/li&gt;
&lt;li&gt;Give public IP to the instance&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Connect to Jupyterhub&lt;/h2&gt;
&lt;p&gt;The Jupyterhub instance is ready! Just open your browser and connect to the floating IP of the instance you just created.&lt;/p&gt;
&lt;p&gt;The browser should show a security error related to the fact that the pre-installed SSL certificate is not trusted, click on "Advanced properties" and choose to connect anyway, we'll see later how to fix this.&lt;/p&gt;
&lt;p&gt;You already have 50 training users, named &lt;code&gt;training01&lt;/code&gt; to &lt;code&gt;training50&lt;/code&gt;, all with the same password &lt;code&gt;jupyterhubSDSC&lt;/code&gt; (see below how to change it). Check that you can login and create a notebook.&lt;/p&gt;
&lt;h2&gt;Administer the Jupyterhub instance&lt;/h2&gt;
&lt;p&gt;Login into the Virtual Machine with &lt;code&gt;ssh -i jupyterhub.pem ubuntu@xxx.xxx.xxx.xxx&lt;/code&gt; using the key file and the public IP setup in the previous steps.&lt;/p&gt;
&lt;p&gt;To get rid of the annoying "unable to resolve host" warning, add the hostname of the machine (check by running hostname) to &lt;code&gt;/etc/hosts&lt;/code&gt;, i.e. the first line should become something like &lt;code&gt;127.0.0.1 localhost jupyterhub&lt;/code&gt; if jupyterhub is the hostname&lt;/p&gt;
&lt;h3&gt;Change password/add more users&lt;/h3&gt;
&lt;p&gt;In the home folder of the &lt;code&gt;ubuntu&lt;/code&gt; users, there is a file named &lt;code&gt;create_users.sh&lt;/code&gt;, edit it to change the &lt;code&gt;PASSWORD&lt;/code&gt; variable and the number of users from &lt;code&gt;50&lt;/code&gt; to a larger number. Then run it with &lt;code&gt;bash create_users.sh&lt;/code&gt;. Training users &lt;strong&gt;cannot SSH&lt;/strong&gt; into the machine.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;sudo passwd trainingXX&lt;/code&gt; to change the password of a single user.&lt;/p&gt;
&lt;h3&gt;Setup a domain (needed for SSL certificate)&lt;/h3&gt;
&lt;p&gt;If you do not know how to get a domain name, here some options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you can generally request a subdomain name from your institution, see for example &lt;a href="http://blink.ucsd.edu/technology/help-desk/sysadmin-resources/domain.html#Register-your-domain-name"&gt;UCSD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;if you own a domain, go in the DNS settings, add a record of type A to a subdomain, like &lt;code&gt;jupyterhub.yourdomain.com&lt;/code&gt; that points to the floating IP of the Jupyterhub instance&lt;/li&gt;
&lt;li&gt;you can get a free dynamic dns at websites like &lt;a href="https://noip.com"&gt;noip.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In each case you need to have a DNS record of type A that points to the floating IP of the Jupyterhub instance.&lt;/p&gt;
&lt;h3&gt;Setup a SSL Certificate&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://letsencrypt.org/"&gt;Letsencrypt&lt;/a&gt; provides free SSL certificates by using a command line client.&lt;/p&gt;
&lt;p&gt;SSH into the server, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone https://github.com/letsencrypt/letsencrypt&lt;/span&gt;
&lt;span class="err"&gt;cd letsencrypt&lt;/span&gt;
&lt;span class="err"&gt;sudo service nginx stop&lt;/span&gt;
&lt;span class="err"&gt;./letsencrypt-auto certonly --standalone -d jupyterhubdeploy.ddns.net&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Follow instructions at the terminal to obtain a certificate&lt;/p&gt;
&lt;p&gt;Now open the nginx configuration file: &lt;code&gt;sudo vim /etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And modify the SSL certificate lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ssl_certificate /etc/letsencrypt/live/yoursub.domain.edu/cert.pem;&lt;/span&gt;
&lt;span class="err"&gt;ssl_certificate_key /etc/letsencrypt/live/yoursub.domain.edu/privkey.pem;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Start NGINX:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo service nginx start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Connect again to Jupyterhub and check that your browser correctly detects that the HTTPS connection is safe.&lt;/p&gt;
&lt;h2&gt;Comments? Suggestions?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://twitter.com/andreazonca"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Email &lt;code&gt;zonca&lt;/code&gt; on the domain &lt;code&gt;sdsc.edu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyterhub"></category><category term="sdsc"></category></entry><entry><title>Deploy Jupyterhub on a Virtual Machine for a Workshop</title><link href="http://zonca.github.io/2016/04/jupyterhub-sdsc-cloud.html" rel="alternate"></link><published>2016-04-16T12:00:00-07:00</published><updated>2016-04-16T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2016-04-16:/2016/04/jupyterhub-sdsc-cloud.html</id><summary type="html">&lt;p&gt;This tutorial describes the steps to install a Jupyterhub instance on a single machine suitable for hosting a workshop, suitable for having people login with training accounts on Jupyter Notebooks running Python 2/3, R, Julia with also Terminal access on Docker containers.
Details about the setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jupyterhub installed with …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This tutorial describes the steps to install a Jupyterhub instance on a single machine suitable for hosting a workshop, suitable for having people login with training accounts on Jupyter Notebooks running Python 2/3, R, Julia with also Terminal access on Docker containers.
Details about the setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jupyterhub installed with Anaconda directly on the host, proxied by NGINX under HTTPS with self-signed certificate&lt;/li&gt;
&lt;li&gt;Login with Linux account credentials created previously by the administrator, data in /home are persistent across sessions&lt;/li&gt;
&lt;li&gt;Each user runs in a separated Docker container with access to Python 2, Python 3, R and Julia kernels, they can also open the Notebook editor and the terminal&lt;/li&gt;
&lt;li&gt;Using a single machine you have to consider that the biggest constraint is going to be memory usage, as a rule of thumb consider 100-200 MB/user plus 5x-10x the amount of data you are loading from disk, depending on the kind of analysis. For a multi-node setup you need to look into Docker Swarm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am using the OpenStack deployment at the San Diego Supercomputer Center, &lt;a href="http://www.sdsc.edu/services/it/cloud.html"&gt;SDSC Cloud&lt;/a&gt;, AWS deployments should just replace the first section on Creating a VM and setting up Networking, see &lt;a href="https://github.com/jupyterhub/jupyterhub/wiki/Deploying-JupyterHub-on-AWS"&gt;the Jupyterhub wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you intend to run on SDSC Cloud, I have a pre-built image of this deployment you can setup and run quickly, see &lt;a href="http://zonca.github.io/2016/04/jupyterhub-image-sdsc-cloud.html"&gt;see my followup tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Create a Virtual Machine in OpenStack&lt;/h1&gt;
&lt;p&gt;First of all we need to launch a new Virtual Machine and configure the network.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Login to the SDSC Cloud OpenStack dashboard&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Network setup&lt;/h2&gt;
&lt;p&gt;Jupyterhub will be proxied to the standard HTTPS port by NGINX and we also want to redirect HTTP to HTTPS, so we open those ports, then SSH for the administrators to login and a custom TCP rule in order for the Docker containers to be able to connect to the Jupyterhub hub running on port 8081, so we are opening that port just to the subnet that is running the Docker containers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compute -&amp;gt; Access &amp;amp; Security -&amp;gt; Security Groups -&amp;gt; Create Security Group and name it &lt;code&gt;jupyterhubsecgroup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click on Manage Rules &lt;/li&gt;
&lt;li&gt;Click on add rule, choose the HTTP rule and click add&lt;/li&gt;
&lt;li&gt;Repeat the last step with HTTPS and SSH&lt;/li&gt;
&lt;li&gt;Click on add rule again, choose Custom TCP Rule, set port 8081 and set CIDR 172.17.0.0/24 (this is needed so that the containers can connect to the hub)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Create a new Virtual Machine&lt;/h2&gt;
&lt;p&gt;We choose Ubuntu here, also other distributions should work fine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compute -&amp;gt; Access &amp;amp; Security -&amp;gt; Key Pairs -&amp;gt; Create key pair, name it &lt;code&gt;jupyterhub&lt;/code&gt; and download it to your local machine&lt;/li&gt;
&lt;li&gt;Instances -&amp;gt; Launch Instance, Choose a name, Choose "Boot from image" in Boot Source and Ubuntu as Image name, Choose any size, depending on the number of users (TODO add link to Jupyterhub docs)&lt;/li&gt;
&lt;li&gt;Under "Access &amp;amp; Security" choose Key Pair &lt;code&gt;jupyterhub&lt;/code&gt; and Security Groups &lt;code&gt;jupyterhubsecgroup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Launch&lt;/code&gt; to create the instance&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Give public IP to the instance&lt;/h2&gt;
&lt;p&gt;By default in SDSC Cloud machines do not have a public IP.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compute -&amp;gt; Access &amp;amp; Sewcurity -&amp;gt; Floating IPs -&amp;gt; Allocate IP To Project, "Allocate IP" to request a public IP&lt;/li&gt;
&lt;li&gt;Click on the "Associate" button of the IP just requested and under "Port to be associated"  choose the instance just created&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Setup Jupyterhub in the Virtual Machine&lt;/h1&gt;
&lt;p&gt;In this section we will install and configure Jupyterhub and NGINX to run on the Virtual Machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;login into the Virtual Machine with &lt;code&gt;ssh -i jupyterhub.pem ubuntu@xxx.xxx.xxx.xxx&lt;/code&gt; using the key file and the public IP setup in the previous steps&lt;/li&gt;
&lt;li&gt;add the hostname of the machine (check by running &lt;code&gt;hostname&lt;/code&gt;) to &lt;code&gt;/etc/hosts&lt;/code&gt;, i.e. the first line should become something like &lt;code&gt;127.0.0.1 localhost jupyterhub&lt;/code&gt; if &lt;code&gt;jupyterhub&lt;/code&gt; is the hostname&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setup Jupyterhub&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="c1"&gt;--no-check-certificate https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh&lt;/span&gt;
 &lt;span class="n"&gt;bash&lt;/span&gt; &lt;span class="n"&gt;Miniconda3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
 &lt;span class="o"&gt;```&lt;/span&gt;

 &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="k"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="k"&gt;modify&lt;/span&gt; &lt;span class="n"&gt;PATH&lt;/span&gt;

 &lt;span class="o"&gt;```&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;nodejs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;legacy&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt; &lt;span class="n"&gt;configurable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;
&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;traitlets&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt; &lt;span class="n"&gt;jinja2&lt;/span&gt; &lt;span class="n"&gt;sqlalchemy&lt;/span&gt; 
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;jupyterhub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For authentication to work, the &lt;code&gt;ubuntu&lt;/code&gt; user needs to be able to read the &lt;code&gt;/etc/shadow&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo adduser ubuntu shadow&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setup the web server&lt;/h2&gt;
&lt;p&gt;We will use the NGINX web server to proxy Jupyterhub and handle HTTPS for us, this is recommended for deployments on the public internet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo apt install nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;SSL Certificate&lt;/strong&gt;: Optionally later, once we have assigned a domain to the Virtual Machine, we can install &lt;code&gt;letsencrypt&lt;/code&gt; and get a real certificate, &lt;a href="http://zonca.github.io/2016/04/jupyterhub-image-sdsc-cloud.html"&gt;see my followup tutorial&lt;/a&gt;, for simplicity here we are just using self-signed certificates that will give warnings on the first time users connect to the server, but still will keep the traffic encrypted.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo mkdir /etc/nginx/ssl&lt;/span&gt;
&lt;span class="err"&gt;sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Get &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; from https://gist.github.com/zonca/08c413a37401bdc9d2a7f65a7af44462&lt;/p&gt;
&lt;h1&gt;Setup Docker Spawner&lt;/h1&gt;
&lt;p&gt;By default Jupyterhub runs notebooks as processes owned by each system user, for more security and isolation, we want Notebook to run in Docker containers, which are something like lightweight Virtual Machines running inside our server.&lt;/p&gt;
&lt;h2&gt;Install Docker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Source: https://docs.docker.com/engine/installation/linux/ubuntulinux/#prerequisites&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo apt update&lt;/span&gt;
&lt;span class="err"&gt;sudo apt install apt-transport-https ca-certificates&lt;/span&gt;
&lt;span class="err"&gt;sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D&lt;/span&gt;
&lt;span class="err"&gt;echo &amp;quot;deb https://apt.dockerproject.org/repo ubuntu-trusty main&amp;quot; | sudo tee /etc/apt/sources.list.d/docker.list &lt;/span&gt;
&lt;span class="err"&gt;sudo apt update&lt;/span&gt;
&lt;span class="err"&gt;sudo apt install docker-engine&lt;/span&gt;
&lt;span class="err"&gt;sudo usermod -aG docker ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Logout and login again for the group to take effect&lt;/p&gt;
&lt;h2&gt;Install and configure DockerSpawner&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pip install dockerspawner&lt;/span&gt;
&lt;span class="err"&gt;docker pull jupyter/systemuser&lt;/span&gt;
&lt;span class="err"&gt;conda install ipython jupyter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create &lt;code&gt;jupyterhub_config.py&lt;/code&gt; in the home folder of the ubuntu user with this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;confirm_no_ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawner_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dockerspawner.SystemUserSpawner&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# The docker instances need access to the Hub, so the default loopback port doesn&amp;#39;t work:&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.utils.localinterfaces&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;public_ips&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hub_ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;public_ips&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Connect to Jupyterhub&lt;/h1&gt;
&lt;p&gt;From the home folder of the &lt;code&gt;ubuntu&lt;/code&gt; user, type &lt;code&gt;jupyterhub&lt;/code&gt; to launch the Jupyterhub process, see below how to start it automatically at boot. Use CTRL-C to stop it.&lt;/p&gt;
&lt;p&gt;Open a browser and connect to the floating IP you set for your instance, this should redirect to the https, click "Advanced" in the warning about safety due to the self signed SSL certificate and login with the training credentials.&lt;/p&gt;
&lt;p&gt;Instead of using the IP, you can use any domain that points to that same IP with a DNS record of type A or get a dymanic DNS for free on a website like http://noip.com.
Once you have a custom domain, you can configure letsencrypt to have a proper HTTPS certificate so that users do not get any warning when connecting to the instance. I will add this to the optional steps below.&lt;/p&gt;
&lt;h1&gt;Optional: Automatically start jupyterhub at boot&lt;/h1&gt;
&lt;p&gt;Save https://gist.github.com/zonca/aaeaf3c4e7339127b482d759866e5f39 as &lt;code&gt;/etc/init.d/jupyterhub&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo chmod +x /etc/init.d/jupyterhub&lt;/span&gt;
&lt;span class="err"&gt;sudo service jupyterhub start&lt;/span&gt;
&lt;span class="err"&gt;sudo update-rc.d jupyterhub defaults&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Optional: Create training user accounts&lt;/h1&gt;
&lt;p&gt;Add user accounts on Jupyterhub creating standard Linux users with &lt;code&gt;adduser&lt;/code&gt; interactively or with a batch script.&lt;/p&gt;
&lt;p&gt;For example the following batch script creates 10 users all with the same password:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;samepasswordforallusers
&lt;span class="nv"&gt;NUMBER_OF_USERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; n in &lt;span class="sb"&gt;`&lt;/span&gt;seq -f &lt;span class="s2"&gt;&amp;quot;%02g&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;$NUMBER_OF_USERS&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; creating user training&lt;span class="nv"&gt;$n&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; training&lt;span class="nv"&gt;$n&lt;/span&gt;:&lt;span class="nv"&gt;$PASSWORD&lt;/span&gt;::::/home/training&lt;span class="nv"&gt;$n&lt;/span&gt;:/bin/bash &lt;span class="p"&gt;|&lt;/span&gt; sudo newusers
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Also add &lt;code&gt;AllowUsers ubuntu&lt;/code&gt; to &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; so that training users cannot SSH into the host machine.&lt;/p&gt;
&lt;h1&gt;Optional: Add the R and Julia kernels&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SSH into the instance&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/jupyter/dockerspawner&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd dockerspawner&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modify the file &lt;code&gt;singleuser/Dockerfile&lt;/code&gt;, replace &lt;code&gt;FROM jupyter/scipy-notebook&lt;/code&gt; with &lt;code&gt;FROM jupyter/datascience-notebook&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker build -t datascience-singleuser singleuser&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Modify the file &lt;code&gt;systemuser/Dockerfile&lt;/code&gt;, replace &lt;code&gt;FROM jupyter/singleuser&lt;/code&gt; with &lt;code&gt;FROM datascience-singleuser&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;docker build -t datascience-systemuser systemuser&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally in &lt;code&gt;jupyterhub_config.py&lt;/code&gt;, select the new docker image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;c.DockerSpawner.container_image = &amp;quot;datascience-systemuser&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyterhub"></category><category term="sdsc"></category></entry><entry><title>Use your own Python installation (kernel) in Jupyterhub</title><link href="http://zonca.github.io/2015/10/use-own-python-in-jupyterhub.html" rel="alternate"></link><published>2015-10-05T12:00:00-07:00</published><updated>2015-10-05T12:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2015-10-05:/2015/10/use-own-python-in-jupyterhub.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Updated February 2017&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You have access to a Jupyterhub server but the Python installation provided does not satisfy your needs,
how to use your own?&lt;/p&gt;
&lt;h2&gt;Install Anaconda&lt;/h2&gt;
&lt;p&gt;If you haven't already your own Python installation on the Jupyterhub server you have access to, you can install Anaconda in your home …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Updated February 2017&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You have access to a Jupyterhub server but the Python installation provided does not satisfy your needs,
how to use your own?&lt;/p&gt;
&lt;h2&gt;Install Anaconda&lt;/h2&gt;
&lt;p&gt;If you haven't already your own Python installation on the Jupyterhub server you have access to, you can install Anaconda in your home folder. I assume here you have a permanent home folder on the server.&lt;/p&gt;
&lt;p&gt;In order to type commands, you can either
get a Jupyterhub Terminal, or run in the IPython notebook with &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!wget https://repo.continuum.io/archive/Anaconda3-2.3.0-Linux-x86_64.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!bash ./Anacon*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Create a kernel file for Jupyterhub&lt;/h2&gt;
&lt;p&gt;You probably already know you can have Python 2 and Python 3 kernels on the same Jupyter notebook installation. In the same way you can create your own &lt;code&gt;KernelSpec&lt;/code&gt; that launches instead another Python installation.&lt;/p&gt;
&lt;p&gt;IPython can automatically create a &lt;code&gt;KernelSpec&lt;/code&gt; for you, from the IPython notebook, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;!~/anaconda3/bin/ipython kernel install --user --name anaconda&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In case your path is different, just insert the full path to &lt;code&gt;ipython&lt;/code&gt; from the Python installation you would like to use.&lt;/p&gt;
&lt;p&gt;This will create a file &lt;code&gt;kernel.json&lt;/code&gt; in &lt;code&gt;~/.local/share/jupyter/kernels/anaconda&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also add KernelSpecs for other &lt;code&gt;conda&lt;/code&gt; environments doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sx"&gt;!source activate environmentname&lt;/span&gt;
&lt;span class="sx"&gt;!ipython kernel install --user --name environmentname&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Launch a Notebook&lt;/h2&gt;
&lt;p&gt;Go back to the Jupyterhub dashboard, reload the page, now you should have another option in the &lt;code&gt;New&lt;/code&gt; menu that says &lt;code&gt;My Anaconda&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to use your new kernel with an existing notebook, click on the notebook file in the dashboard, it will launch with the default kernel, then you can change kernel from the top menu &lt;code&gt;Kernel&lt;/code&gt; &amp;gt; &lt;code&gt;Change kernel&lt;/code&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyterhub"></category></entry><entry><title>IPython/Jupyter notebook setup on NERSC Edison</title><link href="http://zonca.github.io/2015/09/ipython-jupyter-notebook-nersc-edison.html" rel="alternate"></link><published>2015-09-24T20:00:00-07:00</published><updated>2015-09-24T20:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2015-09-24:/2015/09/ipython-jupyter-notebook-nersc-edison.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This tutorial explains the setup to run an IPython Notebook on a computing node on the supercomputer Edison at NERSC and forward its port encrypted with SSH to the browser on a local laptop.
This setup is a bit more complicated than other supercomputers, i.e. see &lt;a href="http://zonca.github.io/2015/09/ipython-jupyter-notebook-sdsc-comet.html"&gt;my tutorial …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This tutorial explains the setup to run an IPython Notebook on a computing node on the supercomputer Edison at NERSC and forward its port encrypted with SSH to the browser on a local laptop.
This setup is a bit more complicated than other supercomputers, i.e. see &lt;a href="http://zonca.github.io/2015/09/ipython-jupyter-notebook-sdsc-comet.html"&gt;my tutorial for Comet&lt;/a&gt; for 2 reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edison's computing nodes run a stripped down OS, with no support for SSH, unless you activate &lt;a href="https://www.nersc.gov/users/computational-systems/hopper/cluster-compatibility-mode/"&gt;Cluster Compatibility Mode&lt;/a&gt; (CCM) &lt;/li&gt;
&lt;li&gt;On edison you generally don't have direct access to a computing node, even if you request an interactive node you actually have access to an intermediary node (MOM node), from there &lt;code&gt;aprun&lt;/code&gt; sends a job for execution on the computing node.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Quick reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install IPython notebook and make sure it is in the path, I recommend to install Anaconda 64bit in your home folder or on scratch.&lt;/li&gt;
&lt;li&gt;Make sure you can ssh passwordless within Edison, i.e. &lt;code&gt;ssh edison&lt;/code&gt; from Edison  login node works without password&lt;/li&gt;
&lt;li&gt;Create a folder &lt;code&gt;notebook&lt;/code&gt; in your home, get &lt;code&gt;notebook_job.pbs&lt;/code&gt; and &lt;code&gt;launch_notebook_and_tunnel_to_login.sh&lt;/code&gt; from &lt;a href="https://gist.github.com/zonca/357d36347fd5addca8f0"&gt;https://gist.github.com/zonca/357d36347fd5addca8f0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Change the port number and customize options (duration)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qsub notebook_job.pbs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;From laptop, launch &lt;code&gt;bash tunnel_laptop_edisonlogin.sh ##&lt;/code&gt; from &lt;a href="https://gist.github.com/zonca/5f8b5ccb826a774d3f89"&gt;https://gist.github.com/zonca/5f8b5ccb826a774d3f89&lt;/a&gt;, where &lt;code&gt;##&lt;/code&gt; is the edison login number in 2 digits, like &lt;code&gt;03&lt;/code&gt;. First you need to modify the port number.&lt;/li&gt;
&lt;li&gt;From laptop, open browser and connect to &lt;code&gt;http://localhost:YOURPORT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Detailed walkthrough&lt;/h2&gt;
&lt;h3&gt;One time setup on Edison&lt;/h3&gt;
&lt;p&gt;Make sure that &lt;code&gt;ipython notebook&lt;/code&gt; works on a login node, one option is to install 
Anaconda 64bit from http://continuum.io/downloads#py34. Choose Python 3.&lt;/p&gt;
&lt;p&gt;You need to be able to SSH from a node to another node on Edison with no need of a password. Create a new SSH certificate with &lt;code&gt;ssh-keygen&lt;/code&gt;, hit enter to keep all default options, DO NOT ENTER A PASSWORD. Then use &lt;code&gt;ssh-copy-id edison.nersc.gov&lt;/code&gt;, enter your password to make sure the key is copied in the authorized hosts.
Now you can check it works by executing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ssh edison.nersc.gov&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;from the login node and make sure you are NOT asked for your password.&lt;/p&gt;
&lt;h3&gt;Configure the script for TORQUE and submit the job&lt;/h3&gt;
&lt;p&gt;Create a &lt;code&gt;notebook&lt;/code&gt; folder on your home on Edison.&lt;/p&gt;
&lt;p&gt;Copy &lt;code&gt;notebook_job.pbs&lt;/code&gt; and &lt;code&gt;launch_notebook_and_tunnel_to_login.sh&lt;/code&gt; from &lt;a href="https://gist.github.com/zonca/357d36347fd5addca8f0"&gt;https://gist.github.com/zonca/357d36347fd5addca8f0&lt;/a&gt; to the &lt;code&gt;notebook&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Change the port number in the &lt;code&gt;launch_notebook_and_tunnel_to_login.sh&lt;/code&gt; script to a port of your choosing between 7000 and 9999, referenced as YOURPORT in the rest of the tutorial. Two users on the same login node on the same port would not be allowed to forward, so try to avoid common port numbers as 8000, 9000, 8080 or 8888.&lt;/p&gt;
&lt;p&gt;Choose a duration of your job, for initial testing better keep 30 minutes so your job starts sooner.&lt;/p&gt;
&lt;p&gt;Submit the job to the scheduler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;qsub notebook_job.pbs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wait for the job to start running, you should see &lt;code&gt;R&lt;/code&gt; in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;qstat -u $USER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script launches an IPython notebook on a computing node and tunnels its port to the login node.&lt;/p&gt;
&lt;p&gt;You can check that everything worked by checking that no errors show up in the &lt;code&gt;notebook.log&lt;/code&gt; file, and that you can access the notebook page with &lt;code&gt;wget&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;wget localhost:YOURPORT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;should download a &lt;code&gt;index.html&lt;/code&gt; file in the current folder, and NOT give an error like "Connection refused".&lt;/p&gt;
&lt;h3&gt;Tunnel the port to your laptop&lt;/h3&gt;
&lt;h4&gt;Linux / MAC&lt;/h4&gt;
&lt;p&gt;Download the &lt;code&gt;tunnel_laptop_edisonlogin.sh&lt;/code&gt; script from &lt;a href="https://gist.github.com/zonca/357d36347fd5addca8f0"&gt;https://gist.github.com/zonca/357d36347fd5addca8f0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Customize the script with your port number and your username.&lt;/p&gt;
&lt;p&gt;Launch &lt;code&gt;bash tunnel_laptop_edisonlogin.sh ##&lt;/code&gt; where &lt;code&gt;##&lt;/code&gt; is the Edison login node you launched the job from in 2 digits, e.g. &lt;code&gt;03&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The script forwards the port from the login node of Edison to your laptop.&lt;/p&gt;
&lt;h4&gt;Windows&lt;/h4&gt;
&lt;p&gt;Install &lt;code&gt;putty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follow tutorial for local port forwarding on &lt;a href="http://howto.ccs.neu.edu/howto/windows/ssh-port-tunneling-with-putty/"&gt;http://howto.ccs.neu.edu/howto/windows/ssh-port-tunneling-with-putty/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set &lt;code&gt;edison##-eth5.nersc.gov&lt;/code&gt; as remote host, where &lt;code&gt;##&lt;/code&gt; is the Edison login node you launched the job from in 2 digits, e.g. &lt;code&gt;03&lt;/code&gt; and set 22 as SSH port&lt;/li&gt;
&lt;li&gt;set YOURPORT as tunnel port, replace both 8080 and 80 in the tutorial with your port number. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Connect to the Notebook&lt;/h3&gt;
&lt;p&gt;Open a browser and type &lt;code&gt;http://localhost:YOURPORT&lt;/code&gt; in the address bar.&lt;/p&gt;
&lt;p&gt;See in the screenshot from my local browser, the &lt;code&gt;hostname&lt;/code&gt; is one of Edison's computing node:&lt;/p&gt;
&lt;p&gt;&lt;img alt="test_edison_screenshot.png" src="/images/test_edison_screenshot.png"&gt;&lt;/p&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Thanks Lisa Gerhardt from NERSC user support to help me understand Edison's configuration.&lt;/p&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyter"></category><category term="ipython-notebook"></category></entry><entry><title>IPython/Jupyter notebook setup on SDSC Comet</title><link href="http://zonca.github.io/2015/09/ipython-jupyter-notebook-sdsc-comet.html" rel="alternate"></link><published>2015-09-17T20:00:00-07:00</published><updated>2015-09-17T20:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2015-09-17:/2015/09/ipython-jupyter-notebook-sdsc-comet.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This tutorial explains the setup to run an IPython Notebook on a computing node on the supercomputer Comet at the San Diego Supercomputer Center and forward the port encrypted with SSH to the browser on a local laptop.&lt;/p&gt;
&lt;h2&gt;Quick reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;module load python scipy&lt;/code&gt; to &lt;code&gt;.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make sure …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This tutorial explains the setup to run an IPython Notebook on a computing node on the supercomputer Comet at the San Diego Supercomputer Center and forward the port encrypted with SSH to the browser on a local laptop.&lt;/p&gt;
&lt;h2&gt;Quick reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;module load python scipy&lt;/code&gt; to &lt;code&gt;.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make sure you can ssh passwordless within comet, i.e. &lt;code&gt;ssh comet.sdsc.edu&lt;/code&gt; from comet  login node works without password&lt;/li&gt;
&lt;li&gt;Get &lt;code&gt;submit_slurm_comet.sh&lt;/code&gt; from &lt;a href="https://gist.github.com/zonca/5f8b5ccb826a774d3f89"&gt;https://gist.github.com/zonca/5f8b5ccb826a774d3f89&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Change the port number and customize options (duration)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sbatch submit_slurm_comet.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remember the login node you are using&lt;/li&gt;
&lt;li&gt;From laptop, use &lt;code&gt;bash tunnel_notebook_comet.sh N&lt;/code&gt; where N is the Comet login number (e.g. 2) from &lt;a href="https://gist.github.com/zonca/5f8b5ccb826a774d3f89"&gt;https://gist.github.com/zonca/5f8b5ccb826a774d3f89&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;From laptop, open browser and connect to &lt;code&gt;http://localhost:YOURPORT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Detailed walkthrough&lt;/h2&gt;
&lt;h3&gt;One time setup on Comet&lt;/h3&gt;
&lt;p&gt;Login into a Comet login node, edit the &lt;code&gt;.bashrc&lt;/code&gt; file in your home folder (with &lt;code&gt;nano .bashrc&lt;/code&gt; for example) and add &lt;code&gt;module load python scipy&lt;/code&gt; at the bottom. This makes sure you always have the Python environment loaded in all your jobs. Logout, log back in, make sure that &lt;code&gt;module list&lt;/code&gt; shows &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;scipy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You need to be able to SSH from a node to another node on comet with no need of a password. Create a new SSH certificate with &lt;code&gt;ssh-keygen&lt;/code&gt;, hit enter to keep all default options, DO NOT ENTER A PASSWORD. Then use &lt;code&gt;ssh-copy-id comet.sdsc.edu&lt;/code&gt;, enter your password to make sure the key is copied in the authorized hosts.
Now you can check it works by executing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ssh comet.sdsc.edu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;from the login node and make sure you are NOT asked for your password.&lt;/p&gt;
&lt;h3&gt;Configure the script for SLURM and submit the job&lt;/h3&gt;
&lt;p&gt;Copy &lt;code&gt;submit_slurm_comet.sh&lt;/code&gt; from &lt;a href="https://gist.github.com/zonca/5f8b5ccb826a774d3f89"&gt;https://gist.github.com/zonca/5f8b5ccb826a774d3f89&lt;/a&gt; on your home on Comet.&lt;/p&gt;
&lt;p&gt;Change the port number in the script to a port of your choosing between 8000 and 9999, referenced as YOURPORT in the rest of the tutorial. Two users on the same login node on the same port would not be allowed to forward, so try to avoid common port numbers as 8000, 9000, 8080 or 8888. Tho&lt;/p&gt;
&lt;p&gt;Choose whether you prefer to use a full node to have access to all 24 cores and 128GB of RAM or if you only need 1 core and 5GB of RAM and change the top of the script accordingly.&lt;/p&gt;
&lt;p&gt;Choose a duration of your job, for initial testing better keep 30 minutes so your job starts straight away.&lt;/p&gt;
&lt;p&gt;Submit the job to the scheduler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sbatch submit_slurm_comet.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wait for the job to start running, you should see &lt;code&gt;R&lt;/code&gt; in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;squeue -u $USER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script launches an IPython notebook on a computing node and tunnels its port to the login node.&lt;/p&gt;
&lt;p&gt;You can check that everything worked by checking that no errors show up in the &lt;code&gt;notebook.log&lt;/code&gt; file, and that you can access the notebook page with &lt;code&gt;wget&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;wget localhost:YOURPORT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;should download a &lt;code&gt;index.html&lt;/code&gt; file in the current folder, and NOT give an error like "Connection refused".&lt;/p&gt;
&lt;p&gt;Check what login node you were using on comet, i.e. the hostname on your terminal on comet, for example &lt;code&gt;comet-ln2&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Tunnel the port to your laptop&lt;/h3&gt;
&lt;h4&gt;Linux / MAC&lt;/h4&gt;
&lt;p&gt;Download the &lt;code&gt;tunnel_notebook_comet.sh&lt;/code&gt; script from &lt;a href="https://gist.github.com/zonca/5f8b5ccb826a774d3f89"&gt;https://gist.github.com/zonca/5f8b5ccb826a774d3f89&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Customize the script with your port number.&lt;/p&gt;
&lt;p&gt;Lauch &lt;code&gt;bash tunnel_notebook_comet.sh N&lt;/code&gt; where N is the comet login node number. So if you were on &lt;code&gt;comet-ln2&lt;/code&gt;, use &lt;code&gt;bash tunnel_notebook_comet.sh 2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The script forwards the port from the login node of comet to your laptop.&lt;/p&gt;
&lt;h4&gt;Windows&lt;/h4&gt;
&lt;p&gt;Install &lt;code&gt;putty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follow tutorial for local port forwarding on &lt;a href="https://www.akadia.com/services/ssh_putty.html/"&gt;https://www.akadia.com/services/ssh_putty.html/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set &lt;code&gt;comet-ln2.sdsc.edu&lt;/code&gt; as remote host, 22 as SSH port&lt;/li&gt;
&lt;li&gt;set YOURPORT as tunnel port, replace both 8080 and 80 in the tutorial with your port number. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Connect to the Notebook&lt;/h3&gt;
&lt;p&gt;Open a browser and type &lt;code&gt;http://localhost:YOURPORT&lt;/code&gt; in the address bar.&lt;/p&gt;</content><category term="misc"></category><category term="ipython"></category><category term="jupyter"></category><category term="ipython-notebook"></category></entry><entry><title>Run Jupyterhub on a Supercomputer</title><link href="http://zonca.github.io/2015/04/jupyterhub-hpc.html" rel="alternate"></link><published>2015-04-02T09:00:00-07:00</published><updated>2015-04-02T09:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2015-04-02:/2015/04/jupyterhub-hpc.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;: I developed a plugin for &lt;a href="https://github.com/jupyter/jupyterhub" title="jupyterhub"&gt;Jupyterhub&lt;/a&gt;: &lt;a href="https://github.com/zonca/remotespawner"&gt;RemoteSpawner&lt;/a&gt;, it has a proof-of-concept interface with the Supercomputer Gordon at UC San Diego to spawn IPython Notebook instances as jobs throught the queue and tunnel the interface back to the Jupyterhub instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The IPython (recently renamed Jupyter) Notebook is a powerful tool …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;: I developed a plugin for &lt;a href="https://github.com/jupyter/jupyterhub" title="jupyterhub"&gt;Jupyterhub&lt;/a&gt;: &lt;a href="https://github.com/zonca/remotespawner"&gt;RemoteSpawner&lt;/a&gt;, it has a proof-of-concept interface with the Supercomputer Gordon at UC San Diego to spawn IPython Notebook instances as jobs throught the queue and tunnel the interface back to the Jupyterhub instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The IPython (recently renamed Jupyter) Notebook is a powerful tool for analyzing and visualizing data in Python and other programming languages.
A key feature is that a single document contains code, figures, text and equations.
Everything is saved in a single .ipynb file that can be shared, executed and modified. See an &lt;a href="http://nbviewer.ipython.org/github/waltherg/notebooks/blob/master/2013-12-03-Crank_Nicolson.ipynb" title="example notebook"&gt;example Notebook on integration of partial differential equations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Jupyter Notebook is a Python application with a web frontend, i.e. the interface runs in the user browser.
This setup makes it suitable for any kind of remote computing, in particular running the Jupyter Notebook on a computing node of a Supercomputer, and exporting the interface HTTP port to a local browser.
Setting up tunneling via SSH is tedious, in particular if the user does not have a public IP address.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jupyter/jupyterhub" title="jupyterhub"&gt;Jupyterhub&lt;/a&gt;, developed by the Jupyter team, comes to the rescue by providing a web application that manages and proxies multiple instances of the Jupyter Notebook for any number of users.
Jupyterhub natively only spawns local processes, but supports plugins to extend its functionality.&lt;/p&gt;
&lt;p&gt;I have been developing a proof-of-concept plugin (&lt;a href="https://github.com/zonca/remotespawner"&gt;RemoteSpawner&lt;/a&gt;) designed to work on a web server and once a user is authenticated, connect to the login node of a Supercomputer and submit a Jupyter Notebook job.
As soon as the job starts execution, it sets up SSH tunneling with the Jupyterhub host so that
Jupyterhub can provide the Notebook interface to the user.
This setup allows users to simply access a Supercomputer via browser, accessing all their Python environment and data.&lt;/p&gt;
&lt;p&gt;I am looking for interested parties either as users or as collaborators to help further development. See more information about the project below.&lt;/p&gt;
&lt;h2&gt;Test it yourself&lt;/h2&gt;
&lt;p&gt;In order to have a feeling on how Jupyterhub works, you can test in your browser at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tmpnb.org"&gt;http://tmpnb.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This service by Rackspace creates temporary Jupyter Notebooks on the fly. If you click on &lt;code&gt;Welcome.ipynb&lt;/code&gt;,
you can see an example Notebook.&lt;/p&gt;
&lt;p&gt;The purpose of my project is to have a web interface to access Jupyter Notebooks that are
running on computing nodes of a Supercomputer. So that users can access the environment and
data on a Supercomputer from their browser and run data-intensive processing. &lt;/p&gt;
&lt;h2&gt;Tour of Jupyterhub on the Gordon Supercomputer&lt;/h2&gt;
&lt;p&gt;I'll show some screenshots to display how a test Jupyterhub installation on my machine is integrated with &lt;a href="http://www.sdsc.edu/us/resources/gordon/"&gt;Gordon&lt;/a&gt; thanks to the plugin.&lt;/p&gt;
&lt;p&gt;Jupyterhub is accessed publicly via browser and the user can login. Jupyterhub supports authentication for &lt;code&gt;PAM&lt;/code&gt;/&lt;code&gt;LDAP&lt;/code&gt; so it could be integrated with XSEDE credential, at the moment I am testing with local authentication.&lt;/p&gt;
&lt;p&gt;&lt;img alt="jupyterhub-hpc-login.png" src="/images/jupyterhub-hpc-login.png"&gt;&lt;/p&gt;
&lt;p&gt;Once the user is authenticated, Jupyterhub connects via &lt;code&gt;SSH&lt;/code&gt; to a login node on Gordon and submits a batch serial job using &lt;code&gt;qsub&lt;/code&gt;. The web interface waits for the job to start running. A dedicated queue with a quick turnaround would be useful for this kind of jobs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="jupyterhub-hpc-refresh.png" src="/images/jupyterhub-hpc-refresh.png"&gt;
&lt;img alt="jupyterhub-hpc-job.png" src="/images/jupyterhub-hpc-job.png"&gt;&lt;/p&gt;
&lt;p&gt;When the job starts running, it first sets up &lt;code&gt;SSH&lt;/code&gt; tunneling between the Jupyterhub host and the computing node, then starts the Jupyter Notebook.
As soon as the web interface detects that the job is running, proxies the tunneled HTTP port for the user. From this point the Jupyter Notebook works exactly like it would on a local machine.&lt;/p&gt;
&lt;p&gt;See an example Notebook printing the hostname of the computing node:&lt;/p&gt;
&lt;p&gt;&lt;img alt="jupyterhub-hpc-testnotebook.png" src="/images/jupyterhub-hpc-testnotebook.png"&gt;&lt;/p&gt;
&lt;p&gt;Other two useful features of the Jupyter Notebook are a terminal:&lt;/p&gt;
&lt;p&gt;&lt;img alt="jupyterhub-hpc-terminal.png" src="/images/jupyterhub-hpc-terminal.png"&gt;&lt;/p&gt;
&lt;p&gt;and an editor that run in the browser:&lt;/p&gt;
&lt;p&gt;&lt;img alt="jupyterhub-hpc-editor.png" src="/images/jupyterhub-hpc-editor.png"&gt;&lt;/p&gt;
&lt;h2&gt;Launch Jupyterhub parallel to access hundreds of computing engines&lt;/h2&gt;
&lt;p&gt;The Notebook also supports using Torque to run Python computing engines and send them computationally intensive serial functions for load-balanced execution.&lt;/p&gt;
&lt;p&gt;In the Notebook interface, in the &lt;code&gt;Clusters&lt;/code&gt; tab, is it possible to choose the number of engines and click start to submit a job to the queue system:&lt;/p&gt;
&lt;p&gt;&lt;img alt="jupyterhub-hpc-clusterlaunch.png" src="/images/jupyterhub-hpc-clusterlaunch.png"&gt;&lt;/p&gt;
&lt;p&gt;This will pack 16 jobs per node (Gordon has 16-cores CPUs) and make them available from the notebook, see an example usage where I process 1000 files with 128 engines running on a different job on Gordon:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/zonca/9bd94d8782af037704ff"&gt;Example of Jupyterhub Parallel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="python"></category><category term="ipython"></category><category term="jupyterhub"></category><category term="hpc"></category></entry><entry><title>Accelerate groupby operation on pixels with Numba</title><link href="http://zonca.github.io/2015/03/numba-groupby-pixels.html" rel="alternate"></link><published>2015-03-24T09:00:00-07:00</published><updated>2015-03-24T09:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2015-03-24:/2015/03/numba-groupby-pixels.html</id><summary type="html">&lt;p&gt;&lt;a href="/notebooks/numba_groupby_pixels.ipynb"&gt;Download the original IPython notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Astrophysics background&lt;/h2&gt;
&lt;p&gt;It is very common in Astrophysics to work with sky pixels. The sky is tassellated in patches with specific properties and a sky map is then a collection of intensity values for each pixel. The most common pixelization used in Cosmology is &lt;a href="http://healpix.jpl.nasa.gov"&gt;HEALPix …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="/notebooks/numba_groupby_pixels.ipynb"&gt;Download the original IPython notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Astrophysics background&lt;/h2&gt;
&lt;p&gt;It is very common in Astrophysics to work with sky pixels. The sky is tassellated in patches with specific properties and a sky map is then a collection of intensity values for each pixel. The most common pixelization used in Cosmology is &lt;a href="http://healpix.jpl.nasa.gov"&gt;HEALPix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Measurements from telescopes are then represented as an array of pixels that encode the pointing of the instrument at each timestamp and the measurement output.&lt;/p&gt;
&lt;h2&gt;Sample timeline&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For simplicity let's assume we have a sky with 50K pixels:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;NPIX = 50000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we have 50 million measurement from our instrument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;NTIME = int(50 * 1e6)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The pointing of our instrument is an array of pixels, random in our sample case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pixels = np.random.randint(0, NPIX-1, NTIME)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our data are also random:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;timeline = np.random.randn(NTIME)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Create a map of the sky with pandas&lt;/h2&gt;
&lt;p&gt;One of the most common operations is to sum all of our measurements in a sky map, so the value of each pixel in our sky map will be the sum of each individual measurement.
The easiest way is to use the &lt;code&gt;groupby&lt;/code&gt; operation in &lt;code&gt;pandas&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;timeline_pandas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;timeline_pandas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;46889&lt;/span&gt;    &lt;span class="mf"&gt;0.407097&lt;/span&gt;
&lt;span class="mi"&gt;3638&lt;/span&gt;     &lt;span class="mf"&gt;1.300001&lt;/span&gt;
&lt;span class="mi"&gt;6345&lt;/span&gt;     &lt;span class="mf"&gt;0.174931&lt;/span&gt;
&lt;span class="mi"&gt;15742&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.255958&lt;/span&gt;
&lt;span class="mi"&gt;34308&lt;/span&gt;    &lt;span class="mf"&gt;1.147338&lt;/span&gt;
&lt;span class="nl"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;float64&lt;/span&gt;

&lt;span class="nf"&gt;%time&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeline_pandas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="nl"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="mf"&gt;4.09&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;471&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.56&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Wall&lt;/span&gt; &lt;span class="nl"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.55&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Create a map of the sky with numba&lt;/h2&gt;
&lt;p&gt;We would like to improve the performance of this operation using &lt;code&gt;numba&lt;/code&gt;, which allows to produce automatically C-speed compiled code from pure python functions.&lt;/p&gt;
&lt;p&gt;First we need to develop a pure python version of the code, test it, and then have &lt;code&gt;numba&lt;/code&gt; optimize it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;groupby_python&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;m_python&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nf"&gt;%time&lt;/span&gt; &lt;span class="n"&gt;groupby_python&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m_python&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="nl"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="mf"&gt;37.5&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;37.5&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Wall&lt;/span&gt; &lt;span class="nl"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;37.6&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_allclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pure Python is slower than the &lt;code&gt;pandas&lt;/code&gt; version implemented in &lt;code&gt;cython&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Optimize the function with numba.jit&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;numba.jit&lt;/code&gt; gets an input function and creates an compiled version with does not depend on slow Python calls, this is enforced by &lt;code&gt;nopython=True&lt;/code&gt;, &lt;code&gt;numba&lt;/code&gt; would throw an error if it would not be possible to run in &lt;code&gt;nopython&lt;/code&gt; mode.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;groupby_numba&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groupby_python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nopython&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;m_numba&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;%time&lt;/span&gt; &lt;span class="n"&gt;groupby_numba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m_numba&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="nl"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="mi"&gt;274&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;279&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;Wall&lt;/span&gt; &lt;span class="nl"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;278&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_allclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_numba&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Performance improvement is about 100x compared to Python and 20x compared to Pandas, pretty good!&lt;/p&gt;
&lt;h2&gt;Use numba.jit as a decorator&lt;/h2&gt;
&lt;p&gt;The exact same result is obtained if we use &lt;code&gt;numba.jit&lt;/code&gt; as a decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@numba&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nopython&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;groupby_numba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index[i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="python"></category><category term="numba"></category><category term="astrophysics"></category></entry><entry><title>Software Carpentry setup for Chromebook</title><link href="http://zonca.github.io/2015/02/software-carpentry-setup-chromebook.html" rel="alternate"></link><published>2015-02-10T20:00:00-08:00</published><updated>2015-02-10T20:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2015-02-10:/2015/02/software-carpentry-setup-chromebook.html</id><summary type="html">&lt;p&gt;In this post I'll provide instructions on how to install the main requirements of a &lt;a href="http://software-carpentry.org"&gt;Software Carpentry workshop&lt;/a&gt; on
a Chromebook.
Bash, git, IPython notebook and R.&lt;/p&gt;
&lt;h2&gt;Switch the Chromebook to Developer mode&lt;/h2&gt;
&lt;p&gt;ChromeOS is very restrictive on what users can install on the machine.
The only way to get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post I'll provide instructions on how to install the main requirements of a &lt;a href="http://software-carpentry.org"&gt;Software Carpentry workshop&lt;/a&gt; on
a Chromebook.
Bash, git, IPython notebook and R.&lt;/p&gt;
&lt;h2&gt;Switch the Chromebook to Developer mode&lt;/h2&gt;
&lt;p&gt;ChromeOS is very restrictive on what users can install on the machine.
The only way to get around this is to switch to developer mode.&lt;/p&gt;
&lt;p&gt;Switching to Developer mode &lt;strong&gt;wipes&lt;/strong&gt; all the data on the local disk and 
may void warranty, do it at your own risk.&lt;/p&gt;
&lt;p&gt;Instructions are available on the &lt;a href="http://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices"&gt;ChromeOS wiki&lt;/a&gt;, you need
to click on your device name and follow instructions.
For most devices you need to switch the device off, then hold down &lt;code&gt;ESC&lt;/code&gt; and &lt;code&gt;Refresh&lt;/code&gt; and poke the &lt;code&gt;Power&lt;/code&gt; button, then press &lt;code&gt;Ctrl-D&lt;/code&gt; at the
Recovery screen (there is no prompt, you have to know to do it).
This will wipe the device and activate Developer mode.&lt;/p&gt;
&lt;p&gt;Once you reboot and enter your Google credentials, the Chromebook will copy back from Google servers all of your settings.&lt;/p&gt;
&lt;p&gt;Now you are in Developer mode, the main feature is that you have a &lt;code&gt;root&lt;/code&gt; (superuser) shell you can activate using &lt;code&gt;Ctrl-Alt-T&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The worst issue of Developer mode is that at each boot the system will display a scary screen warning that OS verification is off and asks you if you would like to leave Developer mode. If you either press &lt;code&gt;Ctrl-D&lt;/code&gt; or wait 30 seconds, it will boot ChromeOS in Developer mode, if you instead hit the Space, it will wipe
everything and switch back to Normal mode.&lt;/p&gt;
&lt;h2&gt;Install Ubuntu with crouton&lt;/h2&gt;
&lt;p&gt;You can now install Ubuntu using &lt;a href="https://github.com/dnschneid/crouton"&gt;crouton&lt;/a&gt;, you can read the instructions on the page, in summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First you need to install the &lt;a href="https://goo.gl/OVQOEt"&gt;Crouton Chrome extension&lt;/a&gt; on ChromeOS&lt;/li&gt;
&lt;li&gt;Download the last release from &lt;a href="https://goo.gl/fd3zc"&gt;https://goo.gl/fd3zc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open the ChromeOS shell using &lt;code&gt;Ctrl-Alt-t&lt;/code&gt;, digit &lt;code&gt;shell&lt;/code&gt; at the prompt and hit enter&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;sudo sh ~/Downloads/crouton -t xfce,xiwi -r trusty&lt;/code&gt;, this instlls Ubuntu Trutyty with xfce desktop and uses &lt;code&gt;kiwi&lt;/code&gt; to be able to run in a window.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can have Ubuntu running in a window of the Chromebook browser by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-Alt-T&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;digit &lt;code&gt;shell&lt;/code&gt; at the prompt and hit enter&lt;/li&gt;
&lt;li&gt;digit &lt;code&gt;sudo startxfce4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is great about &lt;code&gt;crouton&lt;/code&gt; is that it is not like a Virtual Machine, Ubuntu runs at full performance on the same linux kernel of ChromeOS.&lt;/p&gt;
&lt;h2&gt;Install scientific computing stack&lt;/h2&gt;
&lt;p&gt;You can now follow the instructions for 
Linux at &lt;a href="http://software-carpentry.org/v5/setup.html"&gt;http://software-carpentry.org/v5/setup.html&lt;/a&gt;, summary of commands to run in a terminal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt install nano&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt install git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In order to install R &lt;code&gt;sudo apt install r-base&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download Anaconda Python 3 64bit for Linux from &lt;a href="http://continuum.io/downloads"&gt;http://continuum.io/downloads&lt;/a&gt; and execute it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anaconda will run under Ubuntu but when you open an IPython notebook, it will automatically open a new tab in the main browser of ChromeOS, not
inside the Ubuntu window.&lt;/p&gt;
&lt;h2&gt;Final note&lt;/h2&gt;
&lt;p&gt;I admit it looks scary, I personally followed this procedure successfully on 2 chromebooks: Samsung Chromebook 1 and Toshiba Chromebook 2.&lt;/p&gt;
&lt;p&gt;See a screenshot on my Chromebook with the Ubuntu window on the right with &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;nano&lt;/code&gt; and &lt;code&gt;IPython notebook&lt;/code&gt; running, the &lt;code&gt;IPython notebook&lt;/code&gt; window opens in Chrome, see the left window (click to enlarge).&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/screenshot-chromebook.png"&gt;&lt;img src="/images/screenshot-chromebook.png" alt="Screenshot Chromebook click for full resolution" style="width: 730px;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is also possible to switch the Chromebook to Developer mode and install Anaconda and git directly there, however I think that in order to have
a complete platform for scientific computing is a lot better to have all of the packages provided by Ubuntu.&lt;/p&gt;</content><category term="misc"></category><category term="software-carpentry"></category><category term="chromebook"></category><category term="ipython"></category></entry><entry><title>Zero based indexing</title><link href="http://zonca.github.io/2014/10/zero-based-indexing.html" rel="alternate"></link><published>2014-10-22T10:00:00-07:00</published><updated>2014-10-22T10:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2014-10-22:/2014/10/zero-based-indexing.html</id><summary type="html">&lt;h2&gt;Reads&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dijkstra: &lt;a href="https://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD831.html"&gt;https://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD831.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guido van Rossum: &lt;a href="https://plus.google.com/115212051037621986145/posts/YTUxbXYZyfi"&gt;https://plus.google.com/115212051037621986145/posts/YTUxbXYZyfi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comment&lt;/h2&gt;
&lt;p&gt;For Europeans zero based indexing feels reasonable if we think of floors in a house,
the lowest floor is ground floor, then 1st floor and so on …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Reads&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dijkstra: &lt;a href="https://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD831.html"&gt;https://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD831.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guido van Rossum: &lt;a href="https://plus.google.com/115212051037621986145/posts/YTUxbXYZyfi"&gt;https://plus.google.com/115212051037621986145/posts/YTUxbXYZyfi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comment&lt;/h2&gt;
&lt;p&gt;For Europeans zero based indexing feels reasonable if we think of floors in a house,
the lowest floor is ground floor, then 1st floor and so on.&lt;/p&gt;
&lt;p&gt;A house with 2 stories has ground and 1st floor. It is natural in this way to index
zero-based and to count 1-based.&lt;/p&gt;
&lt;p&gt;What about &lt;strong&gt;slicing&lt;/strong&gt; instead? This is a separate issue from indexing.
The main problem here is that if you include the upper bound then you cannot express
the empty slice.
Also it is elegant to print the first &lt;code&gt;n&lt;/code&gt; elements as &lt;code&gt;a[:n]&lt;/code&gt;. Slicing &lt;code&gt;a[i:j]&lt;/code&gt; excludes
the upper bound, so it probably easier to understand if we express it as &lt;code&gt;a[i:i+n]&lt;/code&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>Write unit tests as cells of IPython notebooks</title><link href="http://zonca.github.io/2014/09/unit-tests-ipython-notebook.html" rel="alternate"></link><published>2014-09-30T14:00:00-07:00</published><updated>2014-09-30T14:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2014-09-30:/2014/09/unit-tests-ipython-notebook.html</id><summary type="html">&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;Plugin for &lt;code&gt;py.test&lt;/code&gt; to write unit tests as cells in IPython notebooks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Homepage on Github: &lt;a href="https://github.com/zonca/pytest-ipynb"&gt;https://github.com/zonca/pytest-ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyPi : &lt;a href="https://pypi.python.org/pypi/pytest-ipynb/"&gt;https://pypi.python.org/pypi/pytest-ipynb/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install with &lt;code&gt;pip install pytest-ipynb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Many unit testing fromeworks in Python, first of all the &lt;code&gt;unittest&lt;/code&gt; package in the standard …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;Plugin for &lt;code&gt;py.test&lt;/code&gt; to write unit tests as cells in IPython notebooks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Homepage on Github: &lt;a href="https://github.com/zonca/pytest-ipynb"&gt;https://github.com/zonca/pytest-ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyPi : &lt;a href="https://pypi.python.org/pypi/pytest-ipynb/"&gt;https://pypi.python.org/pypi/pytest-ipynb/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install with &lt;code&gt;pip install pytest-ipynb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Many unit testing fromeworks in Python, first of all the &lt;code&gt;unittest&lt;/code&gt; package in the standard library, work very well for automating unit tests, but make it very difficult to debug interactively any failed test.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pytest.org"&gt;&lt;code&gt;py.test&lt;/code&gt;&lt;/a&gt; alleviates this problem by allowing to write just plain Python functions with &lt;code&gt;assert&lt;/code&gt; statements (no boilerplate code), discover them automatically in any file that starts with &lt;code&gt;test&lt;/code&gt; and write a useful report.&lt;/p&gt;
&lt;p&gt;I wrote a plugin for &lt;code&gt;py.test&lt;/code&gt;, &lt;a href="https://pypi.python.org/pypi/pytest-ipynb"&gt;&lt;code&gt;pytest-ipynb&lt;/code&gt;&lt;/a&gt;, that goes a step further and runs unit tests written as cells of any IPython notebook named &lt;code&gt;test*.ipynb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The advantage is that it is easy to create and debug interactively any issue by opening the testing notebook interactively, then clean the notebook outputs and add it to the software repository.&lt;/p&gt;
&lt;p&gt;More details on Github: &lt;a href="https://github.com/zonca/pytest-ipynb"&gt;https://github.com/zonca/pytest-ipynb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Suggestions welcome as comments or github issues.&lt;/p&gt;
&lt;p&gt;(Yes, works with Python 3)&lt;/p&gt;</content><category term="misc"></category><category term="unit-test"></category><category term="ipython"></category><category term="ipython-notebook"></category></entry><entry><title>How to perform code review for scientific software</title><link href="http://zonca.github.io/2014/08/code-review-for-scientific-computing.html" rel="alternate"></link><published>2014-08-28T17:00:00-07:00</published><updated>2014-08-28T17:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2014-08-28:/2014/08/code-review-for-scientific-computing.html</id><summary type="html">&lt;p&gt;Code review is the formal process where a programmer inspects in detail a piece of software developed by somebody else in order to improve code quality by catching bugs, improve readibility and usability.
It is used extensively in industry, not much in academia.&lt;/p&gt;
&lt;p&gt;There has been some discussion about this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Code review is the formal process where a programmer inspects in detail a piece of software developed by somebody else in order to improve code quality by catching bugs, improve readibility and usability.
It is used extensively in industry, not much in academia.&lt;/p&gt;
&lt;p&gt;There has been some discussion about this lately, see:
* &lt;a href="http://ivory.idyll.org/blog/on-code-review-of-scientific-code.html"&gt;A few thoughts on code review of scientific code&lt;/a&gt; by Titus Brown
* &lt;a href="http://mozillascience.org/code-review-for-science-what-we-learned/"&gt;Code review for science: What we learned&lt;/a&gt; by Kaitlin Thaney&lt;/p&gt;
&lt;p&gt;I participated in the &lt;a href="http://software-carpentry.org/blog/2014/01/code-review-round-2.html"&gt;second code review pilot study of Software Carpentry&lt;/a&gt; where I was paired to a research group in Genomics and I reviewed some of their analysis code.
In this blog post I'd like to write about some guidelines and best practices on how to perform code review of scientific code.&lt;/p&gt;
&lt;p&gt;Best use of code review is on libraries, prior to publication, because an improvement in code quality can help future users of the code. One-off analysis scripts benefit less from the process.&lt;/p&gt;
&lt;h2&gt;How to do a code review of a large codebase&lt;/h2&gt;
&lt;p&gt;The code review process should be performed on ~200-400 lines of code at a time.
First thing is to ask the code author if she can identify different functionalities of the code that could be packaged and distributed separately. Modularity really helps maintaining software in the long term.&lt;/p&gt;
&lt;p&gt;Then the author should follow these steps to get ready for the code review:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For each of the packages identified previously, the code author should create a separate repository, generally on Github, possibly under an organization account (see &lt;a href="http://zonca.github.io/2014/08/github-for-research-groups.html"&gt;Github for research groups&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Create a blank project in the programming language of choice (hopefully Python!) using a pre-defined standard template, I recommend using &lt;a href="https://github.com/audreyr/cookiecutter"&gt;CookieCutter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Write a &lt;code&gt;README.md&lt;/code&gt; file explaining exactly the functionality of the code in general&lt;/li&gt;
&lt;li&gt;Clone the repository locally, add, commit and push the blank project with &lt;code&gt;README.md&lt;/code&gt; to the &lt;code&gt;master&lt;/code&gt; branch on Github&lt;/li&gt;
&lt;li&gt;Identify a portion of the software of about ~200-400 lines that has a defined functionality and that could be reviewed together. It doesn't necessarily need to be in a runnable state, at the beginning we can start the code review without running the code.&lt;/li&gt;
&lt;li&gt;Create a new branch locally and copy, add, commit this file or this set of files to the repository and push to Github&lt;/li&gt;
&lt;li&gt;Access the web interface of Github, it should have detected that you just pushed a new branch and asked if you want to create a pull request. Create a pull request with a few details on the code under review.&lt;/li&gt;
&lt;li&gt;Point the reviewer to the pull request&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to review an improvement to the software&lt;/h2&gt;
&lt;p&gt;The implementation of a feature should be performed on a separate branch, then it is straightforward to push it to Github, create a pull request and ask reviewers to look at the set of changes.&lt;/p&gt;
&lt;h2&gt;How to perform the actual code review&lt;/h2&gt;
&lt;p&gt;Coding style should not be the main focus of the review, the most important feedback for the author are high-level comments on software organization. The reviewer should focus on what makes the software more usable and more maintenable.&lt;/p&gt;
&lt;p&gt;A few examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can some parts of the code be simplified?&lt;/li&gt;
&lt;li&gt;is there any functionality that could be replaced by an existing library?&lt;/li&gt;
&lt;li&gt;is it clear what each part of the software is doing?&lt;/li&gt;
&lt;li&gt;is there a more straightforward way of splitting the code into files?&lt;/li&gt;
&lt;li&gt;is documentation enough?&lt;/li&gt;
&lt;li&gt;are there some function arguments or function names that could be easily misinterpreted by a user?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The purpose is to improve the code, but also to help the code author to improve her coding skills.&lt;/p&gt;
&lt;p&gt;On the Github pull requests interface, it is possible both to write general comments, and to click on a single line of code and write an inline comment.&lt;/p&gt;
&lt;h2&gt;How to implement reviewer's recommendations&lt;/h2&gt;
&lt;p&gt;The author can improve the code locally on the same branch used in the pull request, then commit and push the changes to Github, the changes will be automatically added to the existing pull request, so the reviewer can start another iteration of the review process.&lt;/p&gt;
&lt;p&gt;Comments and suggestions are welcome.&lt;/p&gt;</content><category term="misc"></category><category term="github"></category><category term="git"></category><category term="openscience"></category><category term="software-carpentry"></category></entry><entry><title>Create a Github account for your research group with free private repositories</title><link href="http://zonca.github.io/2014/08/github-for-research-groups.html" rel="alternate"></link><published>2014-08-19T15:00:00-07:00</published><updated>2014-08-19T15:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2014-08-19:/2014/08/github-for-research-groups.html</id><summary type="html">&lt;p&gt;See the &lt;strong&gt;updated version&lt;/strong&gt; at &lt;a href="https://zonca.github.io/2019/08/github-for-research-groups.html"&gt;https://zonca.github.io/2019/08/github-for-research-groups.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/"&gt;Github&lt;/a&gt; allows a research group to create their own webpage where they can host, share and develop their software using the &lt;code&gt;git&lt;/code&gt; version control system and the powerful Github online issue-tracking interface.&lt;/p&gt;
&lt;p&gt;Since February 2014 Github also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See the &lt;strong&gt;updated version&lt;/strong&gt; at &lt;a href="https://zonca.github.io/2019/08/github-for-research-groups.html"&gt;https://zonca.github.io/2019/08/github-for-research-groups.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/"&gt;Github&lt;/a&gt; allows a research group to create their own webpage where they can host, share and develop their software using the &lt;code&gt;git&lt;/code&gt; version control system and the powerful Github online issue-tracking interface.&lt;/p&gt;
&lt;p&gt;Since February 2014 Github also offers 20 private repositories to research groups and classrooms, plus unlimited public repositories.
Private repositories are useful for early stages of development or if it is necessary to keep software secret before publication, at publication they can easily switched to public repositories and free up their slot.&lt;/p&gt;
&lt;p&gt;Here the steps to set this up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a user account on Github and choose the free plan, use your &lt;code&gt;.edu&lt;/code&gt; email address&lt;/li&gt;
&lt;li&gt;Create an organization account for your research group&lt;/li&gt;
&lt;li&gt;Go to https://education.github.com/ and click on "Request a discount"&lt;/li&gt;
&lt;li&gt;Choose what is your position, e.g. Researcher and select you want a discount for an organization&lt;/li&gt;
&lt;li&gt;Choose the organization you created earlier and confirm that it is a "Research group"&lt;/li&gt;
&lt;li&gt;Add details about your Research group&lt;/li&gt;
&lt;li&gt;Finally you need to upload a picture of your University ID card and write how you plan on using the repositories&lt;/li&gt;
&lt;li&gt;Within a week at most, but generally in less than 24 hours, you will be approved for 20 private repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the organization is created, you can add key team members to the "Owners" group, and then create another group for students and collaborators.&lt;/p&gt;
&lt;p&gt;Consider also that is not necessary for every collaborator to have write access to your repositories. My recommendation is to ask a more experienced team member to administer the central repository, ask the students to fork the repository under their user accounts (forks of private repositories are always private, free and don't use any slot), and then &lt;a href="https://help.github.com/articles/using-pull-requests"&gt;send a pull request&lt;/a&gt; to the central repository for the administrator to review, discuss and merge.&lt;/p&gt;
&lt;p&gt;See for example the organization account of the &lt;a href="https://github.com/ged-lab"&gt;"Genomics, Evolution, and Development" at Michigan State U led by Dr. C. Titus Brown&lt;/a&gt; where they share code, documentation and papers. Open Science!!&lt;/p&gt;
&lt;p&gt;Other suggestions on the setup very welcome!&lt;/p&gt;</content><category term="misc"></category><category term="github"></category><category term="git"></category><category term="openscience"></category></entry><entry><title>Thoughts on a career as a computational scientist</title><link href="http://zonca.github.io/2014/06/career-as-a-computational-scientist.html" rel="alternate"></link><published>2014-06-05T14:00:00-07:00</published><updated>2014-06-05T14:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2014-06-05:/2014/06/career-as-a-computational-scientist.html</id><summary type="html">&lt;p&gt;Recently I've been asked what are the prospects of a wannabe computational scientist, 
both in terms of training and in terms of job opportunities.&lt;/p&gt;
&lt;p&gt;So I am writing this blog post about my personal experience.&lt;/p&gt;
&lt;h2&gt;What is a computational scientist?&lt;/h2&gt;
&lt;p&gt;In my understanding, a computational scientist is a scientist with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I've been asked what are the prospects of a wannabe computational scientist, 
both in terms of training and in terms of job opportunities.&lt;/p&gt;
&lt;p&gt;So I am writing this blog post about my personal experience.&lt;/p&gt;
&lt;h2&gt;What is a computational scientist?&lt;/h2&gt;
&lt;p&gt;In my understanding, a computational scientist is a scientist with strong skills in scientific computing who
most of the day is building software.&lt;/p&gt;
&lt;p&gt;Usually there are 2 main areas, in any field of science:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Data analysis&lt;/em&gt;: historically only few fields of science had to deal with large amount
    of experimental data, e.g. Astrophysics, nowadays instead every field can generate 
    extremely large amounts of data thanks to modern technology.
    The task of the computational scientist is generally to analyze the data, i.e. cleanup, check systematic effects,
    calibrate, understand and reduce to a form to be used for scientific exploitation.
    Generally a second phase of data analysis involves model fitting, i.e. check which theoretical models best fit the
    data and estimate their parameters with error bars, this requires knowledge of Statistics and Bayesian techniques,
    like Markov Chain Monte Carlo (MCMC).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Simulations&lt;/em&gt;: production of artificial data used for their own good in the understanding of scientific models or
    by trying to reproduce experimental data in order to characterize the response of a scientific instrument. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Skills of a computational scientist&lt;/h2&gt;
&lt;p&gt;Starting out as a computational scientist nowadays is quite easy; with a background in any field of science, it is possible to improve computational skills thanks to several learning resources, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Free online video classes on &lt;a href="https://www.coursera.org/courses?search=python"&gt;Coursera&lt;/a&gt;, &lt;a href="https://www.udacity.com/courses#!/data-science"&gt;Udacity&lt;/a&gt; and others&lt;/li&gt;
&lt;li&gt;&lt;a href="http://software-carpentry.org"&gt;Software Carpentry&lt;/a&gt; runs bootcamps for scientists to improve their computational skills&lt;/li&gt;
&lt;li&gt;Online tutorials on &lt;a href="http://scipy-lectures.github.io/"&gt;Python for scientific computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Books, e.g. &lt;a href="http://shop.oreilly.com/product/0636920023784.do"&gt;Python for Data Analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically it is important to have a good experience with at least one programming language, Python is the safest option because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it is well enstabilished in many fields of science&lt;/li&gt;
&lt;li&gt;its syntax is easier to learn than most other common programming languages&lt;/li&gt;
&lt;li&gt;it has the largest number of scientific libraries &lt;/li&gt;
&lt;li&gt;it is easy to interface with other languages, i.e. we can reuse legacy code implemented in C/C++/FORTRAN&lt;/li&gt;
&lt;li&gt;it can be used also when developing something unusual for a computational scientist, like web development (&lt;code&gt;django&lt;/code&gt;) or interfacing with hardware (&lt;code&gt;pyserial&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python performance is comparable to C/C++/Java when we make use of optimized libraries like &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;pandas&lt;/code&gt;, &lt;code&gt;scipy&lt;/code&gt;, which
have Python frontends to highly optimized C or Fortran code; therefore is necessary to avoid explicit for loops and learn
to write "vectorized" code, that allows entire arrays and matrices to be processed in one step.&lt;/p&gt;
&lt;p&gt;Some important Python tools to learn are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IPython&lt;/code&gt; notebooks to write documents with code, documentatin and plots embedded &lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;pandas&lt;/code&gt; for data management&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matplotlib&lt;/code&gt; for plotting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h5py&lt;/code&gt; or &lt;code&gt;pytables&lt;/code&gt;, HDF5 binary files manipulation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/"&gt;how to publish a Python package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emcee&lt;/code&gt; for MCMC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scipy&lt;/code&gt; for signal processing, FFT, optimization, integration, 2d array processing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scikit-learn&lt;/code&gt; for Machine Learning&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scikit-image&lt;/code&gt; for image processing &lt;/li&gt;
&lt;li&gt;Object oriented programming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For parallel programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IPython parallel&lt;/code&gt; for distributing large amount of serial and independent job on a cluster&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyTrilinos&lt;/code&gt; for distributed linear algebra (high level operations with data distributed across nodes, automatic MPI communication)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mpi4py&lt;/code&gt; for manually create communication of data via MPI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On top of Python is also useful to learn a bit about shell scripting with &lt;code&gt;bash&lt;/code&gt;, which for simple automation tasks is better suited,
and it is fundamental to learn version control with git or mercurial.&lt;/p&gt;
&lt;h2&gt;My experience&lt;/h2&gt;
&lt;p&gt;I trained as Aerospace Engineer for my Master degree, and then moved to a PhD in Astrophysics, in Milano,
where I worked in the Planck collaboration and took care of simulating the inband response of the Low Frequency Instrument
detectors.
During my PhD I developed a good proficiency with Python, mainly using it for task automation and plotting. 
My previous programming experience was very low, only some Matlab during last year of my Master degree, but I found Python really easy to use,
and learned it myself with books and online tutorials.
With no formal education in Computer Science, the most complicated concept to grasp is Object Oriented programming; at the time
I was moonlighting as a web developer and I familiarized with OO using Django models.
After my PhD I got a PostDoc position at the University of California, Santa Barbara, there I had for the first time
access to supercomputers and my job involved analyzing large amount of data.
During 4 years at UCSB I had the great opportunity of choosing my own tools, implementing my own software for data processing,
so I immediately saw the value of improving my understanding of software development best practices.&lt;/p&gt;
&lt;p&gt;Unfortunately in science there is usually a push toward hacking around a quick and dirty solution to get out results and go forward,
I instead focused on learning how to build easily-maintenable libraries that I could re-use in the future. This
involved learning more advanced Python, version control, unit testing and so on. I learned these tools by reading tutorials and 
documentation on the web, answers on StackOverflow, blog posts.
It also helped that I became one of the core developers of &lt;code&gt;healpy&lt;/code&gt;, a Python package for pixelized sky maps processing.&lt;/p&gt;
&lt;p&gt;In 2013, at the 4th year of my PostDoc and with the Planck mission near to the end in 2015, I was looking for a position
as a computational scientist, mainly as a research scientist (i.e. doing research/data analysis full time, with a long term contract) 
at research labs like Berkeley Lab or Jet Propulsion Laboratory, or in a research group in Cosmology/Astrophysics or in
High Performance Computing.&lt;/p&gt;
&lt;p&gt;I got hired at the San Diego Supercomputer Center in December 2013 as a permanent staff, mainly thanks to my experience with data analysis,
Python and parallel programming, here I collaborate with research groups in any field of Science and help them deploy and optimize their software on supercomputers here at SDSC or in other XSEDE centers.&lt;/p&gt;
&lt;h2&gt;Thoughts about a career as a computational scientist&lt;/h2&gt;
&lt;p&gt;After a PhD program, a computational scientist with experience either in data analysis or simulation, especially if has experience in parallel programming, should quite easily find a position as a PostDoc, lots of research groups have huge amount of data and need software development skilled labor.&lt;/p&gt;
&lt;p&gt;I believe what is complicated is the next step, faculty jobs favour scientists with the best scientific publications, and software development generally is not recognized as a first class scientific product.
Very interesting opportunities in Academia are Research Scientist positions either at research facilities, for example Lawrence Berkeley Labs and NASA Jet Propulsion Laboratory, or supercomputer centers. These jobs are often permament positions, unless the institution runs out of funding, and allow to work 100% on research.
Another opportunity is to work as Research Scientist in a specific research group in a University, this is less common, and depends on their availability of long-term funding.&lt;/p&gt;
&lt;p&gt;Still, the total number of available positions in Academia is not very high, therefore it is very important to also keep open the opportunity of a job in Industry. Fortunately nowadays most  skills of a computational scientist are very well recognized in Industry, so I recommend to choose, whenever possible, to learn and use tools that are widely used also outside of Academia, for example Python, version control with Git, shell scripting, unit testing, databases, multi-core programming, parallel programming, GPU programming and so on.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Acknowledgement&lt;/em&gt;: thanks to Priscilla Kelly for discussion on this topic and review of the post&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Comments/feedback&lt;/em&gt;: comment on the blog using Google+ or tweet to &lt;a href="http://twitter.com/andreazonca"&gt;@andreazonca&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="career"></category><category term="hpc"></category></entry><entry><title>Machine learning at scale with Python</title><link href="http://zonca.github.io/2014/03/machine-learning-at-scale-with-python.html" rel="alternate"></link><published>2014-03-20T20:00:00-07:00</published><updated>2014-03-20T20:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2014-03-20:/2014/03/machine-learning-at-scale-with-python.html</id><summary type="html">&lt;p&gt;My talk for the San Diego Data Science meetup: &lt;a href="http://www.meetup.com/San-Diego-Data-Science-R-Users-Group/events/170967362/"&gt;http://www.meetup.com/San-Diego-Data-Science-R-Users-Group/events/170967362/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup &lt;a href="http://star.mit.edu/cluster/"&gt;StarCluster&lt;/a&gt; to launch EC2 instances&lt;/li&gt;
&lt;li&gt;Running IPython Notebook on Amazon EC2&lt;/li&gt;
&lt;li&gt;Running single node Machine Learning jobs using multiple cores&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributing jobs with IPython parallel to multiple EC2 instances&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See HTML5 &lt;strong&gt;slides …&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;My talk for the San Diego Data Science meetup: &lt;a href="http://www.meetup.com/San-Diego-Data-Science-R-Users-Group/events/170967362/"&gt;http://www.meetup.com/San-Diego-Data-Science-R-Users-Group/events/170967362/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup &lt;a href="http://star.mit.edu/cluster/"&gt;StarCluster&lt;/a&gt; to launch EC2 instances&lt;/li&gt;
&lt;li&gt;Running IPython Notebook on Amazon EC2&lt;/li&gt;
&lt;li&gt;Running single node Machine Learning jobs using multiple cores&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributing jobs with IPython parallel to multiple EC2 instances&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See HTML5 &lt;strong&gt;slides&lt;/strong&gt;: &lt;a href="http://bit.ly/ml-ec2"&gt;http://bit.ly/ml-ec2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;See the IPython notebook sources of the slides: &lt;a href="http://bit.ly/ml-ec2-ipynb"&gt;http://bit.ly/ml-ec2-ipynb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally the Github repository with additional material, under MIT license:
&lt;a href="https://github.com/zonca/machine-learning-at-scale-with-python"&gt;https://github.com/zonca/machine-learning-at-scale-with-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Any feedback is appreciated, google+, twitter or email.&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="machine-learning"></category></entry><entry><title>Python on Gordon</title><link href="http://zonca.github.io/2014/03/setup-ipython-notebook-parallel-Gordon.html" rel="alternate"></link><published>2014-03-20T19:30:00-07:00</published><updated>2014-03-20T19:30:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2014-03-20:/2014/03/setup-ipython-notebook-parallel-Gordon.html</id><summary type="html">&lt;p&gt;Gordon has already a &lt;code&gt;python&lt;/code&gt; environment setup which can be activated by loading the &lt;code&gt;python&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;module load python # add this to .bashrc to load it at every login&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install virtualenv&lt;/h3&gt;
&lt;p&gt;Then we need to setup a sandboxed local environment to install other packages, by using &lt;code&gt;virtualenv&lt;/code&gt;, get the link …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Gordon has already a &lt;code&gt;python&lt;/code&gt; environment setup which can be activated by loading the &lt;code&gt;python&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;module load python # add this to .bashrc to load it at every login&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install virtualenv&lt;/h3&gt;
&lt;p&gt;Then we need to setup a sandboxed local environment to install other packages, by using &lt;code&gt;virtualenv&lt;/code&gt;, get the link to the latest version from &lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;https://pypi.python.org/pypi/virtualenv&lt;/a&gt;, then download it on gordon and unpack it, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;wget --no-check-certificate https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.11.2.tar.gz&lt;/span&gt;
&lt;span class="err"&gt;tar xzvf virtualenv*tar.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then create your own virtualenv and load it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;mkdir ~/venv&lt;/span&gt;
&lt;span class="err"&gt;python virtualenv-*/virtualenv.py ~/venv/py&lt;/span&gt;
&lt;span class="err"&gt;source ~/venv/py/bin/activate # add this to .bashrc to load it at every login&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you can restore your previous environment by deactivating the virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;deactivate # from your bash prompt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install IPython&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;pip&lt;/code&gt; you can install &lt;code&gt;IPython&lt;/code&gt; and all dependencies for the notebook and parallel tools running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pip install ipython pyzmq tornado jinja&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Configure the IPython notebook&lt;/h3&gt;
&lt;p&gt;For interactive data exploration, you can run the &lt;code&gt;IPython&lt;/code&gt; notebook in a computing node on Gordon and export the web interface to your local machine, which also embeds all the plots.
Configuring the tunnelling over SSH is complicated, so I created a script, takes a little time to setup but then is very easy to use, see https://github.com/pyHPC/ipynbhpc.&lt;/p&gt;
&lt;h3&gt;Configure IPython parallel&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://ipython.org/ipython-doc/stable/parallel/"&gt;IPython parallel&lt;/a&gt; on Gordon allows to launch a &lt;code&gt;PBS&lt;/code&gt; job with tens (or hundreds) of Python engines and then easily submit hundreds (or thousands) of serial jobs to be executed with automatic load balancing.
First of all create the default configuration files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ipython profile create --parallel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, in &lt;code&gt;~/.ipython/profile_default/ipcluster_config.py&lt;/code&gt;, you need to setup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;c.IPClusterStart.controller_launcher_class = &amp;#39;LocalControllerLauncher&amp;#39; &lt;/span&gt;
&lt;span class="err"&gt;c.IPClusterStart.engine_launcher_class = &amp;#39;PBS&amp;#39; &lt;/span&gt;
&lt;span class="err"&gt;c.PBSLauncher.batch_template_file = u&amp;#39;/home/REPLACEWITHYOURUSER/.ipython/profile_default/pbs.engine.template&amp;#39; # &amp;quot;~&amp;quot; does not work&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You also need to allow connections to the controller from other hosts, setting  in &lt;code&gt;~/.ipython/profile_default/ipcontroller_config.py&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;c.HubFactory.ip = &amp;#39;*&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;c.HubFactory.engine_ip = &amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally create the PBS template &lt;code&gt;~/.ipython/profile_default/pbs.engine.template&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;#PBS -q normal&lt;/span&gt;
&lt;span class="c1"&gt;#PBS -N ipcluster&lt;/span&gt;
&lt;span class="c1"&gt;#PBS -l nodes={n/16}:ppn={n}:native&lt;/span&gt;
&lt;span class="c1"&gt;#PBS -l walltime=01:00:00&lt;/span&gt;
&lt;span class="c1"&gt;#PBS -o ipcluster.out&lt;/span&gt;
&lt;span class="c1"&gt;#PBS -e ipcluster.err&lt;/span&gt;
&lt;span class="c1"&gt;#PBS -m abe&lt;/span&gt;
&lt;span class="c1"&gt;#PBS -V&lt;/span&gt;
mpirun_rsh -np &lt;span class="o"&gt;{&lt;/span&gt;n&lt;span class="o"&gt;}&lt;/span&gt; -hostfile &lt;span class="nv"&gt;$PBS_NODEFILE&lt;/span&gt; ipengine
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here we chose to run 16 IPython engines per Gordon node, so each has access to 4GB of ram, if you need more just change 16 to 8 for example.&lt;/p&gt;
&lt;h3&gt;Run IPython parallel&lt;/h3&gt;
&lt;p&gt;You can submit a job to the queue running, &lt;code&gt;n&lt;/code&gt; is equal to the number of processes you want to use, so it needs to be a multiple of the &lt;code&gt;ppn&lt;/code&gt; chosen in the PBS template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ipcluster start --n=32 &amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in this case we are requesting 2 nodes, with 16 IPython engines each, check with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;qstat -u $USER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;basically &lt;code&gt;ipcluster&lt;/code&gt; runs an &lt;code&gt;ipcontroller&lt;/code&gt; on the login node and submits a job to PBS for running the &lt;code&gt;ipengines&lt;/code&gt; on the computing nodes.&lt;/p&gt;
&lt;p&gt;Once the PBS job is running, check that the engines are connected by opening a IPython on the login node and print the &lt;code&gt;ids&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.parallel&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ids&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can stop the cluster (kills &lt;code&gt;ipcontroller&lt;/code&gt; and runs &lt;code&gt;qdel&lt;/code&gt; on the PBS job) either by sending CTRL-c to &lt;code&gt;ipcluster&lt;/code&gt; or running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ipcluster stop # from bash console&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Submit jobs to IPython parallel&lt;/h3&gt;
&lt;p&gt;As soon as &lt;code&gt;ipcluster&lt;/code&gt; is executed, &lt;code&gt;ipcontroller&lt;/code&gt; is ready to queue jobs up, which will be then consumed by the engines once they will be running.
The easiest method to submit jobs with automatic load balancing is to create a load balanced view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.parallel&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;lview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_balanced_view&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# default load-balanced view&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then use its &lt;code&gt;map&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;exp_10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="n"&gt;list_of_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp_10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_of_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this code &lt;code&gt;IPython&lt;/code&gt; will distribute uniformly the list of arguments to the engines and the function will be evalutated for each of them and the result copied back to the connecting client running on the login node.&lt;/p&gt;
&lt;h3&gt;Submit non-python jobs to IPython parallel&lt;/h3&gt;
&lt;p&gt;Let's assume you have a list of commands you want to run in a text file, one command per line, those could be implemented in any programming language, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;date &amp;amp;&amp;gt; date.log&lt;/span&gt;
&lt;span class="err"&gt;hostname &amp;amp;&amp;gt; hostname.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you create a function that executes one of those commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then apply this function to the list of commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;list_of_commands = open(&amp;quot;commands.txt&amp;quot;).readlines()&lt;/span&gt;
&lt;span class="err"&gt;lview.map(run_command, list_of_commands)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I created a script that automates this process, see https://gist.github.com/zonca/8994544, you can run as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;./ipcluster_run_commands.py commands.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="hpc"></category><category term="python"></category><category term="Gordon"></category></entry><entry><title>Build Software Carpentry lessons with Pelican</title><link href="http://zonca.github.io/2014/02/build-software-carpentry-with-pelican.html" rel="alternate"></link><published>2014-02-26T23:00:00-08:00</published><updated>2014-02-26T23:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2014-02-26:/2014/02/build-software-carpentry-with-pelican.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.software-carpentry.org"&gt;Software Carpentry&lt;/a&gt; offers bootcamps for scientist to teach basic programming skills.
All the material, mainly about bash, git, Python and R is &lt;a href="http://github.com/swcarpentry/bc"&gt;available on Github&lt;/a&gt; under Creative Commons.&lt;/p&gt;
&lt;p&gt;The content is either in Markdown or in IPython notebook format, and is currently built using Jekyll, nbconvert and Pandoc.
Basicly the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.software-carpentry.org"&gt;Software Carpentry&lt;/a&gt; offers bootcamps for scientist to teach basic programming skills.
All the material, mainly about bash, git, Python and R is &lt;a href="http://github.com/swcarpentry/bc"&gt;available on Github&lt;/a&gt; under Creative Commons.&lt;/p&gt;
&lt;p&gt;The content is either in Markdown or in IPython notebook format, and is currently built using Jekyll, nbconvert and Pandoc.
Basicly the requirement is to make it easy for bootcamp instructors to setup their own website, modify the content, and have the website updated.&lt;/p&gt;
&lt;p&gt;I created a fork of the Software Carpentry repository and configured Pelican for creating the website:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/swcarpentry-pelican/bootcamp-pelican"&gt;bootcamp-pelican repository&lt;/a&gt;: contains Markdown lessons in &lt;code&gt;lessons&lt;/code&gt; (version v5), &lt;code&gt;.ipynb&lt;/code&gt; in &lt;code&gt;notebooks&lt;/code&gt; and news items in &lt;code&gt;news&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/swcarpentry-pelican/swcarpentry-pelican.github.io"&gt;bootcamp-pelican Github pages&lt;/a&gt;: This repository contains the output HTML&lt;/li&gt;
&lt;li&gt;&lt;a href="http://swcarpentry-pelican.github.io/"&gt;bootcamp-pelican website&lt;/a&gt;: this is the URL where Github publishes automatically the content of the previous repository&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pelican handles fenced code blocks, see &lt;a href="http://swcarpentry-pelican.github.io/"&gt;http://swcarpentry-pelican.github.io/&lt;/a&gt; and conversion of IPython notebooks, see &lt;a href="http://swcarpentry-pelican.github.io/lessons/numpy-notebook.html"&gt;http://swcarpentry-pelican.github.io/lessons/numpy-notebook.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;How to setup the repositories for a new bootcamp&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/organizations/new"&gt;create a new Organization on Github&lt;/a&gt; and add all the other instructors, name it: &lt;code&gt;swcarpentry-YYYY-MM-DD-INST&lt;/code&gt; where &lt;code&gt;INST&lt;/code&gt; is the institution name, e.g. &lt;code&gt;NYU&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/swcarpentry-pelican/bootcamp-pelican/fork"&gt;Fork the &lt;code&gt;bootcamp-pelican&lt;/code&gt; repository&lt;/a&gt; under the organization account&lt;/li&gt;
&lt;li&gt;Create a new repository in your organization named &lt;code&gt;swcarpentry-YYYY-MM-DD-INST.github.io&lt;/code&gt; that will host the HTML of the website, also tick &lt;strong&gt;initialize with README&lt;/strong&gt;, it will help later.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you can either prepare the build environment on your laptop or have the web service &lt;code&gt;travis-ci&lt;/code&gt; automatically update the website whenever you update the repository (even from the Github web interface!).&lt;/p&gt;
&lt;h2&gt;Build/Update the website from your laptop&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clone the &lt;code&gt;bootcamp-pelican&lt;/code&gt; repository of your organization locally&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;Python&lt;/code&gt; virtual environment and install requirements with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cd bootcamp-pelican&lt;/span&gt;
&lt;span class="err"&gt;virtualenv swcpy&lt;/span&gt;
&lt;span class="err"&gt;. swcpy/bin/activate&lt;/span&gt;
&lt;span class="err"&gt;pip install -r requirements.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the &lt;code&gt;swcarpentry-YYYY-MM-DD-INST.github.io&lt;/code&gt; in the output folder as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;git clone git@github.com:swcarpentry-YYYY-MM-DD-INST.github.io.git output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build or Update the website with Pelican running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;fab build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can display the website in your browser locally with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;fab serve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally you can publish it to Github with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cd output&lt;/span&gt;
&lt;span class="err"&gt;git add .&lt;/span&gt;
&lt;span class="err"&gt;git push origin master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Configure Travis-ci to automatically build and publish the website&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="http://travis-ci.org"&gt;http://travis-ci.org&lt;/a&gt; and login with Github credentials&lt;/li&gt;
&lt;li&gt;Under &lt;a href="https://travis-ci.org/profile"&gt;https://travis-ci.org/profile&lt;/a&gt; click on the organization name on the left and activate the webhook setting &lt;code&gt;ON&lt;/code&gt; on your &lt;code&gt;bootcamp-pelican&lt;/code&gt; repository&lt;/li&gt;
&lt;li&gt;Now it is necessary to setup the credentials for &lt;code&gt;travis-ci&lt;/code&gt; to write to the repository&lt;/li&gt;
&lt;li&gt;Go to https://github.com/settings/tokens/new, create a new token with default permissions&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;code&gt;travis&lt;/code&gt; tool (in debian/ubuntu &lt;code&gt;sudo gem install travis&lt;/code&gt;) and run from any machine (not necessary to have a clone of the repository):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;travis encrypt -r swcarpentry-YYYY-MM-DD-INST/bootcamp-pelican GH_TOKEN=TOKENGOTATTHEPREVIOUSSTEP&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;otherwise I've setup a web application that does the encryption in your browser, see: &lt;a href="http://travis-encrypt.github.io"&gt;http://travis-encrypt.github.io&lt;/a&gt;
1. Open &lt;code&gt;.travis.yml&lt;/code&gt; on the website and replace the string under &lt;code&gt;env: global: secure:&lt;/code&gt; with the string from &lt;code&gt;travis encrypt&lt;/code&gt;
1. Push the modified &lt;code&gt;.travis.yml&lt;/code&gt; to trigger the first build by Travis, and then check the log on &lt;a href="http://travis-ci.org"&gt;http://travis-ci.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now any change on the source repository will be picked up automatically by Travis and used to update the website.&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="software-carpentry"></category><category term="pelican"></category></entry><entry><title>openproceedings: Github/FigShare based publishing platform for conference proceedings</title><link href="http://zonca.github.io/2014/02/openproceedings-github-figshare-pelican-conference-proceedings.html" rel="alternate"></link><published>2014-02-13T23:30:00-08:00</published><updated>2014-02-13T23:30:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2014-02-13:/2014/02/openproceedings-github-figshare-pelican-conference-proceedings.html</id><summary type="html">&lt;p&gt;Github provides a great interface for gathering, peer reviewing and accepting papers for conference proceedings, the second step is to publish them on a website either in HTML or PDF form or both.
The Scipy conference is at the forefront on this and did great work in peer reviewing on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Github provides a great interface for gathering, peer reviewing and accepting papers for conference proceedings, the second step is to publish them on a website either in HTML or PDF form or both.
The Scipy conference is at the forefront on this and did great work in peer reviewing on Github, see: &lt;a href="https://github.com/scipy-conference/scipy_proceedings/pull/61"&gt;https://github.com/scipy-conference/scipy_proceedings/pull/61&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to develop a system to make it easier to continously publish updated versions of the papers and also leverage FigShare to provide a long term repository, a sharing interface and a &lt;a href="http://en.wikipedia.org/wiki/Digital_object_identifier"&gt;DOI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I based it on the blog engine &lt;a href="http://getpelican.com"&gt;&lt;code&gt;Pelican&lt;/code&gt;&lt;/a&gt;, developed a plugin &lt;a href="http://github.com/openproceedings/pelican_figshare_pdf"&gt;&lt;code&gt;figshare_pdf&lt;/code&gt;&lt;/a&gt; to upload a PDF of an article via API and configured &lt;a href="http://travis-ci.org"&gt;Travis-ci&lt;/a&gt; as building platform.&lt;/p&gt;
&lt;p&gt;See more details on the project page on Github:
&lt;a href="https://github.com/openproceedings/openproceedings-buildbot"&gt;https://github.com/openproceedings/openproceedings-buildbot&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="pelican"></category><category term="openscience"></category></entry><entry><title>wget file from google drive</title><link href="http://zonca.github.io/2014/01/wget-file-from-google-drive.html" rel="alternate"></link><published>2014-01-31T18:00:00-08:00</published><updated>2014-01-31T18:00:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2014-01-31:/2014/01/wget-file-from-google-drive.html</id><summary type="html">&lt;p&gt;Sometimes it is useful, even more if you have a chromebook, to upload a file to Google Drive and then use &lt;code&gt;wget&lt;/code&gt; to retrieve it from a server remotely.&lt;/p&gt;
&lt;p&gt;In order to do this you need to make the file available to "Anyone with the link", then click on that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes it is useful, even more if you have a chromebook, to upload a file to Google Drive and then use &lt;code&gt;wget&lt;/code&gt; to retrieve it from a server remotely.&lt;/p&gt;
&lt;p&gt;In order to do this you need to make the file available to "Anyone with the link", then click on that link from your local machine and get to the download page that displays a Download button.
Now right-click and select "Show page source" (in Chrome), and search for "downloadUrl", copy the url that starts with &lt;code&gt;https://docs.google.com&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;https://docs.google.com/uc?id\u003d0ByPZe438mUkZVkNfTHZLejFLcnc\u0026export\u003ddownload\u0026revid\u003d0ByPZe438mUkZbUIxRkYvM2dwbVduRUxSVXNERm0zZFFiU2c0PQ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is unicode, so open &lt;code&gt;Python&lt;/code&gt; and do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;download_url = &amp;quot;PASTE HERE&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;print download_url.decode(&amp;quot;unicode_escape&amp;quot;)&lt;/span&gt;
&lt;span class="err"&gt;u&amp;#39;https://docs.google.com/uc?id=0ByPZe438mUkZVkNfTHZLejFLcnc&amp;amp;export=download&amp;amp;revid=0ByPZe438mUkZbUIxRkYvM2dwbVduRUxSVXNERm0zZFFiU2c0PQ&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last url can be pasted into a terminal and used with &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="bash"></category></entry><entry><title>Run IPython Notebook on a HPC Cluster via PBS</title><link href="http://zonca.github.io/2013/12/run-ipython-notebook-on-HPC-cluster-via-PBS.html" rel="alternate"></link><published>2013-12-18T16:30:00-08:00</published><updated>2013-12-18T16:30:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-12-18:/2013/12/run-ipython-notebook-on-HPC-cluster-via-PBS.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://ipython.org/notebook.html"&gt;IPython notebook&lt;/a&gt; is a great tool for data exploration
and visualization.
It is suitable in particular for analyzing a large amount of data remotely on a computing node
of a HPC cluster and visualize it in a browser that runs on a local machine.
In this configuration, the interface …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://ipython.org/notebook.html"&gt;IPython notebook&lt;/a&gt; is a great tool for data exploration
and visualization.
It is suitable in particular for analyzing a large amount of data remotely on a computing node
of a HPC cluster and visualize it in a browser that runs on a local machine.
In this configuration, the interface is local, it is very responsive, but the amount of memory
and CPU horsepower is provided by a HPC computing node.&lt;/p&gt;
&lt;p&gt;Also, it is possible to keep the notebook server running, disconnect and reconnect later from
another machine to the same session.&lt;/p&gt;
&lt;p&gt;I created a script which is very general and can be used on most HPC cluster and published it on Github:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pyHPC/ipynbhpc"&gt;https://github.com/pyHPC/ipynbhpc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once the script is running, it is possible to connect to &lt;code&gt;localhost:PORT&lt;/code&gt; and visualize the 
IPython notebook, see the following screenshot of Chromium running locally on my machine
connected to a IPython notebook running on a Gordon computing node:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/run-ipython-notebook-on-HPC-cluster-via-PBS_screenshot.png" alt="IPython notebook on Gordon" style="width: 730px;"/&gt;&lt;/p&gt;</content><category term="misc"></category><category term="ipython"></category><category term="ipython-notebook"></category><category term="HPC"></category></entry><entry><title>Joining San Diego Supercomputer Center</title><link href="http://zonca.github.io/2013/12/joining-sandiego-supercomputer-center.html" rel="alternate"></link><published>2013-12-10T13:30:00-08:00</published><updated>2013-12-10T13:30:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-12-10:/2013/12/joining-sandiego-supercomputer-center.html</id><summary type="html">&lt;p&gt;&lt;code&gt;TL;DR&lt;/code&gt;
Left UCSB after 4 years, got staff position at San Diego Supercomputer Center within UCSD, will be helping research groups analyze their data on Gordon and more. Still 20% on Planck.&lt;/p&gt;
&lt;p&gt;I spent 4 great years at UCSB with Peter Meinhold working on analyzing Cosmic Microwave Background data …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;TL;DR&lt;/code&gt;
Left UCSB after 4 years, got staff position at San Diego Supercomputer Center within UCSD, will be helping research groups analyze their data on Gordon and more. Still 20% on Planck.&lt;/p&gt;
&lt;p&gt;I spent 4 great years at UCSB with Peter Meinhold working on analyzing Cosmic Microwave Background data from the ESA Planck space mission.
Cosmology is fascinating, also I enjoyed working with a very open minded team, that always left large freedom in choosing the techniques and the software tools for the job.&lt;/p&gt;
&lt;p&gt;My work has been mainly focused on understanding and characterizing large amount of data using &lt;code&gt;Python&lt;/code&gt; (and &lt;code&gt;C++&lt;/code&gt;) on NERSC supercomputers.
I was neither interested nor fit for a traditional academic career, and I was looking for a job that allowed me to focus on doing research/data analysis full time.&lt;/p&gt;
&lt;p&gt;The perfect opportunity showed up, as the San Diego Supercomputer Center was looking for a computational scientist with a strong scientific background in any field of science to help research teams jump into supercomputing, specifically newcomers.  This involves having the opportunity to collaborate with groups in any area of science, the first projects I am going to work on will be in Astrophysics, Quantum Chemistry and Genomics!&lt;/p&gt;
&lt;p&gt;I also have the opportunity to continue my work on calibration and mapmaking of Planck data in collaboration with UCSB for 20% of my time.&lt;/p&gt;</content><category term="misc"></category><category term="jobs"></category></entry><entry><title>Published paper on Destriping Cosmic Microwave Background Polarimeter data</title><link href="http://zonca.github.io/2013/11/published-paper-destriping-CMB-polarimeter.html" rel="alternate"></link><published>2013-11-20T21:30:00-08:00</published><updated>2013-11-20T21:30:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-11-20:/2013/11/published-paper-destriping-CMB-polarimeter.html</id><summary type="html">&lt;p&gt;TL;DR version:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preprint on arxiv: &lt;a href="http://arxiv.org/abs/1309.5609"&gt;Destriping Cosmic Microwave Background Polarimeter data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Destriping &lt;code&gt;python&lt;/code&gt; code on github: &lt;a href="https://github.com/zonca/dst"&gt;&lt;code&gt;dst&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Output maps and sample input data on figshare: &lt;a href="http://figshare.com/articles/BMachine_40GHz_CMB_Polarimeter_sky_maps/644507"&gt;BMachine 40GHz CMB Polarimeter sky maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Paywalled published paper: &lt;a href="http://dx.doi.org/10.1016/j.ascom.2013.10.002"&gt;Destriping Cosmic Microwave Background Polarimeter data&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My last paper was published by &lt;a href="http://www.journals.elsevier.com/astronomy-and-computing/"&gt;Astronomy and Computing …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;TL;DR version:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preprint on arxiv: &lt;a href="http://arxiv.org/abs/1309.5609"&gt;Destriping Cosmic Microwave Background Polarimeter data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Destriping &lt;code&gt;python&lt;/code&gt; code on github: &lt;a href="https://github.com/zonca/dst"&gt;&lt;code&gt;dst&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Output maps and sample input data on figshare: &lt;a href="http://figshare.com/articles/BMachine_40GHz_CMB_Polarimeter_sky_maps/644507"&gt;BMachine 40GHz CMB Polarimeter sky maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Paywalled published paper: &lt;a href="http://dx.doi.org/10.1016/j.ascom.2013.10.002"&gt;Destriping Cosmic Microwave Background Polarimeter data&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My last paper was published by &lt;a href="http://www.journals.elsevier.com/astronomy-and-computing/"&gt;Astronomy and Computing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The paper is focused on Cosmic Microwave Background data destriping, a map-making tecnique which exploits the fast
scanning of instruments in order to efficiently remove correlated low frequency noise, generally caused by thermal
fluctuations and gain instability of the amplifiers.&lt;/p&gt;
&lt;p&gt;The paper treats in particular the case of destriping data from a polarimeter, i.e. an instrument which directly measures
the polarized signal from the sky, which allows some simplification compared to the case of a simply polarization-sensitive
radiometer.&lt;/p&gt;
&lt;p&gt;I implemented a fully parallel &lt;code&gt;python&lt;/code&gt; implementation of the algorithm based on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://trilinos.sandia.gov/packages/pytrilinos/"&gt;&lt;code&gt;PyTrilinos&lt;/code&gt;&lt;/a&gt; for Distributed Linear Algebra via MPI&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HDF5&lt;/code&gt; for I/O&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cython&lt;/code&gt; for improving the performance of the inner loops&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code is available on Github under GPL.&lt;/p&gt;
&lt;p&gt;The output maps for about 30 days of the UCSB B-Machine polarimeter at 37.5 GHz are available on FigShare.&lt;/p&gt;
&lt;p&gt;The experience of publishing with ASCOM was really positive, I received 2 very helpful reviews that drove me to
work on several improvements on the paper.&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="paper"></category><category term="destriping"></category><category term="openscience"></category></entry><entry><title>Jiffylab multiuser IPython notebooks</title><link href="http://zonca.github.io/2013/10/jiffylab-multiuser-ipython-notebooks.html" rel="alternate"></link><published>2013-10-14T10:30:00-07:00</published><updated>2013-10-14T10:30:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-10-14:/2013/10/jiffylab-multiuser-ipython-notebooks.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/ptone/jiffylab"&gt;jiffylab&lt;/a&gt; is a very interesting project by &lt;a href="https://twitter.com/ptone"&gt;Preston Holmes&lt;/a&gt; to provide sandboxed IPython notebooks instances on a server using &lt;a href="http://www.docker.io/"&gt;docker&lt;/a&gt;.
There are several user cases, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In a tutorial about &lt;code&gt;python&lt;/code&gt;, give users instant access to a working IPython notebook&lt;/li&gt;
&lt;li&gt;In a tutorial about some specific &lt;code&gt;python&lt;/code&gt; package, give …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/ptone/jiffylab"&gt;jiffylab&lt;/a&gt; is a very interesting project by &lt;a href="https://twitter.com/ptone"&gt;Preston Holmes&lt;/a&gt; to provide sandboxed IPython notebooks instances on a server using &lt;a href="http://www.docker.io/"&gt;docker&lt;/a&gt;.
There are several user cases, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In a tutorial about &lt;code&gt;python&lt;/code&gt;, give users instant access to a working IPython notebook&lt;/li&gt;
&lt;li&gt;In a tutorial about some specific &lt;code&gt;python&lt;/code&gt; package, give users instant access to a python environment with that package already installed&lt;/li&gt;
&lt;li&gt;Give students in a research group access to &lt;code&gt;python&lt;/code&gt; on a server with preinstalled several packages maintained and updated by an expert user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to install &lt;a href="https://github.com/ptone/jiffylab"&gt;jiffylab&lt;/a&gt; on Ubuntu 12.04&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.docker.io/en/latest/installation/ubuntulinux/#ubuntu-precise"&gt;Install &lt;code&gt;docker&lt;/code&gt; on Ubuntu Precise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Copy-paste each line of &lt;code&gt;linux-setup.sh&lt;/code&gt; to a terminal, to check what is going on step by step&lt;/li&gt;
&lt;li&gt;To start the application, change user to &lt;code&gt;jiffylabweb&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo su jiffylabweb
&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/etc/jiffylab/webapp/
python app.py &lt;span class="c1"&gt;#run in debug mode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Point your browser to the server to check debugging messages, if any.&lt;/li&gt;
&lt;li&gt;Finally start the application in production mode:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python server.py &lt;span class="c1"&gt;#run in production mode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How &lt;code&gt;jiffylab&lt;/code&gt; works&lt;/h2&gt;
&lt;p&gt;Each users gets a sandboxed IPython notebook instance, the user can save the notebooks and reconnect to the same session later. Main things missing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No real authentication system / no HTTPS connection, easy workaround would be to allow access only from local network/VPN/SSH tunnel&lt;/li&gt;
&lt;li&gt;No scientific packages preinstalled, need to customize the docker image to have &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt;, &lt;code&gt;pandas&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;No access to common filesystem, read-only, this I think is the most pressing feature missing, &lt;a href="https://github.com/ptone/jiffylab/issues/12"&gt;issue already on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think that just adding the common filesystem would be enough to make the project already usable to provide students a way to easily get started with python.&lt;/p&gt;
&lt;h2&gt;Few screenshots&lt;/h2&gt;
&lt;h3&gt;Login page&lt;/h3&gt;
&lt;p&gt;&lt;img src="/images/jiffylab_intro.png" alt="Jiffylab Login page" style="width: 730px;"/&gt;&lt;/p&gt;
&lt;h3&gt;IPython notebook dashboard&lt;/h3&gt;
&lt;p&gt;&lt;img src="/images/jiffylab_dashboard.png" alt="Jiffylab IPython notebook dashboard" style="width: 730px;"/&gt;&lt;/p&gt;
&lt;h3&gt;IPython notebook&lt;/h3&gt;
&lt;p&gt;&lt;img src="/images/jiffylab_notebook.png" alt="Jiffylab IPython notebook" style="width: 730px;"/&gt;&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="ipython-notebook"></category></entry><entry><title>How to log exceptions in Python</title><link href="http://zonca.github.io/2013/10/how-to-log-exceptions-in-python.html" rel="alternate"></link><published>2013-10-01T10:30:00-07:00</published><updated>2013-10-01T10:30:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-10-01:/2013/10/how-to-log-exceptions-in-python.html</id><summary type="html">&lt;p&gt;Sometimes it is useful to just catch any exception, write details to a log file and continue execution.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;Python&lt;/code&gt; standard library, it is possible to use the &lt;code&gt;logging&lt;/code&gt; and &lt;code&gt;exceptions&lt;/code&gt; modules to achieve this.
First of all, we want to catch any exception, but also being able to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes it is useful to just catch any exception, write details to a log file and continue execution.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;Python&lt;/code&gt; standard library, it is possible to use the &lt;code&gt;logging&lt;/code&gt; and &lt;code&gt;exceptions&lt;/code&gt; modules to achieve this.
First of all, we want to catch any exception, but also being able to access all information about it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;my_function_1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we want to write those to a logging file, so we need to setup the logging module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;main.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;filemode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://gist.github.com/zonca/6782980"&gt;In the following gist&lt;/a&gt; everything together, with also &lt;a href="http://stackoverflow.com/questions/2380073/how-to-identify-what-function-call-raise-an-exception-in-python"&gt;function name detection from Alex Martelli&lt;/a&gt;:&lt;/p&gt;
&lt;script src="https://gist.github.com/zonca/6782980.js"&gt;&lt;/script&gt;

&lt;p&gt;Here the output log:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2013-10-01 11:32:56,466 - ERROR - Function my_function_1() raised &amp;lt;type &amp;#39;exceptions.IndexError&amp;#39;&amp;gt; (Sequence index out of range.): Some indexing error
2013-10-01 11:32:56,466 - ERROR - Function my_function_2() raised &amp;lt;class &amp;#39;my_module.MyException&amp;#39;&amp;gt; (This is my own Exception): Something went quite wrong
2013-10-01 11:32:56,466 - ERROR - Function my_function_1_wrapper() raised &amp;lt;type &amp;#39;exceptions.IndexError&amp;#39;&amp;gt; (Sequence index out of range.): Some indexing error
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="python"></category><category term="exceptions"></category></entry><entry><title>Google Plus comments plugin for Pelican</title><link href="http://zonca.github.io/2013/09/google-plus-comments-plugin-for-pelican.html" rel="alternate"></link><published>2013-09-27T17:45:00-07:00</published><updated>2013-09-27T17:45:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-09-27:/2013/09/google-plus-comments-plugin-for-pelican.html</id><summary type="html">&lt;p&gt;There has been recently several discussions about 
&lt;a href="http://www.popsci.com/science/article/2013-09/why-were-shutting-our-comments"&gt;whether comments are any useful on blogs&lt;/a&gt;
I think it is important to find better ways to connect blogs to social networks.
In my opinion the most suitable social network for this is Google+, because there is space for larger discussion, without Twitter's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There has been recently several discussions about 
&lt;a href="http://www.popsci.com/science/article/2013-09/why-were-shutting-our-comments"&gt;whether comments are any useful on blogs&lt;/a&gt;
I think it is important to find better ways to connect blogs to social networks.
In my opinion the most suitable social network for this is Google+, because there is space for larger discussion, without Twitter's character limit.&lt;/p&gt;
&lt;p&gt;So, for my small blog I've decided to implement the Google+ commenting system, which Google originally implemented just for Blogger but that &lt;a href="http://browsingthenet.blogspot.com/2013/04/google-plus-comments-on-any-website.html"&gt;works on any website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See it in action below.&lt;/p&gt;
&lt;p&gt;The plugin is available in the &lt;code&gt;googleplus_comments&lt;/code&gt; branch in:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/zonca/pelican-plugins/tree/googleplus_comments/googleplus_comments"&gt;https://github.com/zonca/pelican-plugins/tree/googleplus_comments/googleplus_comments&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="pelican"></category><category term="github"></category></entry><entry><title>How to automatically build your Pelican blog and publish it to Github Pages</title><link href="http://zonca.github.io/2013/09/automatically-build-pelican-and-publish-to-github-pages.html" rel="alternate"></link><published>2013-09-26T13:45:00-07:00</published><updated>2013-09-26T13:45:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-09-26:/2013/09/automatically-build-pelican-and-publish-to-github-pages.html</id><summary type="html">&lt;p&gt;Something I like a lot about Jekyll, the Github static blog generator, is that you just push commits to your repository and Github takes care of re-building and publishing your website.
Thanks to this, it is possible to create a quick blog post from the Github web interface, without the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Something I like a lot about Jekyll, the Github static blog generator, is that you just push commits to your repository and Github takes care of re-building and publishing your website.
Thanks to this, it is possible to create a quick blog post from the Github web interface, without the need to use a machine with Python environment.&lt;/p&gt;
&lt;p&gt;The Pelican developers have a &lt;a href="http://blog.getpelican.com/using-pelican-with-heroku.html"&gt;method for building and deploying Pelican on Heroku&lt;/a&gt;, which is really useful, but I would like instead to use Github Pages.&lt;/p&gt;
&lt;p&gt;I realized that the best way to do this is to rely on &lt;a href="https://travis-ci.org/"&gt;Travis-CI&lt;/a&gt;, as the build/deploy workflow is pretty similar to install/unit-testing Travis is designed for.&lt;/p&gt;
&lt;h2&gt;How to setup Pelican to build on Travis&lt;/h2&gt;
&lt;p&gt;I suggest to use 2 separate git repositories on Github for the source and the built website, let's first only create the repository for the source:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create the &lt;code&gt;yourusername.github.io-source&lt;/code&gt; repository for Pelican and add it as &lt;code&gt;origin&lt;/code&gt; in your Pelican folder repository&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add a &lt;code&gt;requirements.txt&lt;/code&gt; file in your Pelican folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zonca&lt;/span&gt;&lt;span class="sr"&gt;/zonca.github.io-source/&lt;/span&gt;&lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;add a &lt;code&gt;.travis.yml&lt;/code&gt; file to your repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zonca&lt;/span&gt;&lt;span class="sr"&gt;/zonca.github.io-source/&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;travis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to create the encrypted token under env, you can login to the Github web interface to get an &lt;a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use"&gt;Authentication Token&lt;/a&gt;, and then install the &lt;code&gt;travis&lt;/code&gt; command line tool with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# on Ubuntu you need ruby dev&lt;/span&gt;
&lt;span class="err"&gt;sudo apt-get install ruby1.9.1-dev&lt;/span&gt;
&lt;span class="err"&gt;sudo gem install travis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and run from inside the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;travis encrypt GH_TOKEN=LONGTOKENFROMGITHUB --add env.global&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then add also the &lt;code&gt;deploy.sh&lt;/code&gt; script and update the global variable with yours:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zonca&lt;/span&gt;&lt;span class="sr"&gt;/zonca.github.io-source/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can create the repository that will host the actual blog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create the &lt;code&gt;yourusername.github.io&lt;/code&gt; repository for the website (with initial readme, so you can clone it)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally we can connect to &lt;a href="https://travis-ci.org/"&gt;Travis-CI&lt;/a&gt;, connect our Github profile and activate Continous Integration on our &lt;code&gt;yourusername.github.io-source&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;Now, you can push a new commit to your source repository and check on Travis if the build and deploy is successful, hopefully it is (joking, no way it is going to work on the first try!).&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="travis-ci"></category><category term="github"></category></entry><entry><title>clviewer, interactive plot of CMB spectra</title><link href="http://zonca.github.io/2013/09/clviewer-interactive-plot-of-CMB-spectra.html" rel="alternate"></link><published>2013-09-17T18:30:00-07:00</published><updated>2013-09-17T18:30:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-09-17:/2013/09/clviewer-interactive-plot-of-CMB-spectra.html</id><summary type="html">&lt;p&gt;Today it was HackDay at &lt;a href="http://dotastronomy.com"&gt;.Astronomy&lt;/a&gt;, so I felt compelled to hack something around myself,
creating something I have been thinking for a while after my previous work on &lt;a href="http://zonca.github.io/2013/08/interactive-figures-planck-power-spectra.html"&gt;Interactive CMB power spectra in the browser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The idea is to get text files from a user and load it in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today it was HackDay at &lt;a href="http://dotastronomy.com"&gt;.Astronomy&lt;/a&gt;, so I felt compelled to hack something around myself,
creating something I have been thinking for a while after my previous work on &lt;a href="http://zonca.github.io/2013/08/interactive-figures-planck-power-spectra.html"&gt;Interactive CMB power spectra in the browser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The idea is to get text files from a user and load it in a browser-based interactive display built on top of the &lt;a href="http://d3js.org"&gt;d3.js&lt;/a&gt; and &lt;a href="http://code.shutterstock.com/rickshaw/"&gt;rickshaw&lt;/a&gt; libraries.&lt;/p&gt;
&lt;p&gt;Similar to &lt;a href="http://nbviewer.ipython.org/"&gt;nbviewer&lt;/a&gt;, I think it is very handy to load data from &lt;a href="https://gist.github.com/"&gt;Github gists&lt;/a&gt;, because then there is no need of uploading files and it is easier to circulate links.&lt;/p&gt;
&lt;p&gt;So I created a small web app, in &lt;code&gt;Python&lt;/code&gt; of course, using &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; and deployed on &lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt;.
It just gets a gist number, calls the Github APIs to load the files, and displays them in the browser:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application website: &lt;a href="http://clviewer.herokuapp.com"&gt;http://clviewer.herokuapp.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Example input data: &lt;a href="https://gist.github.com/zonca/6599016"&gt;https://gist.github.com/zonca/6599016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Example interactive plot: &lt;a href="http://clviewer.herokuapp.com/6599016"&gt;http://clviewer.herokuapp.com/6599016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source: &lt;a href="https://github.com/zonca/clviewer"&gt;https://github.com/zonca/clviewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="cosmology"></category><category term="python"></category><category term="astrophysics"></category><category term="Planck"></category><category term="dotastronomy"></category></entry><entry><title>Planck CMB map at high resolution</title><link href="http://zonca.github.io/2013/09/Planck-CMB-map-at-high-resolution.html" rel="alternate"></link><published>2013-09-10T14:00:00-07:00</published><updated>2013-09-10T14:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-09-10:/2013/09/Planck-CMB-map-at-high-resolution.html</id><summary type="html">&lt;p&gt;Prompted by a colleague, I created a high-resolution version of the Cosmic Microwave Background map in MollWeide projection released by the Planck collaboration, available on the &lt;a href="http://irsa.ipac.caltech.edu/data/Planck/release_1/all-sky-maps/previews/COM_CompMap_CMB-smica_2048_R1.20/index.html"&gt;Planck Data Release Website&lt;/a&gt; in FITS format.&lt;/p&gt;
&lt;p&gt;The map is a PNG at a resolution of 17469x8796 pixels, which is suitable for printing at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Prompted by a colleague, I created a high-resolution version of the Cosmic Microwave Background map in MollWeide projection released by the Planck collaboration, available on the &lt;a href="http://irsa.ipac.caltech.edu/data/Planck/release_1/all-sky-maps/previews/COM_CompMap_CMB-smica_2048_R1.20/index.html"&gt;Planck Data Release Website&lt;/a&gt; in FITS format.&lt;/p&gt;
&lt;p&gt;The map is a PNG at a resolution of 17469x8796 pixels, which is suitable for printing at 300dpi up to 60x40 inch, or 150x100 cm, file size is about 150MB.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: now with Planck color scale&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: previous version had grayed out pixels in the galactic plane represents the fraction of the sky that is not possible to reconstruct due to bright galactic sources. The last version uses inpainting to create a constrained CMB realization with the same statistics as the observed CMB to fill the unobserved pixels, more details in the &lt;a href="http://www.sciops.esa.int/wikiSI/planckpla/index.php?title=CMB_and_astrophysical_component_maps&amp;amp;instance=Planck_Public_PLA"&gt;Planck Explanatory Supplement&lt;/a&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dx.doi.org/10.6084/m9.figshare.795296"&gt;High Resolution image on FigShare&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small size preview:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Preview of Planck CMB map" src="/images/Planck-CMB-map-at-high-resolution_planck_cmb_map.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python code:&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/zonca/6515744.js"&gt;&lt;/script&gt;</content><category term="misc"></category><category term="cosmology"></category><category term="python"></category><category term="astrophysics"></category><category term="Planck"></category></entry><entry><title>Run Hadoop Python jobs on Amazon with MrJob</title><link href="http://zonca.github.io/2013/09/run-hadoop-python-jobs-on-amazon-with-mrjob.html" rel="alternate"></link><published>2013-09-02T02:36:00-07:00</published><updated>2013-09-02T02:36:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-09-02:/2013/09/run-hadoop-python-jobs-on-amazon-with-mrjob.html</id><summary type="html">&lt;p&gt;&lt;br/&gt;
First we need to install mrjob with:
&lt;br/&gt;
&lt;blockquote class="tr_bq"&gt;
 pip install mrjob
&lt;/blockquote&gt;
I am starting with a simple example of word counting. Previously I implemented this directly using the hadoop streaming interface, therefore mapper and reducer were scripts that read from standard input and print to standard output, see mapper.py and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;br/&gt;
First we need to install mrjob with:
&lt;br/&gt;
&lt;blockquote class="tr_bq"&gt;
 pip install mrjob
&lt;/blockquote&gt;
I am starting with a simple example of word counting. Previously I implemented this directly using the hadoop streaming interface, therefore mapper and reducer were scripts that read from standard input and print to standard output, see mapper.py and reducer.py in:
&lt;br/&gt;
&lt;br/&gt;
&lt;a href="https://github.com/zonca/python-wordcount-hadoop"&gt;
 https://github.com/zonca/python-wordcount-hadoop
&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;
With MrJob instead the interface is a little different, we implement the mapper  method of our subclass of MrJob that already gets a "line" argument and yields the output as a tuple like ("word", 1).
&lt;br/&gt;
&lt;div&gt;
 MrJob makes the implementation of the reducer particularly simple. Using hadoop-streaming directly, we needed also to first parse back the output of the mapper into python objects, while MrJob does it for you and gives directly the key and the list of count, that we just need to sum.
&lt;/div&gt;
&lt;div&gt;
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
 The code is pretty simple:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;script src="http://gist-it.appspot.com/github/zonca/python-wordcount-hadoop/blob/master/mrjob/word_count_mrjob.py"&gt;
 &lt;/script&gt;
 &lt;div&gt;
  &lt;br/&gt;
 &lt;/div&gt;
 First we can test locally with 2 different methods, either:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;blockquote class="tr_bq"&gt;
  python word_count_mrjob.py gutemberg/20417.txt.utf-8
 &lt;/blockquote&gt;
 &lt;br/&gt;
 or:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;blockquote class="tr_bq"&gt;
  python word_count_mrjob.py --runner=local gutemberg/20417.txt.utf-8
 &lt;/blockquote&gt;
 &lt;br/&gt;
 The first is a simple local test, the seconds sets some hadoop variables and uses multiprocessing to run the mapper in parallel.
 &lt;br/&gt;
 &lt;div&gt;
  &lt;br/&gt;
 &lt;/div&gt;
 &lt;span style="font-size: large;"&gt;
  Run on Amazon Elastic Map Reduce
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div&gt;
 Next step is submitting the job to EMR.
 &lt;br/&gt;
 First get an account on Amazon Web Services from
 &lt;a href="http://aws.amazon.com/"&gt;
  aws.amazon.com
 &lt;/a&gt;
 .
 &lt;br/&gt;
 &lt;br/&gt;
 Setup MrJob with Amazon:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="http://pythonhosted.org/mrjob/guides/emr-quickstart.html#amazon-setup"&gt;
  http://pythonhosted.org/mrjob/guides/emr-quickstart.html#amazon-setup
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;div&gt;
  Then we just need to choose the "emr" runner for MrJob to take care of:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ul&gt;
   &lt;li&gt;
    Copy the python module to Amazon S3, with requirements
   &lt;/li&gt;
   &lt;li&gt;
    Copy the input data to S3
   &lt;/li&gt;
   &lt;li&gt;
    Create a small EC2 instance (of course we could set it up to run 1000 instead)
   &lt;/li&gt;
   &lt;li&gt;
    Run Hadoop to process the jobs
   &lt;/li&gt;
   &lt;li&gt;
    Create a local web service that allows easy monitoring of the cluster
   &lt;/li&gt;
   &lt;li&gt;
    When completed, copy the results back (this can be disabled to just leave the results on S3.
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
 &lt;div&gt;
  e.g.:
 &lt;/div&gt;
 &lt;blockquote class="tr_bq"&gt;
  python word_count_mrjob.py --runner=emr --aws-region=us-west-2 gutemberg/20417.txt.utf-8
 &lt;/blockquote&gt;
 &lt;div&gt;
  It is important to make sure that the aws-region used by MrJob is the same we used for creating the SSH key on the EC2 console in the MrJob configuration step, i.e. SSH keys are region-specific.
  &lt;br/&gt;
  &lt;br/&gt;
  &lt;span style="font-size: large;"&gt;
   Logs and output of the run
  &lt;/span&gt;
  &lt;br/&gt;
  &lt;br/&gt;
  MrJob copies the needed files to S3:
  &lt;br/&gt;
  &lt;blockquote class="tr_bq"&gt;
   . runemr.sh
   &lt;br/&gt;
   using configs in /home/zonca/.mrjob.conf
   &lt;br/&gt;
   using existing scratch bucket mrjob-ecd1d07aeee083dd
   &lt;br/&gt;
   using s3://mrjob-ecd1d07aeee083dd/tmp/ as our scratch dir on S3
   &lt;br/&gt;
   creating tmp directory /tmp/mrjobjob.zonca.20130901.192250.785550
   &lt;br/&gt;
   Copying non-input files into s3://mrjob-ecd1d07aeee083dd/tmp/mrjobjob.zonca.20130901.192250.785550/files/
   &lt;br/&gt;
   Waiting 5.0s for S3 eventual consistency
   &lt;br/&gt;
   Creating Elastic MapReduce job flow
   &lt;br/&gt;
   Job flow created with ID: j-2E83MO9QZQILB
   &lt;br/&gt;
   Created new job flow j-2E83MO9QZQILB
  &lt;/blockquote&gt;
  Creates the instances:
  &lt;br/&gt;
  &lt;blockquote class="tr_bq"&gt;
   Job launched 30.9s ago, status STARTING: Starting instances
   &lt;br/&gt;
   Job launched 123.9s ago, status BOOTSTRAPPING: Running bootstrap actions
   &lt;br/&gt;
   Job launched 250.5s ago, status RUNNING: Running step (mrjobjob.zonca.20130901.192250.785550: Step 1 of 1)
  &lt;/blockquote&gt;
  Creates an SSH tunnel to the tracker:
  &lt;br/&gt;
  &lt;blockquote class="tr_bq"&gt;
   Opening ssh tunnel to Hadoop job tracker
   &lt;br/&gt;
   Connect to job tracker at: http://localhost:40630/jobtracker.jsp
  &lt;/blockquote&gt;
 &lt;/div&gt;
 Therefore we can connect to that address to check realtime information about the cluster running on EC2, for example:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;div class="separator" style="clear: both; text-align: center;"&gt;
  &lt;a href="http://zonca.github.io/images/run-hadoop-python-jobs-on-amazon-with-mrjob_s1600_awsjobdetails.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;
   &lt;img border="0" height="588" src="http://zonca.github.io/images/run-hadoop-python-jobs-on-amazon-with-mrjob_s640_awsjobdetails.png" width="640"/&gt;
  &lt;/a&gt;
 &lt;/div&gt;
 &lt;br/&gt;
 Once the job completes, MrJob copies the output back to the local machine, here are few lines from the file:
 &lt;br/&gt;
 &lt;blockquote class="tr_bq"&gt;
  "maladies"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  1
  &lt;br/&gt;
  "malaria"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  5
  &lt;br/&gt;
  "male"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  18
  &lt;br/&gt;
  "maleproducing"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  1
  &lt;br/&gt;
  "males"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  5
  &lt;br/&gt;
  "mammal"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  10
  &lt;br/&gt;
  "mammalInstinctive"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  1
  &lt;br/&gt;
  "mammalian"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  4
  &lt;br/&gt;
  "mammallike"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  1
  &lt;br/&gt;
  "mammals"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  87
  &lt;br/&gt;
  "mammoth"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  5
  &lt;br/&gt;
  "mammoths"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  1
  &lt;br/&gt;
  "man"
  &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
  &lt;/span&gt;
  152
 &lt;/blockquote&gt;
 I've been positively impressed that it is so easy to implement and run a MapReduce job with MrJob without need of managing directly EC2 instances or the Hadoop installation.
 &lt;br/&gt;
 This same setup could be used on GB of data with hundreds of instances.
&lt;/div&gt;&lt;/p&gt;</content><category term="misc"></category><category term="bigdata"></category><category term="github"></category><category term="python"></category><category term="aws"></category><category term="hadoop"></category></entry><entry><title>Interactive figures in the browser: CMB Power Spectra</title><link href="http://zonca.github.io/2013/08/interactive-figures-planck-power-spectra.html" rel="alternate"></link><published>2013-08-30T08:52:00-07:00</published><updated>2013-08-30T08:52:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-08-30:/2013/08/interactive-figures-planck-power-spectra.html</id><summary type="html">&lt;p&gt;
 For a long time I've been curious about trying out
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  d3.js
 &lt;/span&gt;
 , the javascript plotting library which is becoming the standard for interactive plotting in the browser.
 &lt;br/&gt;
&lt;/p&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;

&lt;div&gt;
 What is really appealing is the capability of sharing with other people powerful interactive visualization simply via the link to a web page …&lt;/div&gt;</summary><content type="html">&lt;p&gt;
 For a long time I've been curious about trying out
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  d3.js
 &lt;/span&gt;
 , the javascript plotting library which is becoming the standard for interactive plotting in the browser.
 &lt;br/&gt;
&lt;/p&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;

&lt;div&gt;
 What is really appealing is the capability of sharing with other people powerful interactive visualization simply via the link to a web page. This will hopefully be the future of scientific publications, as envisioned, for example, by
 &lt;a href="https://www.authorea.com/"&gt;
  Authorea
 &lt;/a&gt;
 .
&lt;/div&gt;

&lt;div&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
 An interesting example related to my work on Planck is a plot of the high number of Angular Power Spectra of the anisotropies of the Cosmic Microwave Background Temperature.
&lt;/div&gt;

&lt;div&gt;
 The CMB Power spectra describe how the temperature fluctuations were distributed in the sky as a function of the angular scale, for example the largest peak at about 1 degree means that the brightest cold/warm spots of the CMB have that angular size, see
 &lt;a href="http://www.strudel.org.uk/blog/astro/001030.shtml"&gt;
  The Universe Simulator in the browser
 &lt;/a&gt;
 .
&lt;/div&gt;

&lt;div&gt;
 The
 &lt;a href="http://irsa.ipac.caltech.edu/data/Planck/release_1/ancillary-data/"&gt;
  Planck Collaboration released
 &lt;/a&gt;
 a combined spectrum, which aggregates several channels to give the best result, spectra frequency by frequency (for some frequencies split in detector-sets) and a best-fit spectrum given a Universe Model.
&lt;/div&gt;

&lt;div&gt;
 It is also interesting to compare to the latest release spectrum by WMAP with 9 years of data.
&lt;/div&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;

&lt;div&gt;
 The plan is to create a visualization where it is easier to zoom to different angular scales on the horizontal axis and quickly show/hide each curve.
&lt;/div&gt;

&lt;div&gt;
 For this I used
 &lt;a href="http://code.shutterstock.com/rickshaw/"&gt;
  rickshaw
 &lt;/a&gt;
 , a library based on
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  d3.js
 &lt;/span&gt;
 &lt;span style="font-family: inherit;"&gt;
  which makes it easier to create time-series plots.
 &lt;/span&gt;
&lt;/div&gt;

&lt;div&gt;
 &lt;span style="font-family: inherit;"&gt;
  In fact most of the features are already implemented, it is just a matter of configuring them, see the code on github:
 &lt;/span&gt;
 &lt;a href="https://github.com/zonca/visualize-planck-cl"&gt;
  https://github.com/zonca/visualize-planck-cl
 &lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
 The most complex task is actually to load all the data, previously converted to JSON, in the background from the server and push them in a data structure which is understood by rickshaw.
&lt;/div&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;

&lt;div&gt;
 Check out the result:
&lt;/div&gt;

&lt;div style="text-align: center;"&gt;
 &lt;b&gt;
  &lt;a href="http://bit.ly/planck-spectra"&gt;
   http://bit.ly/planck-spectra
  &lt;/a&gt;
 &lt;/b&gt;
&lt;/div&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;</content><category term="misc"></category><category term="javascript"></category><category term="d3"></category><category term="power spectra"></category><category term="astrophysics"></category><category term="Planck"></category></entry><entry><title>Planck CTP angular power spectrum ell binning</title><link href="http://zonca.github.io/2013/08/planck-ctp-angular-power-spectrum-ell.html" rel="alternate"></link><published>2013-08-20T23:03:00-07:00</published><updated>2013-08-20T23:03:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-08-20:/2013/08/planck-ctp-angular-power-spectrum-ell.html</id><summary type="html">&lt;p&gt;
 Planck released a binning of the angular power spectrum in the Explanatory supplement,
 &lt;br/&gt;
 unfortunately the file is in PDF format, non easily machine-readable:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="http://www.sciops.esa.int/wikiSI/planckpla/index.php?title=Frequency_maps_angular_power_spectra&amp;amp;instance=Planck_Public_PLA"&gt;
  http://www.sciops.esa.int/wikiSI/planckpla/index.php?title=Frequency_maps_angular_power_spectra&amp;amp;instance=Planck_Public_PLA
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 So here is a csv version:
 &lt;br/&gt;
 &lt;a href="https://gist.github.com/zonca/6288439"&gt;
  https://gist.github.com/zonca/6288439
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 Follows embedded …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Planck released a binning of the angular power spectrum in the Explanatory supplement,
 &lt;br/&gt;
 unfortunately the file is in PDF format, non easily machine-readable:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="http://www.sciops.esa.int/wikiSI/planckpla/index.php?title=Frequency_maps_angular_power_spectra&amp;amp;instance=Planck_Public_PLA"&gt;
  http://www.sciops.esa.int/wikiSI/planckpla/index.php?title=Frequency_maps_angular_power_spectra&amp;amp;instance=Planck_Public_PLA
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 So here is a csv version:
 &lt;br/&gt;
 &lt;a href="https://gist.github.com/zonca/6288439"&gt;
  https://gist.github.com/zonca/6288439
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 Follows embedded gist.
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;script src="https://gist.github.com/zonca/6288439.js"&gt;
 &lt;/script&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="power spectra"></category><category term="Planck"></category></entry><entry><title>HEALPix map of the Earth using healpy</title><link href="http://zonca.github.io/2013/08/healpix-map-of-earth-using-healpy.html" rel="alternate"></link><published>2013-08-08T19:07:00-07:00</published><updated>2013-08-08T19:07:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-08-08:/2013/08/healpix-map-of-earth-using-healpy.html</id><summary type="html">&lt;p&gt;
 HEALPix maps can also be used to create equal-area pixelized maps of the Earth, RGB colors are not supported in healpy, so we need to convert the image to colorscale.
 &lt;br/&gt;
 The best user case is for using spherical harmonic transforms, e.g. apply a smoothing filter, in this case HEALPix …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 HEALPix maps can also be used to create equal-area pixelized maps of the Earth, RGB colors are not supported in healpy, so we need to convert the image to colorscale.
 &lt;br/&gt;
 The best user case is for using spherical harmonic transforms, e.g. apply a smoothing filter, in this case HEALPix/healpy tools are really efficient.
 &lt;br/&gt;
 However, other tools for transforming between angles (coordinates), 3d vectors and pixels might be useful.
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
 &lt;br/&gt;
 I've created an IPython notebook that provides a simple example:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="http://nbviewer.ipython.org/6187504"&gt;
  http://nbviewer.ipython.org/6187504
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 Here is the output Mollweide projection provided by healpy:
 &lt;br/&gt;
 &lt;br/&gt;
&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;
 &lt;a href="http://zonca.github.io/images/healpix-map-of-earth-using-healpy_s1600_download.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;
  &lt;img border="0" height="230" src="http://zonca.github.io/images/healpix-map-of-earth-using-healpy_s400_download.png" width="400"/&gt;
 &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;
Few notes:
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;ul style="-webkit-text-stroke-width: 0px; color: black; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;
 &lt;li&gt;
  always use
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   flip="geo"
  &lt;/span&gt;
  for plotting, otherwise maps are flipped East-West
 &lt;/li&gt;
 &lt;li&gt;
  increase the resolution of the plots (which is different from the resolution of the map array) by providing at least xsize=2000 to mollview and a reso lower than 1 to gnomview
 &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Export google analytics data via API with Python</title><link href="http://zonca.github.io/2013/08/export-google-analytics-data-via-api.html" rel="alternate"></link><published>2013-08-04T17:47:00-07:00</published><updated>2013-08-04T17:47:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-08-04:/2013/08/export-google-analytics-data-via-api.html</id><summary type="html">&lt;p&gt;
 Fun weekend hacking project: export google analytics data using the google APIs.
 &lt;br/&gt;
 &lt;br/&gt;
 Clone the latest version of the API client from:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="https://code.google.com/p/google-api-python-client"&gt;
  https://code.google.com/p/google-api-python-client
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 there is an example for accessing analytics APIs in the samples/analytics folder,
 &lt;br/&gt;
 but you need to fill in client_secrets.json.
 &lt;br/&gt;
 &lt;br/&gt;
 You can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Fun weekend hacking project: export google analytics data using the google APIs.
 &lt;br/&gt;
 &lt;br/&gt;
 Clone the latest version of the API client from:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="https://code.google.com/p/google-api-python-client"&gt;
  https://code.google.com/p/google-api-python-client
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 there is an example for accessing analytics APIs in the samples/analytics folder,
 &lt;br/&gt;
 but you need to fill in client_secrets.json.
 &lt;br/&gt;
 &lt;br/&gt;
 You can get the credentials from the APIs console:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="https://code.google.com/apis/console"&gt;
  https://code.google.com/apis/console
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 In SERVICES: activate google analytics
 &lt;br/&gt;
 In API Access: Create a "Client ID for installed applications" choosing "Other" as a platform
 &lt;br/&gt;
 &lt;br/&gt;
 Copy the client id and the client secret to client_secrets.json.
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
 &lt;br/&gt;
 Now you only need the profile ID of the google analytics account, it is in the google analytics web interface, just choose the website, then click on Admin, then on the profile name in the profile tab, and then on profile settings.
 &lt;br/&gt;
 &lt;br/&gt;
 You can then run:
 &lt;br/&gt;
 &lt;br/&gt;
&lt;/p&gt;

&lt;blockquote class="tr_bq"&gt;
 python core_reporting_v3_reference.py ga:PROFILEID
&lt;/blockquote&gt;

&lt;p&gt;The first time you run it, it will open a browser for authentication, but then the auth token is saved and used for future requests.
&lt;br/&gt;
&lt;br/&gt;
This retrieves from the APIs the visits to the website from search, with keywords and the number of visits, for example for my blog:
&lt;br/&gt;
&lt;br/&gt;
&lt;blockquote class="tr_bq"&gt;
 Total Metrics For All Results:
 &lt;br/&gt;
 This query returned 25 rows.
 &lt;br/&gt;
 But the query matched 30 total results.
 &lt;br/&gt;
 Here are the metric totals for the matched total results.
 &lt;br/&gt;
 Metric Name  = ga:visits
 &lt;br/&gt;
 Metric Total = 174
 &lt;br/&gt;
 Rows:
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 (not provided)
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 121
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 andrea zonca
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 17
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 butterworth filter python
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 4
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 andrea zonca blog
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 2
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 healpix for ubuntu
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 2
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 healpy install ubuntu
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 2
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 python butterworth filter
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 2
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 zonca andrea
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 2
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 andrea zonca buchrain luzern
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 andrea zonca it
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 astrofisica in pillole
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 bin data healpy
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 ellipticity fwhm
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 enthought and healpy
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 fwhm
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 healpix apt-get
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 healpix repository ubuntu
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 healpix ubuntu 12.04 install
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 healpy ubuntu
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 install healpix ubuntu
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 ipython cluster task output
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 numpy pink noise
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 pink noise numpy
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 python 1/f noise
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
 &lt;br/&gt;
 google
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 python apply mixin
 &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
 &lt;/span&gt;
 1
&lt;/blockquote&gt;
&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;&lt;/p&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>Processing sources in Planck maps with Hadoop and Python</title><link href="http://zonca.github.io/2013/07/processing-planck-sources-with-hadoop.html" rel="alternate"></link><published>2013-07-15T08:16:00-07:00</published><updated>2013-07-15T08:16:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-07-15:/2013/07/processing-planck-sources-with-hadoop.html</id><summary type="html">&lt;h2&gt;
 Purpose
&lt;/h2&gt;

&lt;div&gt;
 The purpose of this post is to investigate how to process in parallel sources extracted from full sky maps, in this case the maps release by Planck, using Hadoop instead of more traditional MPI-based HPC custom software.
&lt;/div&gt;

&lt;div&gt;
 Hadoop is the MapReduce implementation most used in the enterprise world and …&lt;/div&gt;</summary><content type="html">&lt;h2&gt;
 Purpose
&lt;/h2&gt;

&lt;div&gt;
 The purpose of this post is to investigate how to process in parallel sources extracted from full sky maps, in this case the maps release by Planck, using Hadoop instead of more traditional MPI-based HPC custom software.
&lt;/div&gt;

&lt;div&gt;
 Hadoop is the MapReduce implementation most used in the enterprise world and it has been traditionally used to process huge amount of text data (~ TBs) , e.g. web pages or logs, over thousands commodity computers connected over ethernet.
&lt;/div&gt;

&lt;div&gt;
 It allows to distribute the data across the nodes on a distributed file-system (HDFS) and then analyze them ("map" step) locally on each node, the output of the map step is traditionally a set of text (key, value) pairs, that are then sorted by the framework and passed to the "reduce" algorithm, which typically aggregates them and then save them to the distributed file-system.
&lt;/div&gt;

&lt;div&gt;
 Hadoop gives robustness to this process by rerunning failed jobs, distribute the data with redundancy and re-distribute in case of failures, among many other features.
&lt;/div&gt;

&lt;div&gt;
 Most scientist use HPC supercomputers for running large data processing software. Using HPC is necessary for algorithms that require frequent communication across the nodes, implemented via MPI calls over a dedicated high speed network (e.g. infiniband). However, often HPC resources are used for running a large number of jobs that are loosely coupled, i.e. each job runs mostly independently of the others, just a sort of aggregation is performed at the end. In this cases the use of a robust and flexible framework like Hadoop could be beneficial.
&lt;/div&gt;

&lt;div&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
&lt;/div&gt;

&lt;h2&gt;
 Problem description
&lt;/h2&gt;

&lt;div&gt;
 The Planck collaboration (btw I'm part of it...) released in May 2013 a set of full sky maps in Temperature at 9 different frequencies and catalogs of point and extended galactic and extragalactic sources:
&lt;/div&gt;

&lt;div&gt;
 &lt;a href="http://irsa.ipac.caltech.edu/Missions/planck.html"&gt;
  http://irsa.ipac.caltech.edu/Missions/planck.html
 &lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
 Each catalog contains about 1000 sources, and the collaboration released the location and flux of each source.
&lt;/div&gt;

&lt;div&gt;
 The purpose of the analysis is to read each of the sky maps, slice out the section of the map around each source and perform some analysis on that patch of sky, as a simple example, to test the infrastructure, I am just going to compute the mean of the pixels located 10 arcminutes around the center of each source.
&lt;/div&gt;

&lt;div&gt;
 In a production run, we might for example run aperture photometry on each source, or fitting for the source center to check for pointing accuracy.
&lt;/div&gt;

&lt;h2&gt;
 Sources
&lt;/h2&gt;

&lt;p&gt;All files are available on github:
&lt;br/&gt;
&lt;div&gt;
 &lt;a href="https://github.com/zonca/planck-sources-hadoop"&gt;
  https://github.com/zonca/planck-sources-hadoop
 &lt;/a&gt;
&lt;/div&gt;
&lt;h2&gt;
 Hadoop setup
&lt;/h2&gt;
&lt;div&gt;
 I am running on the San Diego Supercomputing data intensive cluster Gordon:
&lt;/div&gt;
&lt;div&gt;
 &lt;a href="http://www.sdsc.edu/us/resources/gordon/"&gt;
  http://www.sdsc.edu/us/resources/gordon/
 &lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
 SDSC has a simplified Hadoop setup based on shell scripts,
 &lt;a href="http://www.sdsc.edu/us/resources/gordon/gordon_hadoop.html"&gt;
  myHadoop
 &lt;/a&gt;
 , which allows running Hadoop as a regular PBS job.
&lt;/div&gt;
&lt;div&gt;
 The most interesting feature is that the Hadoop distributed file-system HDFS is setup on the low-latency local flash drives, one of the distinctive features of Gordon.
&lt;/div&gt;
&lt;h3&gt;
 Using Python with Hadoop-streaming
&lt;/h3&gt;
&lt;div&gt;
 Hadoop applications run natively in Java, however thanks to Hadoop-streaming, we can use stdin and stdout to communicate with a script implemented in any programming language.
&lt;/div&gt;
&lt;div&gt;
 One of the most common choices for scientific applications is Python.
&lt;/div&gt;
&lt;h3&gt;
 Application design
&lt;/h3&gt;
&lt;div&gt;
 Best way to decrease the coupling between different parallel jobs for this application is, instead of analyzing one source at a time, analyze a patch of sky at a time, and loop through all the sources in that region.
&lt;/div&gt;
&lt;div&gt;
 Therefore the largest amount data, the sky map, is only read once by a process, and all the sources are processed. I pre-process the sky map by splitting it in 10x10 degrees patches, saving a 2 columns array with pixel index and map temperature (
 &lt;a href="https://github.com/zonca/planck-sources-hadoop/blob/master/preprocessing.py"&gt;
  preprocessing.py
 &lt;/a&gt;
 ).
&lt;/div&gt;
&lt;div&gt;
 Of course this will produce jobs whose length might be very different, due to the different effective sky area at poles and at equator, and by random number of source per patch, but that's something we do not worry about, that is exactly what Hadoop takes care of.
&lt;/div&gt;
&lt;h2&gt;
 Implementation
&lt;/h2&gt;
&lt;h3&gt;
 Input data
&lt;/h3&gt;
&lt;div&gt;
 The pre-processed patches of sky are available in binary format on a lustre file-system shared by the processes.
&lt;/div&gt;
&lt;div&gt;
 Therefore the text input files for the hadoop jobs are just the list of filenames of the sky patches, one per row.
&lt;/div&gt;
&lt;h3&gt;
 Mapper
&lt;/h3&gt;
&lt;div&gt;
 &lt;a href="https://github.com/zonca/planck-sources-hadoop/blob/master/mapper.py"&gt;
  mapper.py
 &lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div&gt;
 The mapper is fed by Hadoop via stdin with a number of lines extracted from the input files and returns a (key, value) text output for each source and for each statistics we compute on the source.
&lt;/div&gt;
&lt;div&gt;
 In this simple scenario, the only returned key printed to stdout is "SOURCENAME_10arcminmean".
&lt;/div&gt;
&lt;div&gt;
 For example, we can run a serial test by running:
&lt;/div&gt;
&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   echo plancktest/submaps/030_045_025 | ./mapper.py
  &lt;/span&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;span style="font-family: inherit;"&gt;
  and the returned output is:
 &lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;span style="font-family: inherit;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   PCCS1 030 G023.00+40.77_10arcminmean
   &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
   &lt;/span&gt;
   4.49202e-04
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   PCCS1 030 G023.13+42.14_10arcminmean
   &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
   &lt;/span&gt;
   3.37773e-04
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   PCCS1 030 G023.84+45.26_10arcminmean
   &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
   &lt;/span&gt;
   4.69427e-04
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   PCCS1 030 G024.32+48.81_10arcminmean
   &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
   &lt;/span&gt;
   3.79832e-04
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   PCCS1 030 G029.42+43.41_10arcminmean
   &lt;span class="Apple-tab-span" style="white-space: pre;"&gt;
   &lt;/span&gt;
   4.11600e-04
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div style="font-family: inherit;"&gt;
  &lt;br/&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;
 Reducer
&lt;/h3&gt;
&lt;div&gt;
 There is no need for a reducer in this scenario, so Hadoop will just use the default IdentityReducer, which just aggregates all the mappers outputs to a single output file.
&lt;/div&gt;
&lt;h3&gt;
 Hadoop call
&lt;/h3&gt;
&lt;div&gt;
 &lt;a href="https://github.com/zonca/planck-sources-hadoop/blob/master/run.pbs"&gt;
  run.pbs
 &lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div&gt;
 The hadoop call is:
&lt;/div&gt;
&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   &lt;code&gt;
    $HADOOP_HOME/bin/hadoop --config $HADOOP_CONF_DIR jar $HADOOP_HOME/contrib/streaming/hadoop&lt;em&gt;streaming&lt;/em&gt;.jar -file $FOLDER/mapper.py -mapper $FOLDER/mapper.py -input /user/$USER/Input/* -output /user/$USER/Output
   &lt;/code&gt;
  &lt;/span&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div&gt;
 So we are using the Hadoop-streaming interface and providing just the mapper, the input text files (list of sources) had been already copied to HDFS, the output needs then to be copied from HDFS to the local file-system, see run.pbs.
&lt;/div&gt;
&lt;h2&gt;
 Hadoop run and results
&lt;/h2&gt;
&lt;div&gt;
 For testing purposes we have just used 2 of the 9 maps (30 and 70 GHz), and processed all the total of ~2000 sources running Hadoop on 4 nodes.
&lt;/div&gt;
&lt;div&gt;
 Processing takes about 5 minutes, Hadoop automatically chooses the number of mappers, and in this case only uses 2 mappers, as I think it reserves a couple of nodes to run the Scheduler and auxiliary processes.
&lt;/div&gt;
&lt;div&gt;
 The outputs of the mappers are then joined, sorted and written on a single file, see the output file
&lt;/div&gt;
&lt;div&gt;
 &lt;a href="https://github.com/zonca/planck-sources-hadoop/blob/master/output/SAMPLE_RESULT_part-00000"&gt;
  output/SAMPLE_RESULT_part-00000
 &lt;/a&gt;
 .
&lt;/div&gt;
&lt;div&gt;
 See the full log
 &lt;a href="https://github.com/zonca/planck-sources-hadoop/blob/master/sample_logs.txt"&gt;
  sample_logs.txt
 &lt;/a&gt;
 extracted running:
&lt;/div&gt;
&lt;div&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  /opt/hadoop/bin/hadoop job -history output
 &lt;/span&gt;
&lt;/div&gt;
&lt;h3&gt;
 &lt;span style="font-family: inherit;"&gt;
  Comparison of the results with the catalog
 &lt;/span&gt;
&lt;/h3&gt;
&lt;div&gt;
 &lt;span style="font-family: inherit;"&gt;
  Just for a rough consistency check, I compared the normalized temperatures computed with Hadoop using just the mean of the pixels in a radius of 10 arcmin to the fluxes computed by the Planck collaboration. I find a general agreement with the expected noise excess.
 &lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br/&gt;
 &lt;div class="separator" style="clear: both; text-align: left;"&gt;
  &lt;a href="http://zonca.github.io/images/processing-planck-sources-with-hadoop_s1600_download.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;
   &lt;img border="0" src="http://zonca.github.io/images/processing-planck-sources-with-hadoop_s1600_download.png"/&gt;
  &lt;/a&gt;
 &lt;/div&gt;
 &lt;h2&gt;
  Conclusion
 &lt;/h2&gt;
 &lt;div&gt;
  The advantage of using Hadoop is mainly the scalability, this same setup could be used on AWS or Cloudera using hundreds of nodes. All the complexity of scaling is managed by Hadoop.
 &lt;/div&gt;
 &lt;div&gt;
  The main concern is related to loading the data, in a HPC supercomputer it is easy to load directly from a high-performance shared disk, in a cloud environment instead we might opt for a similar setup loading data from S3, but the best would be to use Hadoop itself and stream the data to the mapper in the input files. This is complicated by the fact that Hadoop-streaming only supports text and not binary, the options would be either find a way to pack the binary data in a text file or use Hadoop-pipes instead of Hadoop-streaming.
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br/&gt;
 &lt;/div&gt;
 &lt;div class="separator" style="clear: both; text-align: center;"&gt;
  &lt;br/&gt;
 &lt;/div&gt;
 &lt;div class="separator" style="clear: both; text-align: center;"&gt;
  &lt;br/&gt;
 &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</content><category term="misc"></category><category term="hpc"></category><category term="supercomputing"></category><category term="python"></category><category term="Planck"></category><category term="hadoop"></category></entry><entry><title>How to use the IPython notebook on a small computing cluster</title><link href="http://zonca.github.io/2013/06/how-to-use-ipython-notebook-on-small.html" rel="alternate"></link><published>2013-06-22T11:12:00-07:00</published><updated>2013-06-22T11:12:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-06-22:/2013/06/how-to-use-ipython-notebook-on-small.html</id><summary type="html">&lt;p&gt;&lt;a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html"&gt;The IPython notebook&lt;/a&gt; is a powerful and easy to use interface for using Python and particularly useful when running remotely, because it allows the interface to run locally in your browser, while the computing kernel runs remotely on the cluster.&lt;/p&gt;
&lt;h2&gt;1) Configure IPython notebook:&lt;/h2&gt;
&lt;p&gt;First time you use the notebook …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html"&gt;The IPython notebook&lt;/a&gt; is a powerful and easy to use interface for using Python and particularly useful when running remotely, because it allows the interface to run locally in your browser, while the computing kernel runs remotely on the cluster.&lt;/p&gt;
&lt;h2&gt;1) Configure IPython notebook:&lt;/h2&gt;
&lt;p&gt;First time you use the notebook you need to follow this configuration steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Login to the cluster&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load the python environment, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;module load pythonEPD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the profile files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ipython profile create # creates the configuration files&lt;/span&gt;
&lt;span class="err"&gt;vim .ipython/profile_default/ipython_notebook_config.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;set a password, see instructions in the file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the port to something specific to you, &lt;strong&gt;please change this to avoid conflict with other users&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;c.NotebookApp.port = 8900&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set a certificate to serve the notebook over https:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;c.NotebookApp.certfile = u&amp;#39;/home/zonca/mycert.pem&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or create a new certificate, see &lt;a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html"&gt;the documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;c.NotebookApp.open_browser = False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2) Run the notebook for testing on the login node.&lt;/h2&gt;
&lt;p&gt;You can use IPython notebook on the login node if you do not use much memory, e.g. &amp;lt; 300MB.
ssh into the login node, at the terminal run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ipython notebook --pylab=inline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;open the browser on your local machine and connect to (always use https, replace 8900 with your port):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;https://LOGINNODEURL:8900&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dismiss all the browser complaints about the certificate and go ahead.&lt;/p&gt;
&lt;h2&gt;3) Run the notebook on a computing node&lt;/h2&gt;
&lt;p&gt;You should always use a computing node whenever you need a large amount of resources.&lt;/p&gt;
&lt;p&gt;Create a folder &lt;code&gt;notebooks/&lt;/code&gt; in your home, just copy this script in &lt;code&gt;runipynb.pbs&lt;/code&gt; in your that folder:&lt;/p&gt;
&lt;script src="https://gist.github.com/zonca/5840518.js"&gt;
&lt;/script&gt;

&lt;p&gt;replace &lt;code&gt;LOGINNODEURL&lt;/code&gt; with the url of the login node of your cluster.&lt;/p&gt;
&lt;p&gt;NOTICE: you need to ask the sysadmin to set &lt;code&gt;GatewayPorts yes&lt;/code&gt; in &lt;code&gt;sshd_config&lt;/code&gt; on the login node to allow access externally to the notebook.&lt;/p&gt;
&lt;p&gt;Submit the job to the queue running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;qsub runipynb.pbs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then from your local machine connect to (replace 8900 with your port):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;https://LOGINNODEURL:8900&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Other introductory python resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://scipy-lectures.github.io/"&gt;Scientific computing with Python&lt;/a&gt;, large and detailed introduction to Python, Numpy, Matplotlib, Scipy&lt;/li&gt;
&lt;li&gt;My &lt;a href="https://github.com/zonca/PythonHPC"&gt;Python for High performance computing&lt;/a&gt;: slides and few ipython notebook examples, see the README&lt;/li&gt;
&lt;li&gt;My &lt;a href="https://github.com/zonca/healpytut/blob/master/healpytut.pdf?raw=true"&gt;short Python and healpy tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="hpc"></category><category term="ipython"></category></entry><entry><title>IPython parallell setup on Carver at NERSC</title><link href="http://zonca.github.io/2013/04/ipython-parallell-setup-on-carver-at.html" rel="alternate"></link><published>2013-04-11T05:53:00-07:00</published><updated>2013-04-11T05:53:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-04-11:/2013/04/ipython-parallell-setup-on-carver-at.html</id><summary type="html">&lt;p&gt;
 IPython parallel is one of the easiest ways to spawn several Python sessions on a Supercomputing cluster and process jobs in parallel.
 &lt;br/&gt;
 &lt;br/&gt;
 On Carver, the basic setup is running a controller on the login node, and submit engines to the computing nodes via PBS.
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
 &lt;br/&gt;
 First create your configuration files running …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 IPython parallel is one of the easiest ways to spawn several Python sessions on a Supercomputing cluster and process jobs in parallel.
 &lt;br/&gt;
 &lt;br/&gt;
 On Carver, the basic setup is running a controller on the login node, and submit engines to the computing nodes via PBS.
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
 &lt;br/&gt;
 First create your configuration files running:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  ipython profile create --parallel
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 Therefore in the ~/.config/ipython/profile_default/ipcluster_config.py, just need to set:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  c.IPClusterStart.controller_launcher_class = 'LocalControllerLauncher'
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  c.IPClusterStart.engine_launcher_class = 'PBS'
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  c.PBSLauncher.batch_template_file = u'~/.config/ipython/profile_default/pbs.engine.template'
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 You also need to allow connections to the controller from other hosts, setting  in ~/.config/ipython/profile_default/ipcontroller_config.py:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  c.HubFactory.ip = '*'
 &lt;/span&gt;
 &lt;br/&gt;
&lt;/p&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;

&lt;p&gt;With the path to the pbs engine template.
&lt;br/&gt;
&lt;br/&gt;
Next a couple of examples of pbs templates, for 2 or 8 processes per node:
&lt;script src="https://gist.github.com/zonca/5334225.js"&gt;
&lt;/script&gt;
&lt;br/&gt;
IPython configuration does not seem to be flexible enough to add a parameter for specifying the processes per node.
&lt;br/&gt;
So I just created a bash script that get as parameters the processes per node and the total number of nodes:
&lt;br/&gt;
&lt;br/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 ipc 8 2 # 2 nodes with 8ppn, 16 total engines
&lt;/span&gt;
&lt;br/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 ipc 2 3 # 3 nodes with 2ppn, 6 total engines
&lt;/span&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;span style="font-family: inherit;"&gt;
 Once the engines are running, jobs can be submitted opening an IPython shell on the login node and run:
&lt;/span&gt;
&lt;br/&gt;
&lt;span style="font-family: inherit;"&gt;
 &lt;br/&gt;
&lt;/span&gt;
&lt;br/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 from IPython.parallel import Client
&lt;/span&gt;
&lt;br/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 rc = Client()
&lt;/span&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 lview = rc.load_balanced_view() # default load-balanced view
&lt;/span&gt;
&lt;br/&gt;
&lt;div&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  def serial_func(argument):
 &lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  pass
 &lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  parallel_result = lview.map(serial_func, list_of_arguments)
 &lt;/span&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;div style="font-family: inherit;"&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;span style="font-family: inherit;"&gt;
  The serial function is sent to the engines and executed for each element of the list of arguments.
 &lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;span style="font-family: inherit;"&gt;
  If the function returns a value, than it is transferred back to the login node.
 &lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;span style="font-family: inherit;"&gt;
  In case the returned values are memory consuming, is also possible to still run the controller on the login node, but execute the interactive IPython session in an interactive job.
 &lt;/span&gt;
&lt;/div&gt;
&lt;div style="font-family: inherit;"&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div style="font-family: inherit;"&gt;
 &lt;br/&gt;
&lt;/div&gt;&lt;/p&gt;</content><category term="misc"></category><category term="hpc"></category><category term="supercomputing"></category><category term="ipython"></category><category term="python"></category></entry><entry><title>Simple Mixin usage in python</title><link href="http://zonca.github.io/2013/04/simple-mixin-usage-in-python.html" rel="alternate"></link><published>2013-04-08T01:34:00-07:00</published><updated>2013-04-08T01:34:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-04-08:/2013/04/simple-mixin-usage-in-python.html</id><summary type="html">&lt;p&gt;
 One situation where Mixins are useful in Python is when you need to modify  a method of similar classes that you are importing from a package.
 &lt;br/&gt;
&lt;/p&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;

&lt;div&gt;
 For just a single class, it is easier to just create a derived class, but if the same modification must be applied to several …&lt;/div&gt;</summary><content type="html">&lt;p&gt;
 One situation where Mixins are useful in Python is when you need to modify  a method of similar classes that you are importing from a package.
 &lt;br/&gt;
&lt;/p&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;

&lt;div&gt;
 For just a single class, it is easier to just create a derived class, but if the same modification must be applied to several classes, then it is cleaner to implement this modification once in a Mixin and then apply it to all of them.
&lt;/div&gt;

&lt;div&gt;
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
 Here an example in Django:
&lt;/div&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;

&lt;div&gt;
 Django has several generic view classes that allow to pull objects from the database and feed them to the html templates.
&lt;/div&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;

&lt;div&gt;
 One for example shows the detail of a specific object:
&lt;/div&gt;

&lt;div&gt;
 &lt;br/&gt;
&lt;/div&gt;

&lt;div&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  from django.views.generic.detail import DetailView
 &lt;/span&gt;
&lt;/div&gt;

&lt;div&gt;
 &lt;div&gt;
  &lt;br/&gt;
 &lt;/div&gt;
 &lt;div&gt;
  This class has a get_object method that gets an object from the database given a primary key.
 &lt;/div&gt;
 &lt;div&gt;
  We need to modify this method to allow access to an object only to the user that owns them.
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br/&gt;
 &lt;/div&gt;
 &lt;div&gt;
  We first implement a Mixin, i.e. an independent class that only implements the method we wish to override:
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br/&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   class OwnedObjectMixin(object):
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   def get_object(self, *args, **kwargs):
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   obj = super(OwnedObjectMixin, self).get_object(*args, **kwargs)
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   if not obj.user == self.request.user:
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   raise Http404
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   return obj
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br/&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
 &lt;span style="font-family: inherit;"&gt;
  Then we create a new derived class which inherits both from the Mixin and from the class we want to modify.
 &lt;/span&gt;
&lt;/div&gt;

&lt;div&gt;
 &lt;span style="font-family: inherit;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;

&lt;div&gt;
 &lt;div&gt;
  &lt;div&gt;
   &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
    class ProtectedDetailView(OwnedObjectMixin, DetailView):
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
    pass
   &lt;/span&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;

&lt;div&gt;
 This overrides the get_object method of DetailView with the get_object method of OwnedObjectMixin, and the call to super calls the get_object method of DetailView, so has the same effect of subclassing DetailView and override the get_object method, but we can be apply the same Mixin to other classes.
&lt;/div&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>Noise in spectra and map domain</title><link href="http://zonca.github.io/2013/04/noise-in-spectra-and-map-domain.html" rel="alternate"></link><published>2013-04-08T01:32:00-07:00</published><updated>2013-04-08T01:32:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-04-08:/2013/04/noise-in-spectra-and-map-domain.html</id><summary type="html">&lt;h3&gt;
 Spectra
&lt;/h3&gt;

&lt;p&gt;NET or $\sigma$ is the standard deviation of the noise, measured in mK/sqrt(Hz), typical values for microwave amplifiers are 0.2-5.
&lt;br/&gt;
This is the natural unit of the amplitude spectra (ASD), therefore the high frequency tail of the ASD should get to the expected value of the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;
 Spectra
&lt;/h3&gt;

&lt;p&gt;NET or $\sigma$ is the standard deviation of the noise, measured in mK/sqrt(Hz), typical values for microwave amplifiers are 0.2-5.
&lt;br/&gt;
This is the natural unit of the amplitude spectra (ASD), therefore the high frequency tail of the ASD should get to the expected value of the NET.
&lt;br/&gt;
NET can also be expressed in mKsqrt(s), which is NOT the same unit.
&lt;br/&gt;
&lt;b&gt;
 mK/sqrt(Hz)
&lt;/b&gt;
refers to an integration bandwidth of 1 Hz that assumes a 6dB/octave rolloff, its integration time is only about 0.5 seconds.
&lt;br/&gt;
&lt;b&gt;
 mK/sqrt(s)
&lt;/b&gt;
instead refers to integration time of 1 second, therefore assumes a top hat bandpass.
&lt;br/&gt;
Therefore there is a factor of sqrt(2) difference between the two conventions, therefore mK/sqrt(Hz) = sqrt(2) * mK sqrt(s)
&lt;br/&gt;
See appendix B of Noise Properties of the Planck-LFI Receivers
&lt;br/&gt;
&lt;a href="http://arxiv.org/abs/1001.4608"&gt;
 http://arxiv.org/abs/1001.4608
&lt;/a&gt;
&lt;br/&gt;
&lt;h3&gt;
 Maps
&lt;/h3&gt;
To estimate the map domain noise instead we need to integrate the sigma over the time per pixel; in this case it is easier to convert the noise to sigma/sample, therefore we need to multiply by the square root of the sampling frequency:
&lt;br/&gt;
&lt;br/&gt;
sigma_per_sample = NET * sqrt(sampling_freq)
&lt;br/&gt;
&lt;br/&gt;
Then the variance per pixel is sigma_per_sample**2/number_of_hits
&lt;br/&gt;
&lt;h3&gt;
 Angular power spectra
&lt;/h3&gt;
&lt;div&gt;
 $C_\ell$ of the variance map is just the variance map multiplied by the pixel area divided by the integration time.
 &lt;br/&gt;
 &lt;br/&gt;
 $$C_\ell = \Omega_{\rm pix} \langle \frac{\sigma^2}{\tau} \rangle = \Omega_{\rm pix} \langle \frac{\sigma^2 f_{\rm samp}}{hits} \rangle$$
&lt;/div&gt;&lt;/p&gt;</content><category term="misc"></category><category term="map"></category><category term="power spectra"></category><category term="noise"></category></entry><entry><title>Basic fork/pull git workflow</title><link href="http://zonca.github.io/2013/04/basic-forkpull-git-workflow.html" rel="alternate"></link><published>2013-04-06T07:52:00-07:00</published><updated>2013-04-06T07:52:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-04-06:/2013/04/basic-forkpull-git-workflow.html</id><summary type="html">&lt;div dir="ltr"&gt;
 Typical simple workflow for a (github) repository with few users.
&lt;/div&gt;

&lt;div dir="ltr"&gt;
 &lt;b&gt;
  &lt;br/&gt;
 &lt;/b&gt;
&lt;/div&gt;

&lt;div dir="ltr"&gt;
 &lt;b&gt;
  Permissions configuration:
 &lt;/b&gt;
&lt;/div&gt;

&lt;div dir="ltr"&gt;
 Main developers have write access to the repository, occasional contributor are supposed to fork and create pull requests.
&lt;/div&gt;

&lt;div dir="ltr"&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name="more"&gt;
&lt;/a&gt;
&lt;br/&gt;
&lt;div dir="ltr"&gt;
 &lt;b&gt;
  Main developer:
 &lt;/b&gt;
 Small bug fix just go directly in master:
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  git  checkout master
  &lt;br/&gt;
  # update from repository, better use rebase in …&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;</summary><content type="html">&lt;div dir="ltr"&gt;
 Typical simple workflow for a (github) repository with few users.
&lt;/div&gt;

&lt;div dir="ltr"&gt;
 &lt;b&gt;
  &lt;br/&gt;
 &lt;/b&gt;
&lt;/div&gt;

&lt;div dir="ltr"&gt;
 &lt;b&gt;
  Permissions configuration:
 &lt;/b&gt;
&lt;/div&gt;

&lt;div dir="ltr"&gt;
 Main developers have write access to the repository, occasional contributor are supposed to fork and create pull requests.
&lt;/div&gt;

&lt;div dir="ltr"&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name="more"&gt;
&lt;/a&gt;
&lt;br/&gt;
&lt;div dir="ltr"&gt;
 &lt;b&gt;
  Main developer:
 &lt;/b&gt;
 Small bug fix just go directly in master:
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  git  checkout master
  &lt;br/&gt;
  # update from repository, better use rebase in case there are unpushed commits
  &lt;br/&gt;
  git pull --rebase
  &lt;br/&gt;
  git commit -m "commit message"
  &lt;br/&gt;
  git push
 &lt;/span&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 More complex feature, better use a branch:
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  git checkout -b featurebranch
  &lt;br/&gt;
  git commit -am "commit message"
  &lt;br/&gt;
  # work and make several commits
  &lt;br/&gt;
  # backup and share to github
  &lt;br/&gt;
  git push origin featurebranch
 &lt;/span&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;span style="font-family: inherit;"&gt;
  When ready to merge (cannot push cleanly anymore after any rebasing):
 &lt;/span&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: inherit;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  # reorder, squash some similar commits, better commit msg
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  git rebase -i HEAD~10
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  # before merging move commits all together to the end of history
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  git rebase master
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  git checkout master
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  git merge featurebranch
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  git push
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  # branch is fully merged, no need to keep it
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  git branch -d featurebranch
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  git push origin --delete featurebranch
 &lt;/span&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 Optional, if the feature requires discussing within the team, better create a pull request.
 &lt;br/&gt;
 After cleanup and rebase, instead of merging to master:
 &lt;br/&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  # create new branch
  &lt;br/&gt;
  git checkout -b readyfeaturebranch
  &lt;br/&gt;
  git push origin readyfeaurebranch
 &lt;/span&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 Connect to github and create a pull request from the new branch to master (now github has a shortcut for creating a pull request from the last branch pushed).
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 During the discussion on the pull request, any commit to the readyfeaturebranch is added to the pull request.
 &lt;br/&gt;
 When ready either automatically merge on github, or do it manually as previously.
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;br/&gt;
&lt;/div&gt;
&lt;div dir="ltr"&gt;
 &lt;b&gt;
  For occasional developers:
 &lt;/b&gt;
 Just fork the repo on github to their account, work on a branch there, and then create a pull request on the github web interface from the branch to master on the main repository.
&lt;/div&gt;&lt;/p&gt;</content><category term="misc"></category><category term="git"></category><category term="github"></category></entry><entry><title>Interactive 3D plot of a sky map</title><link href="http://zonca.github.io/2013/03/interactive-3d-plot-of-sky-map.html" rel="alternate"></link><published>2013-03-12T19:49:00-07:00</published><updated>2013-03-12T19:49:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-03-12:/2013/03/interactive-3d-plot-of-sky-map.html</id><summary type="html">&lt;p&gt;&lt;a href="http://code.enthought.com/projects/mayavi/"&gt;
 Mayavi
&lt;/a&gt;
is a Python package from Enthought for 3D visualization, here a simple example of creating a 3D interactive map starting from a HEALPix pixelization sky map:
&lt;br/&gt;
&lt;div&gt;
 &lt;br/&gt;
 &lt;div&gt;
  &lt;div class="separator" style="clear: both; text-align: center;"&gt;
   &lt;a href="http://zonca.github.io/images/interactive-3d-plot-of-sky-map_s1600_snapshot.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;
    &lt;img border="0" height="271" src="http://zonca.github.io/images/interactive-3d-plot-of-sky-map_s400_snapshot.png" width="400"/&gt;
   &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="separator" style="clear: both; text-align: center;"&gt;
   &lt;br/&gt;
  &lt;/div&gt;
  &lt;br/&gt;
  &lt;a name="more"&gt;
  &lt;/a&gt;
  &lt;br/&gt;
  Here the code:
  &lt;br/&gt;
  &lt;script src="https://gist.github.com/zonca/5146356.js"&gt;
  &lt;/script&gt;
  &lt;br/&gt;
  &lt;br/&gt;
  The output is a beautiful 3D interactive map, Mayavi allows to pan, zoom and rotate.
  &lt;br/&gt;
  UPDATE 13 Mar: actually there …&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://code.enthought.com/projects/mayavi/"&gt;
 Mayavi
&lt;/a&gt;
is a Python package from Enthought for 3D visualization, here a simple example of creating a 3D interactive map starting from a HEALPix pixelization sky map:
&lt;br/&gt;
&lt;div&gt;
 &lt;br/&gt;
 &lt;div&gt;
  &lt;div class="separator" style="clear: both; text-align: center;"&gt;
   &lt;a href="http://zonca.github.io/images/interactive-3d-plot-of-sky-map_s1600_snapshot.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;
    &lt;img border="0" height="271" src="http://zonca.github.io/images/interactive-3d-plot-of-sky-map_s400_snapshot.png" width="400"/&gt;
   &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="separator" style="clear: both; text-align: center;"&gt;
   &lt;br/&gt;
  &lt;/div&gt;
  &lt;br/&gt;
  &lt;a name="more"&gt;
  &lt;/a&gt;
  &lt;br/&gt;
  Here the code:
  &lt;br/&gt;
  &lt;script src="https://gist.github.com/zonca/5146356.js"&gt;
  &lt;/script&gt;
  &lt;br/&gt;
  &lt;br/&gt;
  The output is a beautiful 3D interactive map, Mayavi allows to pan, zoom and rotate.
  &lt;br/&gt;
  UPDATE 13 Mar: actually there was a bug (found by Marius Millea) in the script, there is no problem in the projection!
  &lt;br/&gt;
  &lt;div class="separator" style="clear: both; text-align: center;"&gt;
   &lt;br/&gt;
  &lt;/div&gt;
  Mayavi can be installed in Ubuntu installing
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   python-vtk
  &lt;/span&gt;
  and then
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   sudo pip install mayavi.
  &lt;/span&gt;
 &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</content><category term="misc"></category><category term="mayavi"></category><category term="python"></category><category term="astrophysics"></category></entry><entry><title>How to cite HDF5 in bibtex</title><link href="http://zonca.github.io/2013/02/how-to-cite-hdf5-in-bibtex.html" rel="alternate"></link><published>2013-02-27T00:42:00-08:00</published><updated>2013-02-27T00:42:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-02-27:/2013/02/how-to-cite-hdf5-in-bibtex.html</id><content type="html">&lt;p&gt;
 here the bibtex entry:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;script src="https://gist.github.com/zonca/5043796.js"&gt;
 &lt;/script&gt;
 &lt;br/&gt;
 reference:
 &lt;br/&gt;
 &lt;a href="http://www.hdfgroup.org/HDF5-FAQ.html#gcite"&gt;
  http://www.hdfgroup.org/HDF5-FAQ.html#gcite
 &lt;/a&gt;
&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Compile healpix C++ to javascript</title><link href="http://zonca.github.io/2013/01/tag:blogger.html" rel="alternate"></link><published>2013-01-28T21:06:00-08:00</published><updated>2013-01-28T21:06:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-01-28:/2013/01/tag:blogger.html</id><content type="html">&lt;p&gt;
 Compile C++ -&amp;gt; LLVM with clang
 &lt;br/&gt;
 &lt;br/&gt;
 Convert LLVM -&amp;gt; Javascript:
 &lt;br/&gt;
 &lt;a href="https://github.com/kripken/emscripten/wiki/Tutorial"&gt;
  https://github.com/kripken/emscripten/wiki/Tutorial
 &lt;/a&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="javascript"></category><category term="hackideas"></category><category term="healpix"></category></entry><entry><title>Elliptic beams, FWHM and ellipticity</title><link href="http://zonca.github.io/2013/01/elliptic-beams-fwhm-and-ellipticity.html" rel="alternate"></link><published>2013-01-18T00:58:00-08:00</published><updated>2013-01-18T00:58:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2013-01-18:/2013/01/elliptic-beams-fwhm-and-ellipticity.html</id><content type="html">&lt;p&gt;&lt;span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"&gt;
 The relationship between the Full Width Half Max, FWHM (min, max, and average) and the
&lt;/span&gt;
&lt;br/&gt;
&lt;span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"&gt;
 ellipticity is:
&lt;/span&gt;
&lt;br/&gt;
&lt;br style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 &lt;span style="background-color: white; color: #222222; font-size: 13px;"&gt;
  FWHM = sqrt(FWHM_min * FWHM_max)
 &lt;/span&gt;
 &lt;br style="background-color: white; color: #222222; font-size: 13px;"/&gt;
 &lt;span style="background-color: white; color: #222222; font-size: 13px;"&gt;
  e = FWHM_max/FWHM_min
 &lt;/span&gt;
&lt;/span&gt;
&lt;br/&gt;
&lt;span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"&gt;
 &lt;br/&gt;
&lt;/span&gt;&lt;/p&gt;</content><category term="misc"></category><category term="astrophysics"></category></entry><entry><title>Ubuntu PPA for HEALPix and healpy</title><link href="http://zonca.github.io/2012/12/ubuntu-ppa-for-healpix-and-healpy.html" rel="alternate"></link><published>2012-12-17T10:37:00-08:00</published><updated>2012-12-17T10:37:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2012-12-17:/2012/12/ubuntu-ppa-for-healpix-and-healpy.html</id><summary type="html">&lt;p&gt;&lt;br/&gt;
&lt;b&gt;
 HEALPix C, C++
&lt;/b&gt;
version 3.00 and
&lt;b&gt;
 healpy
&lt;/b&gt;
version 1.4.1 are now available in a PPA repository for Ubuntu 12.04 Precise and Ubuntu 12.10 Quantal.
&lt;br/&gt;
&lt;br/&gt;
First remove your previous version of
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 healpy
&lt;/span&gt;
, just find the location of the package:
&lt;br/&gt;
&lt;br/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 &amp;gt; python -c "import healpy; print healpy.&lt;strong&gt;file …&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;br/&gt;
&lt;b&gt;
 HEALPix C, C++
&lt;/b&gt;
version 3.00 and
&lt;b&gt;
 healpy
&lt;/b&gt;
version 1.4.1 are now available in a PPA repository for Ubuntu 12.04 Precise and Ubuntu 12.10 Quantal.
&lt;br/&gt;
&lt;br/&gt;
First remove your previous version of
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 healpy
&lt;/span&gt;
, just find the location of the package:
&lt;br/&gt;
&lt;br/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 &amp;gt; python -c "import healpy; print healpy.&lt;strong&gt;file&lt;/strong&gt;"
&lt;/span&gt;
&lt;br/&gt;
&lt;br/&gt;
and remove it:
&lt;br/&gt;
&lt;br/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 &amp;gt; sudo rm -r /some-base-path/site-packages/healpy*
&lt;/span&gt;
&lt;br/&gt;
&lt;div style="font-family: 'Courier New', Courier, monospace;"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;
&lt;span style="font-family: inherit;"&gt;
 Then add the apt repository and install the packages:
&lt;/span&gt;
&lt;br/&gt;
&lt;div style="font-family: 'Courier New', Courier, monospace;"&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
  &lt;br/&gt;
 &lt;/span&gt;
&lt;/div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 &amp;gt; sudo add-apt-repository ppa:zonca/healpix
&lt;/span&gt;
&lt;br/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 &amp;gt; sudo apt-get update
&lt;/span&gt;
&lt;br/&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 &amp;gt; sudo apt-get install healpix-cxx libhealpix-cxx-dev
&lt;/span&gt;
&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;
&lt;/span&gt;
&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;
 libchealpix0
&lt;/span&gt;
&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;
 libchealpix-dev python-healpy
&lt;/span&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   &amp;gt; which anafast_cxx
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   /usr/bin/anafast_cxx
  &lt;/span&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   &amp;gt; python -c "import healpy; print healpy.&lt;strong&gt;version&lt;/strong&gt;"
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
 &lt;/span&gt;
 &lt;br/&gt;
 &lt;div&gt;
  &lt;span style="font-family: Courier New, Courier, monospace;"&gt;
   1.4.1
  &lt;/span&gt;
 &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</content><category term="misc"></category><category term="healpix"></category><category term="ubuntu"></category></entry><entry><title>Butterworth filter with Python</title><link href="http://zonca.github.io/2012/10/butterworth-filter-with-python.html" rel="alternate"></link><published>2012-10-06T00:00:00-07:00</published><updated>2012-10-06T00:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2012-10-06:/2012/10/butterworth-filter-with-python.html</id><content type="html">&lt;p&gt;
 Using IPython notebook of course:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="http://nbviewer.ipython.org/3843014/"&gt;
  http://nbviewer.ipython.org/3843014/
 &lt;/a&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="ipython"></category><category term="scipy"></category><category term="python"></category></entry><entry><title>IPython.parallel for Planck data analysis at NERSC</title><link href="http://zonca.github.io/2012/09/ipythonparallel-for-planck-data.html" rel="alternate"></link><published>2012-09-27T06:24:00-07:00</published><updated>2012-09-27T06:24:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2012-09-27:/2012/09/ipythonparallel-for-planck-data.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.esa.int/planck"&gt;
 Planck
&lt;/a&gt;
is a Space mission for high precision measurements of the
&lt;a href="http://en.wikipedia.org/wiki/Cosmic_microwave_background_radiation"&gt;
 Cosmic Microwave Background
&lt;/a&gt;
(CMB), data are received as timestreams of output voltages from the 2 instruments on-board, the Low and High Frequency Instruments [LFI / HFI].
&lt;br/&gt;
&lt;br/&gt;
The key phase in data reduction is map-making, where data are binned to a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.esa.int/planck"&gt;
 Planck
&lt;/a&gt;
is a Space mission for high precision measurements of the
&lt;a href="http://en.wikipedia.org/wiki/Cosmic_microwave_background_radiation"&gt;
 Cosmic Microwave Background
&lt;/a&gt;
(CMB), data are received as timestreams of output voltages from the 2 instruments on-board, the Low and High Frequency Instruments [LFI / HFI].
&lt;br/&gt;
&lt;br/&gt;
The key phase in data reduction is map-making, where data are binned to a map of the microwave emission of our galaxy, the CMB, and extragalactic sources. This phase is intrinsically parallel and requires simultaneous access to all the data, so requires a fully parallel MPI-based software.
&lt;br/&gt;
&lt;br/&gt;
However, preparing the data for map-making requires several tasks that are serial, but are data and I/O intensive, therefore need to be parallelized.
&lt;br/&gt;
&lt;br/&gt;
&lt;a name="more"&gt;
&lt;/a&gt;
&lt;br/&gt;
IPython.parallel offers the easiest solution for managing a large amount of trivially parallel jobs.
&lt;br/&gt;
&lt;br/&gt;
The first task is pointing reconstruction, where we interpolate and apply several rotations and corrections to low-sampled satellite quaternions stored on disk and then write the output dense detector pointing to disk.
&lt;br/&gt;
The disk quota of pointing files is about 2.5TB split in about 3000 files, those files can be processed independently, therefore we implement a function that processes 1 file, to be used interactively for debugging and testing.
&lt;br/&gt;
Then launch an IPython cluster, typically between 20 and 300 engines on Carver (NERSC), and use the exact same function to process all the ~3000 files in parallel.
&lt;br/&gt;
The IPython
&lt;a href="http://ipython.org/ipython-doc/dev/api/generated/IPython.parallel.client.view.html?highlight=apply_async#IPython.parallel.client.view.LoadBalancedView"&gt;
 BalancedView
&lt;/a&gt;
controller automatically balances the queue therefore we get maximum efficiency, and it is possible to leave the cluster running and submit other instances of the job to be added to its queue.
&lt;br/&gt;
&lt;br/&gt;
Second task is calibration and dipole removal, which processes about 1.2 TB of data, but it needs to read the dense pointing from disk, so it is very I/O intensive. Also in this case we can submit the ~3000 jobs to an IPython.parallel cluster.
&lt;br/&gt;
&lt;br/&gt;
In a next post I'll describe in detail my setup and how I organize my code to make it easy to swap back and forth between debugging code interactively and  running production runs in parallel.&lt;/p&gt;</content><category term="misc"></category><category term="ipython"></category><category term="python"></category><category term="Planck"></category></entry><entry><title>homepage on about.me</title><link href="http://zonca.github.io/2012/09/homepage-on-aboutme.html" rel="alternate"></link><published>2012-09-26T22:19:00-07:00</published><updated>2012-09-26T22:19:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2012-09-26:/2012/09/homepage-on-aboutme.html</id><content type="html">&lt;p&gt;
 moved my homepage to about.me:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="http://about.me/andreazonca"&gt;
  http://about.me/andreazonca
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 it is quite nice, and essential, as most of it is just links to other websites, i.e. arXiv for publications, Linkedin for CV, github for code.
 &lt;br/&gt;
 So I'm going to use andreazonca.com as blog, hosted on blogger.
&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>doctests and unittests happiness 2</title><link href="http://zonca.github.io/2012/08/doctests-and-unittests-happiness-2.html" rel="alternate"></link><published>2012-08-16T14:07:00-07:00</published><updated>2012-08-16T14:07:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2012-08-16:/2012/08/doctests-and-unittests-happiness-2.html</id><summary type="html">&lt;blockquote&gt;
 nosetests -v --with-doctest
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.ang2pix ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.get_all_neighbours ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.get_interp_val ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.get_map_size ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.get_min_valid_nside ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.get_neighbours ... ok
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;
&lt;a name="more"&gt;
&lt;/a&gt;
&lt;br/&gt;
&lt;blockquote&gt;
 Doctest: healpy.pixelfunc.isnpixok ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.isnsideok ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.ma ... ok
 &lt;br/&gt;
 Doctest: healpy …&lt;/blockquote&gt;&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
 nosetests -v --with-doctest
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.ang2pix ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.get_all_neighbours ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.get_interp_val ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.get_map_size ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.get_min_valid_nside ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.get_neighbours ... ok
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;
&lt;a name="more"&gt;
&lt;/a&gt;
&lt;br/&gt;
&lt;blockquote&gt;
 Doctest: healpy.pixelfunc.isnpixok ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.isnsideok ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.ma ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.maptype ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.mask_bad ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.mask_good ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.max_pixrad ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.nest2ring ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.npix2nside ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.nside2npix ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.nside2pixarea ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.nside2resol ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.pix2ang ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.pix2vec ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.reorder ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.ring2nest ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.ud_grade ... ok
 &lt;br/&gt;
 Doctest: healpy.pixelfunc.vec2pix ... ok
 &lt;br/&gt;
 Doctest: healpy.rotator.Rotator ... ok
 &lt;br/&gt;
 test_write_map_C (test_fitsfunc.TestFitsFunc) ... ok
 &lt;br/&gt;
 test_write_map_IDL (test_fitsfunc.TestFitsFunc) ... ok
 &lt;br/&gt;
 test_write_alm (test_fitsfunc.TestReadWriteAlm) ... ok
 &lt;br/&gt;
 test_write_alm_256_128 (test_fitsfunc.TestReadWriteAlm) ... ok
 &lt;br/&gt;
 test_ang2pix_nest (test_pixelfunc.TestPixelFunc) ... ok
 &lt;br/&gt;
 test_ang2pix_ring (test_pixelfunc.TestPixelFunc) ... ok
 &lt;br/&gt;
 test_nside2npix (test_pixelfunc.TestPixelFunc) ... ok
 &lt;br/&gt;
 test_nside2pixarea (test_pixelfunc.TestPixelFunc) ... ok
 &lt;br/&gt;
 test_nside2resol (test_pixelfunc.TestPixelFunc) ... ok
 &lt;br/&gt;
 test_inclusive (test_query_disc.TestQueryDisc) ... ok
 &lt;br/&gt;
 test_not_inclusive (test_query_disc.TestQueryDisc) ... ok
 &lt;br/&gt;
 test_anafast (test_sphtfunc.TestSphtFunc) ... ok
 &lt;br/&gt;
 test_anafast_iqu (test_sphtfunc.TestSphtFunc) ... ok
 &lt;br/&gt;
 test_anafast_xspectra (test_sphtfunc.TestSphtFunc) ... ok
 &lt;br/&gt;
 test_synfast (test_sphtfunc.TestSphtFunc) ... ok
 &lt;br/&gt;
 test_cartview_nocrash (test_visufunc.TestNoCrash) ... ok
 &lt;br/&gt;
 test_gnomview_nocrash (test_visufunc.TestNoCrash) ... ok
 &lt;br/&gt;
 test_mollview_nocrash (test_visufunc.TestNoCrash) ... ok
 &lt;br/&gt;
 &lt;br/&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br/&gt;
 Ran 43 tests in 19.077s
 &lt;br/&gt;
 &lt;br/&gt;
 OK
&lt;/blockquote&gt;&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="Quote"></category></entry><entry><title>compile python module with mpi support</title><link href="http://zonca.github.io/2012/07/compile-python-module-with-mpi-support.html" rel="alternate"></link><published>2012-07-06T16:08:00-07:00</published><updated>2012-07-06T16:08:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2012-07-06:/2012/07/compile-python-module-with-mpi-support.html</id><content type="html">&lt;p&gt;
 CC=mpicc LDSHARED="mpicc -shared" python setup.py build_ext -i
&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>some python resources</title><link href="http://zonca.github.io/2011/11/some-python-resources.html" rel="alternate"></link><published>2011-11-01T23:02:00-07:00</published><updated>2011-11-01T23:02:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2011-11-01:/2011/11/some-python-resources.html</id><summary type="html">&lt;p&gt;
 python tutorial:
 &lt;br/&gt;
 &lt;a href="http://docs.python.org/tutorial/"&gt;
  http://docs.python.org/tutorial/
  &lt;br/&gt;
 &lt;/a&gt;
 numpy tutorial [arrays]:
 &lt;br/&gt;
 &lt;a href="http://www.scipy.org/Tentative_NumPy_Tutorial"&gt;
  http://www.scipy.org/Tentative_NumPy_Tutorial
  &lt;br/&gt;
 &lt;/a&gt;
 plotting tutorial:
 &lt;br/&gt;
 &lt;a href="http://matplotlib.sourceforge.net/users/pyplot_tutorial.html"&gt;
  http://matplotlib.sourceforge.net/users/pyplot_tutorial.html
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 free online books:
 &lt;br/&gt;
 &lt;a href="http://diveintopython.org/toc/index.html"&gt;
  http://diveintopython.org/toc/index.html
  &lt;br/&gt;
 &lt;/a&gt;
 &lt;a href="http://www.ibiblio.org/swaroopch/byteofpython/read/"&gt;
  http://www.ibiblio.org/swaroopch/byteofpython/read/
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 install enthought python:
 &lt;br/&gt;
 &lt;a href="http://www.enthought.com/products/edudownload.php"&gt;
  http://www.enthought.com/products/edudownload.php …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 python tutorial:
 &lt;br/&gt;
 &lt;a href="http://docs.python.org/tutorial/"&gt;
  http://docs.python.org/tutorial/
  &lt;br/&gt;
 &lt;/a&gt;
 numpy tutorial [arrays]:
 &lt;br/&gt;
 &lt;a href="http://www.scipy.org/Tentative_NumPy_Tutorial"&gt;
  http://www.scipy.org/Tentative_NumPy_Tutorial
  &lt;br/&gt;
 &lt;/a&gt;
 plotting tutorial:
 &lt;br/&gt;
 &lt;a href="http://matplotlib.sourceforge.net/users/pyplot_tutorial.html"&gt;
  http://matplotlib.sourceforge.net/users/pyplot_tutorial.html
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 free online books:
 &lt;br/&gt;
 &lt;a href="http://diveintopython.org/toc/index.html"&gt;
  http://diveintopython.org/toc/index.html
  &lt;br/&gt;
 &lt;/a&gt;
 &lt;a href="http://www.ibiblio.org/swaroopch/byteofpython/read/"&gt;
  http://www.ibiblio.org/swaroopch/byteofpython/read/
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 install enthought python:
 &lt;br/&gt;
 &lt;a href="http://www.enthought.com/products/edudownload.php"&gt;
  http://www.enthought.com/products/edudownload.php
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 video tut:
 &lt;br/&gt;
 http://www.youtube.com/watch?v=YW8jtSOTRAU&amp;amp;feature=channel
&lt;/p&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>cfitsio wrapper in python</title><link href="http://zonca.github.io/2011/06/cfitsio-wrapper-in-python.html" rel="alternate"></link><published>2011-06-21T04:43:00-07:00</published><updated>2011-06-21T04:43:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2011-06-21:/2011/06/cfitsio-wrapper-in-python.html</id><content type="html">&lt;p&gt;
 After several issues with pyfits, and tired of it being so overengineered, I've wrote my own fits I/O package in python, wrapping the C library cfitsio with ctypes.
 &lt;br/&gt;
 &lt;br/&gt;
 Pretty easy, first version completely developed in 1 day.
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="https://github.com/zonca/pycfitsio"&gt;
  https://github.com/zonca/pycfitsio
 &lt;/a&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="numpy"></category></entry><entry><title>unit testing happiness</title><link href="http://zonca.github.io/2011/06/unit-testing-happiness.html" rel="alternate"></link><published>2011-06-21T04:39:00-07:00</published><updated>2011-06-21T04:39:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2011-06-21:/2011/06/unit-testing-happiness.html</id><content type="html">&lt;pre&gt;nosetests -v&lt;br/&gt;test_all_cols (pycfitsio.test.TestPyCfitsIoRead) ... ok&lt;br/&gt;test_colnames (pycfitsio.test.TestPyCfitsIoRead) ... ok&lt;br/&gt;test_move (pycfitsio.test.TestPyCfitsIoRead) ... ok&lt;br/&gt;test_open_file (pycfitsio.test.TestPyCfitsIoRead) ... ok&lt;br/&gt;test_read_col (pycfitsio.test.TestPyCfitsIoRead) ... ok&lt;br/&gt;test_read_hdus (pycfitsio.test.TestPyCfitsIoRead) ... ok&lt;br/&gt;test_create (pycfitsio.test.TestPyCfitsIoWrite) ... ok&lt;br/&gt;test_write (pycfitsio.test.TestPyCfitsIoWrite) ... ok&lt;br/&gt;&lt;br/&gt;----------------------------------------------------------------------&lt;br/&gt;Ran 8 tests in 0.016s&lt;br/&gt;&lt;br/&gt;OK&lt;/pre&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>Pink noise (1/f noise) simulations in numpy</title><link href="http://zonca.github.io/2011/05/pink-noise-1f-noise-simulations-in-numpy.html" rel="alternate"></link><published>2011-05-18T23:49:00-07:00</published><updated>2011-05-18T23:49:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2011-05-18:/2011/05/pink-noise-1f-noise-simulations-in-numpy.html</id><content type="html">&lt;p&gt;&lt;a href="https://gist.github.com/979729"&gt;
 https://gist.github.com/979729
&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;a href="http://zonca.github.io/images/pink-noise-1f-noise-simulations-in-numpy_05_oneoverf1.png"&gt;
 &lt;img alt="" class="alignnone size-medium wp-image-128" height="225" src="http://zonca.github.io/images/pink-noise-1f-noise-simulations-in-numpy_05_oneoverf1.png" title="oneoverf" width="300"/&gt;
&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="physics"></category></entry><entry><title>Vim regular expressions</title><link href="http://zonca.github.io/2011/04/vim-regular-expressions.html" rel="alternate"></link><published>2011-04-29T02:14:00-07:00</published><updated>2011-04-29T02:14:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2011-04-29:/2011/04/vim-regular-expressions.html</id><content type="html">&lt;p&gt;
 very good reference of the usage of regular expressions in VIM:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;a href="http://www.softpanorama.org/Editors/Vimorama/vim_regular_expressions.shtml"&gt;
  http://www.softpanorama.org/Editors/Vimorama/vim_regular_expressions.shtml
 &lt;/a&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category></entry><entry><title>set python logging level</title><link href="http://zonca.github.io/2011/04/set-python-logging-level.html" rel="alternate"></link><published>2011-04-13T01:02:00-07:00</published><updated>2011-04-13T01:02:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2011-04-13:/2011/04/set-python-logging-level.html</id><content type="html">&lt;p&gt;
 often using logging.basicConfig is useless because if the logging module is already configured upfront by one of the imported libraries this is ignored.
 &lt;br/&gt;
 &lt;br/&gt;
 The solution is to set the level directly in the root logger:
 &lt;br/&gt;
 &lt;code&gt;
  ﻿﻿logging.root.level = logging.DEBUG
 &lt;/code&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>pyfits memory leak in new_table</title><link href="http://zonca.github.io/2011/03/pyfits-memory-leak-in-newtable.html" rel="alternate"></link><published>2011-03-28T17:22:00-07:00</published><updated>2011-03-28T17:22:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2011-03-28:/2011/03/pyfits-memory-leak-in-newtable.html</id><summary type="html">&lt;p&gt;
 I found a memory leakage issue in pyfits.new_table, data were NOT deleted when the table was deleted, I prepared a test on github, using
 &lt;a href="http://mg.pov.lt/objgraph/" title="objgraph"&gt;
  objgraph
 &lt;/a&gt;
 , which shows that data are still in memory:
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
 &lt;a href="https://gist.github.com/884298"&gt;
  https://gist.github.com/884298
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 the issue was solved by Erik Bray of STSCI on March …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 I found a memory leakage issue in pyfits.new_table, data were NOT deleted when the table was deleted, I prepared a test on github, using
 &lt;a href="http://mg.pov.lt/objgraph/" title="objgraph"&gt;
  objgraph
 &lt;/a&gt;
 , which shows that data are still in memory:
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
 &lt;a href="https://gist.github.com/884298"&gt;
  https://gist.github.com/884298
 &lt;/a&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 the issue was solved by Erik Bray of STSCI on March 28th, 2011 , see bug report:
 &lt;br/&gt;
 &lt;a href="http://trac6.assembla.com/pyfits/ticket/49"&gt;
  http://trac6.assembla.com/pyfits/ticket/49
  &lt;br/&gt;
 &lt;/a&gt;
 and changeset:
 &lt;br/&gt;
 &lt;a href="http://trac6.assembla.com/pyfits/changeset/844"&gt;
  http://trac6.assembla.com/pyfits/changeset/844
 &lt;/a&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="astrophysics"></category></entry><entry><title>ipython and PyTrilinos</title><link href="http://zonca.github.io/2011/02/ipython-and-pytrilinos.html" rel="alternate"></link><published>2011-02-16T19:10:00-08:00</published><updated>2011-02-16T19:10:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2011-02-16:/2011/02/ipython-and-pytrilinos.html</id><content type="html">&lt;ol&gt;
 &lt;br/&gt;
 &lt;li&gt;
  start ipcontroller
 &lt;/li&gt;
 &lt;br/&gt;
 &lt;li&gt;
  start ipengines:
  &lt;br/&gt;
  &lt;code&gt;
   mpiexec -n 4 ipengine --mpi=pytrilinos
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;br/&gt;
 &lt;li&gt;
  start ipython 0.11:
  &lt;br/&gt;
  &lt;code&gt;
   import PyTrilinos
   &lt;br/&gt;
   from IPython.kernel import client
   &lt;br/&gt;
   mec = client.MultiEngineClient()
   &lt;br/&gt;
   %load_ext parallelmagic
   &lt;br/&gt;
   mec.activate()
   &lt;br/&gt;
   px import PyTrilinos
   &lt;br/&gt;
   px comm=PyTrilinos.Epetra.PyComm()
   &lt;br/&gt;
   px print(comm.NumProc())
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;br/&gt;
&lt;/ol&gt;</content><category term="misc"></category><category term="parallel programming"></category><category term="python"></category></entry><entry><title>git make local branch tracking origin</title><link href="http://zonca.github.io/2011/02/git-make-local-branch-tracking-origin.html" rel="alternate"></link><published>2011-02-02T02:58:00-08:00</published><updated>2011-02-02T02:58:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2011-02-02:/2011/02/git-make-local-branch-tracking-origin.html</id><content type="html">&lt;p&gt;&lt;code&gt;
 git branch --set-upstream master origin/master
&lt;/code&gt;
&lt;br/&gt;
&lt;br/&gt;
you obtain the same result as initial cloning&lt;/p&gt;</content><category term="misc"></category><category term="git"></category></entry><entry><title>memory map npy files</title><link href="http://zonca.github.io/2011/01/memory-map-npy-files.html" rel="alternate"></link><published>2011-01-07T21:04:00-08:00</published><updated>2011-01-07T21:04:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2011-01-07:/2011/01/memory-map-npy-files.html</id><content type="html">&lt;p&gt;
 Mem-map the stored array, and then access the second row directly from disk:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;code&gt;
  X = np.load('/tmp/123.npy', mmap_mode='r')
 &lt;/code&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="numpy"></category></entry><entry><title>force local install of python module</title><link href="http://zonca.github.io/2010/12/force-local-install-of-python-module.html" rel="alternate"></link><published>2010-12-03T22:18:00-08:00</published><updated>2010-12-03T22:18:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-12-03:/2010/12/force-local-install-of-python-module.html</id><content type="html">&lt;p&gt;&lt;code&gt;
 python setup.py install --prefix FOLDER
 &lt;br/&gt;
&lt;/code&gt;
&lt;br/&gt;
&lt;br/&gt;
creates lib/python2.6/site-packages, to force a local install you should use:
&lt;br/&gt;
&lt;br/&gt;
&lt;code&gt;
 python setup.py install --install-lib FOLDER
&lt;/code&gt;&lt;/p&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>gnome alt f2 popup launcher</title><link href="http://zonca.github.io/2010/08/gnome-alt-f2-popup-launcher.html" rel="alternate"></link><published>2010-08-31T18:14:00-07:00</published><updated>2010-08-31T18:14:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-08-31:/2010/08/gnome-alt-f2-popup-launcher.html</id><content type="html">&lt;p&gt;
 ﻿
 &lt;br/&gt;
 &lt;code&gt;
  gnome-panel-control --run-dialog
 &lt;/code&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="ubuntu"></category></entry><entry><title>switch to interactive backend with ipython -pylab</title><link href="http://zonca.github.io/2010/08/switch-to-interactive-backend-with.html" rel="alternate"></link><published>2010-08-21T00:33:00-07:00</published><updated>2010-08-21T00:33:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-08-21:/2010/08/switch-to-interactive-backend-with.html</id><summary type="html">&lt;p&gt;
 objective:
 &lt;br/&gt;
&lt;/p&gt;

&lt;ol&gt;
 &lt;br/&gt;
 &lt;li&gt;
  when running ipython without pylab or executing scripts you want to use an image matplotlib backend like Agg
 &lt;/li&gt;
 &lt;br/&gt;
 &lt;li&gt;
  just when calling ipython -pylab you want to use an interactive backend like GTKAgg or TKAgg
 &lt;/li&gt;
 &lt;br/&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br/&gt;
&lt;a name="more"&gt;
&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;
you need first to setup as default backend on .matplotlib/matplotlibrc
&lt;strong&gt;
 Agg
&lt;/strong&gt;
:
&lt;br/&gt;
&lt;code&gt;
 backend      : Agg
&lt;/code&gt;
&lt;br/&gt;
then …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 objective:
 &lt;br/&gt;
&lt;/p&gt;

&lt;ol&gt;
 &lt;br/&gt;
 &lt;li&gt;
  when running ipython without pylab or executing scripts you want to use an image matplotlib backend like Agg
 &lt;/li&gt;
 &lt;br/&gt;
 &lt;li&gt;
  just when calling ipython -pylab you want to use an interactive backend like GTKAgg or TKAgg
 &lt;/li&gt;
 &lt;br/&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br/&gt;
&lt;a name="more"&gt;
&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;
you need first to setup as default backend on .matplotlib/matplotlibrc
&lt;strong&gt;
 Agg
&lt;/strong&gt;
:
&lt;br/&gt;
&lt;code&gt;
 backend      : Agg
&lt;/code&gt;
&lt;br/&gt;
then setup you ipython to switch to interactive, in ipython file Shell.py, in the class MatplotlibShellBase, at about line 516, add:
&lt;br/&gt;
&lt;code&gt;
 matplotlib.use('GTKAgg')
&lt;/code&gt;
&lt;br/&gt;
after the first import of matplotlib&lt;/p&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>numpy dtypes and fits keywords</title><link href="http://zonca.github.io/2010/08/numpy-dtypes-and-fits-keywords.html" rel="alternate"></link><published>2010-08-04T21:57:00-07:00</published><updated>2010-08-04T21:57:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-08-04:/2010/08/numpy-dtypes-and-fits-keywords.html</id><content type="html">&lt;p&gt;&lt;code&gt;
 bool: 'L',
 &lt;br/&gt;
 uint8: 'B',
 &lt;br/&gt;
 int16: 'I',
 &lt;br/&gt;
 int32: 'J',
 &lt;br/&gt;
 int64: 'K',
 &lt;br/&gt;
 float32: 'E',
 &lt;br/&gt;
 float64: 'D',
 &lt;br/&gt;
 complex64: 'C',
 &lt;br/&gt;
 complex128: 'M'
&lt;/code&gt;&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="numpy"></category></entry><entry><title>count hits with numpy</title><link href="http://zonca.github.io/2010/07/count-hits-with-numpy.html" rel="alternate"></link><published>2010-07-23T15:18:00-07:00</published><updated>2010-07-23T15:18:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-07-23:/2010/07/count-hits-with-numpy.html</id><summary type="html">&lt;p&gt;
 I have an array where I record hits
 &lt;br/&gt;
 &lt;code&gt;
  a=np.zeros(5)
 &lt;/code&gt;
 &lt;br/&gt;
 and an array with the indices of the hits, for example I have 2 hits on index 2
 &lt;br/&gt;
 &lt;code&gt;
  hits=np.array([2,2])
 &lt;/code&gt;
 &lt;br/&gt;
 so I want to increase index 2 of a by 2
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
 &lt;br/&gt;
 I tried:
 &lt;br/&gt;
 &lt;code&gt;
  a[hits …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 I have an array where I record hits
 &lt;br/&gt;
 &lt;code&gt;
  a=np.zeros(5)
 &lt;/code&gt;
 &lt;br/&gt;
 and an array with the indices of the hits, for example I have 2 hits on index 2
 &lt;br/&gt;
 &lt;code&gt;
  hits=np.array([2,2])
 &lt;/code&gt;
 &lt;br/&gt;
 so I want to increase index 2 of a by 2
 &lt;br/&gt;
 &lt;a name="more"&gt;
 &lt;/a&gt;
 &lt;br/&gt;
 I tried:
 &lt;br/&gt;
 &lt;code&gt;
  a[hits]+=1
 &lt;/code&gt;
 &lt;br/&gt;
 but it gives array([ 0.,  0.,  1.,  0.,  0.])
 &lt;br/&gt;
 does someone have a suggestion?
 &lt;br/&gt;
 &lt;code&gt;
  bins=np.bincount(hits)
  &lt;br/&gt;
  a[:len(bins)] += bins
  &lt;br/&gt;
  a
  &lt;br/&gt;
  array([ 0.,  0.,  2.,  0.,  0.])
 &lt;/code&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="numpy"></category></entry><entry><title>change column name in a fits with pyfits</title><link href="http://zonca.github.io/2010/06/change-column-name-in-fits-with-pyfits.html" rel="alternate"></link><published>2010-06-30T22:06:00-07:00</published><updated>2010-06-30T22:06:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-06-30:/2010/06/change-column-name-in-fits-with-pyfits.html</id><content type="html">&lt;p&gt;
 no way to change it manipulating the dtype of the data array.
 &lt;br/&gt;
 &lt;code&gt;
  a=pyfits.open('filename.fits')
  &lt;br/&gt;
  a[1].header.update('TTYPE1','newname')
 &lt;/code&gt;
 &lt;br/&gt;
 you need to change the header, using the update method of the right TTYPE and then write again the fits file using a.writeto.
&lt;/p&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>healpix coordinates</title><link href="http://zonca.github.io/2010/06/healpix-coordinates.html" rel="alternate"></link><published>2010-06-23T01:01:00-07:00</published><updated>2010-06-23T01:01:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-06-23:/2010/06/healpix-coordinates.html</id><summary type="html">&lt;p&gt;
 Healpix considers
 &lt;strong&gt;
  latitude
 &lt;/strong&gt;
 theta from 0 on north pole to pi south pole,
 &lt;br/&gt;
 so the conversion is:
 &lt;br/&gt;
 &lt;code&gt;
  theta = pi/2 - latitude
 &lt;/code&gt;
 &lt;br/&gt;
 &lt;strong&gt;
  longitude
 &lt;/strong&gt;
 and phi instead are consistently from 0 to 2*pi with
 &lt;br/&gt;
&lt;/p&gt;

&lt;ul&gt;
 &lt;br/&gt;
 &lt;li&gt;
  zero on vernal equinox (for
  &lt;a href="http://en.wikipedia.org/wiki/Ecliptic_coordinate_system"&gt;
   ecliptic
  &lt;/a&gt;
  ).
 &lt;/li&gt;
 &lt;br/&gt;
 &lt;li&gt;
  zero in the direction from Sun to galactic center (for
  &lt;a href="http://en.wikipedia.org/wiki/Galactic_coordinate_system"&gt;
   galactic …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Healpix considers
 &lt;strong&gt;
  latitude
 &lt;/strong&gt;
 theta from 0 on north pole to pi south pole,
 &lt;br/&gt;
 so the conversion is:
 &lt;br/&gt;
 &lt;code&gt;
  theta = pi/2 - latitude
 &lt;/code&gt;
 &lt;br/&gt;
 &lt;strong&gt;
  longitude
 &lt;/strong&gt;
 and phi instead are consistently from 0 to 2*pi with
 &lt;br/&gt;
&lt;/p&gt;

&lt;ul&gt;
 &lt;br/&gt;
 &lt;li&gt;
  zero on vernal equinox (for
  &lt;a href="http://en.wikipedia.org/wiki/Ecliptic_coordinate_system"&gt;
   ecliptic
  &lt;/a&gt;
  ).
 &lt;/li&gt;
 &lt;br/&gt;
 &lt;li&gt;
  zero in the direction from Sun to galactic center (for
  &lt;a href="http://en.wikipedia.org/wiki/Galactic_coordinate_system"&gt;
   galactic
  &lt;/a&gt;
  )
 &lt;/li&gt;
 &lt;br/&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="astrophysics"></category><category term="physics"></category></entry><entry><title>parallel computing the python way</title><link href="http://zonca.github.io/2010/06/parallel-computing-python-way.html" rel="alternate"></link><published>2010-06-21T07:27:00-07:00</published><updated>2010-06-21T07:27:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-06-21:/2010/06/parallel-computing-python-way.html</id><content type="html">&lt;p&gt;
 forget MPI:
 &lt;br/&gt;
 &lt;a href="http://showmedo.com/videotutorials/series?name=N49qyIFOh"&gt;
  http://showmedo.com/videotutorials/series?name=N49qyIFOh
 &lt;/a&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="parallel programming"></category><category term="python"></category></entry><entry><title>quaternions for python</title><link href="http://zonca.github.io/2010/06/quaternions-for-python.html" rel="alternate"></link><published>2010-06-21T07:21:00-07:00</published><updated>2010-06-21T07:21:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-06-21:/2010/06/quaternions-for-python.html</id><summary type="html">&lt;p&gt;
 the situation is pretty problematic, I hope someday
 &lt;strong&gt;
  scipy
 &lt;/strong&gt;
 will add a python package for rotating and interpolating quaternions, up to now:
 &lt;br/&gt;
&lt;/p&gt;

&lt;ul&gt;
 &lt;br/&gt;
 &lt;li&gt;
  &lt;a href="http://cgkit.sourceforge.net/doc2/quat.html"&gt;
   http://cgkit.sourceforge.net/doc2/quat.html
  &lt;/a&gt;
  : slow, bad interaction with numpy, I could not find a simple way to turn a list of N quaternions to a …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 the situation is pretty problematic, I hope someday
 &lt;strong&gt;
  scipy
 &lt;/strong&gt;
 will add a python package for rotating and interpolating quaternions, up to now:
 &lt;br/&gt;
&lt;/p&gt;

&lt;ul&gt;
 &lt;br/&gt;
 &lt;li&gt;
  &lt;a href="http://cgkit.sourceforge.net/doc2/quat.html"&gt;
   http://cgkit.sourceforge.net/doc2/quat.html
  &lt;/a&gt;
  : slow, bad interaction with numpy, I could not find a simple way to turn a list of N quaternions to a 4xN array without a loop
 &lt;/li&gt;
 &lt;br/&gt;
 &lt;li&gt;
  &lt;a href="http://cxc.harvard.edu/mta/ASPECT/tool_doc/pydocs/Quaternion.html"&gt;
   http://cxc.harvard.edu/mta/ASPECT/tool_doc/pydocs/Quaternion.html
  &lt;/a&gt;
  : more lightweight, does not implement quaternion interpolation
 &lt;/li&gt;
 &lt;br/&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="python"></category><category term="physics"></category></entry><entry><title>change permission recursively to folders only</title><link href="http://zonca.github.io/2010/03/change-permission-recursively-to.html" rel="alternate"></link><published>2010-03-23T17:58:00-07:00</published><updated>2010-03-23T17:58:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-03-23:/2010/03/change-permission-recursively-to.html</id><content type="html">&lt;p&gt;&lt;code&gt;
 find . -type d -exec chmod 777 {} \;
&lt;/code&gt;&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category></entry><entry><title>aptitude search 'and'</title><link href="http://zonca.github.io/2010/03/aptitude-search.html" rel="alternate"></link><published>2010-03-16T22:50:00-07:00</published><updated>2010-03-16T22:50:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-03-16:/2010/03/aptitude-search.html</id><content type="html">&lt;p&gt;
 this is really something
 &lt;strong&gt;
  really annoying
 &lt;/strong&gt;
 about aptitude, if you run:
 &lt;br/&gt;
 &lt;code&gt;
  aptitude search linux headers
 &lt;/code&gt;
 &lt;br/&gt;
 it will make an 'or' search...to perform a 'and' search, which I need 99.9% of the time, you need quotation marks:
 &lt;br/&gt;
 &lt;code&gt;
  aptitude search 'linux headers'
 &lt;/code&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="ubuntu"></category></entry><entry><title>using numpy dtype with loadtxt</title><link href="http://zonca.github.io/2010/03/using-numpy-dtype-with-loadtxt.html" rel="alternate"></link><published>2010-03-03T22:49:00-08:00</published><updated>2010-03-03T22:49:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-03-03:/2010/03/using-numpy-dtype-with-loadtxt.html</id><summary type="html">&lt;p&gt;
 Let's say you want to read a text file like this:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;br/&gt;
&lt;/p&gt;

&lt;blockquote&gt;
 #filename start end
 &lt;br/&gt;
 fdsafda.fits 23143214 23143214
 &lt;br/&gt;
 safdsafafds.fits 21423 23423432
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;a name="more"&gt;
&lt;/a&gt;
&lt;br/&gt;
you can use dtype to create a custom array, which is very flexible as you can work by row or columns with strings and floats in the same …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Let's say you want to read a text file like this:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;br/&gt;
&lt;/p&gt;

&lt;blockquote&gt;
 #filename start end
 &lt;br/&gt;
 fdsafda.fits 23143214 23143214
 &lt;br/&gt;
 safdsafafds.fits 21423 23423432
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;a name="more"&gt;
&lt;/a&gt;
&lt;br/&gt;
you can use dtype to create a custom array, which is very flexible as you can work by row or columns with strings and floats in the same array:
&lt;br/&gt;
&lt;code&gt;
 dt=np.dtype({'names':['filename','start','end'],'formats':['S100',np.float,np.float]})
 &lt;br/&gt;
&lt;/code&gt;
[I tried also using np.str instead of S100 without success, anyone knows why?]
&lt;br/&gt;
then give this as input to loadtxt to load the file and create the array.
&lt;br/&gt;
&lt;code&gt;
 a = np.loadtxt(open('yourfile.txt'),dtype=dt)
&lt;/code&gt;
&lt;br/&gt;
so each element is:
&lt;br/&gt;
&lt;code&gt;
 ('dsafsadfsadf.fits', 1.6287776249537126e+18, 1.6290301584937428e+18)
 &lt;br/&gt;
&lt;/code&gt;
&lt;br/&gt;
but you can get the array of start or end times using:
&lt;br/&gt;
&lt;code&gt;
 a['start']
&lt;/code&gt;&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="python"></category><category term="numpy"></category></entry><entry><title>Stop ipcluster from a script</title><link href="http://zonca.github.io/2010/02/stop-ipcluster-from-script.html" rel="alternate"></link><published>2010-02-19T02:23:00-08:00</published><updated>2010-02-19T02:23:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-02-19:/2010/02/stop-ipcluster-from-script.html</id><content type="html">&lt;p&gt;
 Ipcluster is easy to start but not trivial to stop from a script, after having finished the processing, here's the solution:
 &lt;br/&gt;
 &lt;code&gt;
  from IPython.kernel import client
  &lt;br/&gt;
  mec = client.MultiEngineClient()
  &lt;br/&gt;
  mec.kill(controller=True)
 &lt;/code&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="parallel programming"></category><category term="python"></category></entry><entry><title>Correlation</title><link href="http://zonca.github.io/2010/01/correlation.html" rel="alternate"></link><published>2010-01-28T00:45:00-08:00</published><updated>2010-01-28T00:45:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-01-28:/2010/01/correlation.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;
 Expectation value
&lt;/strong&gt;
or first moment of a random variable is the probability weighted sum of the possible values (weighted mean).
&lt;br/&gt;
Expectation value of a 6-dice is 1+2+3+4+5+6 / 6 = 3.5
&lt;br/&gt;
&lt;br/&gt;
&lt;strong&gt;
 Covariance
&lt;/strong&gt;
of 2 random variables is:
&lt;br/&gt;
&lt;code&gt;
 COV(X,Y)=E[(X-E(X))(Y-E(Y))]=E …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;
 Expectation value
&lt;/strong&gt;
or first moment of a random variable is the probability weighted sum of the possible values (weighted mean).
&lt;br/&gt;
Expectation value of a 6-dice is 1+2+3+4+5+6 / 6 = 3.5
&lt;br/&gt;
&lt;br/&gt;
&lt;strong&gt;
 Covariance
&lt;/strong&gt;
of 2 random variables is:
&lt;br/&gt;
&lt;code&gt;
 COV(X,Y)=E[(X-E(X))(Y-E(Y))]=E(X&lt;em&gt;Y) - E(X)E(Y)
&lt;/code&gt;
&lt;br/&gt;
i.e. the difference between the expected value of their product and the product of their expected values.
&lt;br/&gt;
So if the variables change together, they will have a high covariance, if they are independent, their covariance is zero.
&lt;br/&gt;
&lt;br/&gt;
&lt;strong&gt;
 Variance
&lt;/strong&gt;
is the covariance on the same variable, :
&lt;br/&gt;
&lt;code&gt;
 COV(X,X)=VAR(X)=E(X&lt;strong&gt;2) - E(X)&lt;/strong&gt;2
&lt;/code&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;strong&gt;
 Standard deviation
&lt;/strong&gt;
is the square root of Variance
&lt;br/&gt;
&lt;br/&gt;
&lt;strong&gt;
 Correlation
&lt;/strong&gt;
is:
&lt;br/&gt;
&lt;code&gt;
 COR(X,Y)=COV(X,Y)/STDEV(X)&lt;/em&gt;STDEV(Y)
&lt;/code&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;a href="http://mathworld.wolfram.com/Covariance.html"&gt;
 http://mathworld.wolfram.com/Covariance.html
&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="physics"></category></entry><entry><title>execute bash script remotely with ssh</title><link href="http://zonca.github.io/2010/01/execute-bash-script-remotely-with-ssh.html" rel="alternate"></link><published>2010-01-07T14:37:00-08:00</published><updated>2010-01-07T14:37:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-01-07:/2010/01/execute-bash-script-remotely-with-ssh.html</id><content type="html">&lt;p&gt;
 a bash script launched remotely via ssh does not load the environment, if this is an issue it is necessary to specify --login when calling bash:
 &lt;br/&gt;
 &lt;br/&gt;
 &lt;code&gt;
  ssh user@remoteserver.com 'bash --login life_om/cronodproc' | mail your@email.com -s cronodproc
 &lt;/code&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="bash"></category></entry><entry><title>lock pin hold a package using apt on ubuntu</title><link href="http://zonca.github.io/2010/01/lock-pin-hold-package-using-apt-on.html" rel="alternate"></link><published>2010-01-07T13:49:00-08:00</published><updated>2010-01-07T13:49:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-01-07:/2010/01/lock-pin-hold-package-using-apt-on.html</id><content type="html">&lt;p&gt;
 set hold:
 &lt;br/&gt;
 &lt;code&gt;
  echo packagename hold | dpkg --set-selections
 &lt;/code&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 check, should be
 &lt;strong&gt;
  hi
 &lt;/strong&gt;
 :
 &lt;br/&gt;
 &lt;code&gt;
  dpkg -l packagename
 &lt;/code&gt;
 &lt;br/&gt;
 &lt;br/&gt;
 unset hold:
 &lt;br/&gt;
 &lt;code&gt;
  echo packagename install | dpkg --set-selections
 &lt;/code&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="ubuntu"></category></entry><entry><title>load arrays from a text file with numpy</title><link href="http://zonca.github.io/2010/01/load-arrays-from-text-file-with-numpy.html" rel="alternate"></link><published>2010-01-05T16:32:00-08:00</published><updated>2010-01-05T16:32:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2010-01-05:/2010/01/load-arrays-from-text-file-with-numpy.html</id><content type="html">&lt;p&gt;
 space separated text file with 5 arrays in columns:
 &lt;br/&gt;
 &lt;br/&gt;
 [sourcecode language="python"]
 &lt;br/&gt;
 ods,rings,gains,offsets,rparams = np.loadtxt(filename,unpack=True)
 &lt;br/&gt;
 [/sourcecode]
 &lt;br/&gt;
 &lt;br/&gt;
 quite impressive...
&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="numpy"></category></entry><entry><title>Latest Maxima and WxMaxima for Ubuntu Karmic</title><link href="http://zonca.github.io/2009/12/latest-maxima-and-wxmaxima-for-ubuntu.html" rel="alternate"></link><published>2009-12-15T11:20:00-08:00</published><updated>2009-12-15T11:20:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2009-12-15:/2009/12/latest-maxima-and-wxmaxima-for-ubuntu.html</id><content type="html">&lt;p&gt;&lt;a href="http://zeus.nyf.hu/~blahota/maxima/karmic/" title="maxima for ubuntu"&gt;
 http://zeus.nyf.hu/~blahota/maxima/karmic/
&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;
on maxima mailing lists they suggested to install the sbcl built, so I first installed sbcl from the Ubuntu repositories and then maxima and wxmaxima f
&lt;br/&gt;
rom this url.&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="maxima"></category><category term="ubuntu"></category></entry><entry><title>number of files in a folder and subfolders</title><link href="http://zonca.github.io/2009/12/number-of-files-in-folder-and-subfolders.html" rel="alternate"></link><published>2009-12-10T18:16:00-08:00</published><updated>2009-12-10T18:16:00-08:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2009-12-10:/2009/12/number-of-files-in-folder-and-subfolders.html</id><content type="html">&lt;p&gt;
 folders are not counted
 &lt;br/&gt;
 &lt;code&gt;
  find . -type f | wc -l
 &lt;/code&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="bash"></category></entry><entry><title>forcefully unmount a disk partition</title><link href="http://zonca.github.io/2008/09/forcefully-unmount-disk-partition.html" rel="alternate"></link><published>2008-09-17T15:14:00-07:00</published><updated>2008-09-17T15:14:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2008-09-17:/2008/09/forcefully-unmount-disk-partition.html</id><content type="html">&lt;p&gt;
 check which processes are accessing a partition:
 &lt;br/&gt;
 &lt;br/&gt;
 [sourcecode language="python"]lsof | grep '/opt'[/sourcecode]
 &lt;br/&gt;
 &lt;br/&gt;
 kill all the processes accessing the partition (check what you're killing, you could loose data):
 &lt;br/&gt;
 &lt;br/&gt;
 [sourcecode language="python"]fuser -km /mnt[/sourcecode]
 &lt;br/&gt;
 &lt;br/&gt;
 try to unmount now:
 &lt;br/&gt;
 [sourcecode language="python"]umount /opt[/sourcecode]
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category></entry><entry><title>netcat: quickly send binaries through network</title><link href="http://zonca.github.io/2008/04/netcat-quickly-send-binaries-through.html" rel="alternate"></link><published>2008-04-29T12:25:00-07:00</published><updated>2008-04-29T12:25:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2008-04-29:/2008/04/netcat-quickly-send-binaries-through.html</id><summary type="html">&lt;p&gt;
 just start nc in server mode on localhost:
 &lt;br/&gt;
 &lt;br/&gt;
 [sourcecode language='python'] nc -l -p 3333 [/sourcecode]
 &lt;br/&gt;
 &lt;br/&gt;
 send a string to localhost on port 3333:
 &lt;br/&gt;
 &lt;br/&gt;
 [sourcecode language='python'] echo "hello world" | nc localhost 3333 [/sourcecode]
 &lt;br/&gt;
 &lt;br/&gt;
 you'll see on server side appearing the string you sent.
 &lt;br/&gt;
 &lt;br/&gt;
 very useful for sending binaries, see …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 just start nc in server mode on localhost:
 &lt;br/&gt;
 &lt;br/&gt;
 [sourcecode language='python'] nc -l -p 3333 [/sourcecode]
 &lt;br/&gt;
 &lt;br/&gt;
 send a string to localhost on port 3333:
 &lt;br/&gt;
 &lt;br/&gt;
 [sourcecode language='python'] echo "hello world" | nc localhost 3333 [/sourcecode]
 &lt;br/&gt;
 &lt;br/&gt;
 you'll see on server side appearing the string you sent.
 &lt;br/&gt;
 &lt;br/&gt;
 very useful for sending binaries, see
 &lt;a href="http://www.g-loaded.eu/2006/11/06/netcat-a-couple-of-useful-examples/"&gt;
  examples
 &lt;/a&gt;
 .
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category></entry><entry><title>Decibels, dB and dBm, in terms of Power and Amplitude</title><link href="http://zonca.github.io/2008/03/decibels-db-and-dbm-in-terms-of-power.html" rel="alternate"></link><published>2008-03-29T02:13:00-07:00</published><updated>2008-03-29T02:13:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2008-03-29:/2008/03/decibels-db-and-dbm-in-terms-of-power.html</id><summary type="html">&lt;p&gt;
 It's not difficult, just always having some doubts...
 &lt;br/&gt;
&lt;/p&gt;

&lt;h4&gt;
 Power
&lt;/h4&gt;

&lt;p&gt;&lt;br/&gt;
$latex L_{dB} = 10 log_{10} \left( \dfrac{P_1}{P_0} \right) $
&lt;br/&gt;
&lt;br/&gt;
10 dB increase for a factor 10 increase in the ratio
&lt;br/&gt;
&lt;br/&gt;
3 dB = doubling
&lt;br/&gt;
&lt;br/&gt;
40 dB = 10000 times
&lt;br/&gt;
&lt;h4&gt;
 Amplitude
&lt;/h4&gt;
&lt;br/&gt;
$latex L_{dB} = 10 log_{10} \left( \dfrac{A_1^2}{A_0 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 It's not difficult, just always having some doubts...
 &lt;br/&gt;
&lt;/p&gt;

&lt;h4&gt;
 Power
&lt;/h4&gt;

&lt;p&gt;&lt;br/&gt;
$latex L_{dB} = 10 log_{10} \left( \dfrac{P_1}{P_0} \right) $
&lt;br/&gt;
&lt;br/&gt;
10 dB increase for a factor 10 increase in the ratio
&lt;br/&gt;
&lt;br/&gt;
3 dB = doubling
&lt;br/&gt;
&lt;br/&gt;
40 dB = 10000 times
&lt;br/&gt;
&lt;h4&gt;
 Amplitude
&lt;/h4&gt;
&lt;br/&gt;
$latex L_{dB} = 10 log_{10} \left( \dfrac{A_1^2}{A_0^2} \right) = 20 log_{10} \left( \dfrac{A_1}{A_0} \right)  $
&lt;br/&gt;
&lt;h4&gt;
 dBm
&lt;/h4&gt;
&lt;br/&gt;
dBm is an absolute value obtained by a ratio with 1 mW:
&lt;br/&gt;
&lt;br/&gt;
$latex L_{dBm} = 10 log_{10} \left( \dfrac{P_1}{1 mW} \right) $
&lt;br/&gt;
&lt;ul&gt;
 &lt;br/&gt;
 &lt;li&gt;
  0 dBm = 1 mW
 &lt;/li&gt;
 &lt;br/&gt;
 &lt;li&gt;
  3 dBm ≈ 2 mW
 &lt;/li&gt;
 &lt;br/&gt;
&lt;/ul&gt;&lt;/p&gt;</content><category term="misc"></category><category term="general physics"></category><category term="physics"></category></entry><entry><title>Relation between Power density and temperature in an antenna</title><link href="http://zonca.github.io/2008/03/relation-between-power-density-and.html" rel="alternate"></link><published>2008-03-28T18:29:00-07:00</published><updated>2008-03-28T18:29:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2008-03-28:/2008/03/relation-between-power-density-and.html</id><summary type="html">&lt;p&gt;
 Considering an antenna placed inside a blackbody enclosure at temperature T, the power received per unit bandwidth is:
 &lt;br/&gt;
 $latex \omega = kT$
 &lt;br/&gt;
 &lt;br/&gt;
 where k is Boltzmann constant.
 &lt;br/&gt;
 &lt;br/&gt;
 This relationship derives from considering a constant brightness $latex B$ in all directions, therefore Rayleigh Jeans law tells:
 &lt;br/&gt;
 &lt;br/&gt;
 $latex B = \dfrac{2kT}{\lambda^2 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Considering an antenna placed inside a blackbody enclosure at temperature T, the power received per unit bandwidth is:
 &lt;br/&gt;
 $latex \omega = kT$
 &lt;br/&gt;
 &lt;br/&gt;
 where k is Boltzmann constant.
 &lt;br/&gt;
 &lt;br/&gt;
 This relationship derives from considering a constant brightness $latex B$ in all directions, therefore Rayleigh Jeans law tells:
 &lt;br/&gt;
 &lt;br/&gt;
 $latex B = \dfrac{2kT}{\lambda^2}$
 &lt;br/&gt;
 &lt;br/&gt;
 Power per unit bandwidth is obtained by integrating brightness over antenna beam
 &lt;br/&gt;
 &lt;br/&gt;
 $latex \omega = \frac{1}{2} A_e \int \int B \left( \theta , \phi \right) P_n \left( \theta , \phi \right) d \Omega  $
 &lt;br/&gt;
 &lt;br/&gt;
 therefore
 &lt;br/&gt;
 &lt;br/&gt;
 $latex \omega = \dfrac{kT}{\lambda^2}A_e\Omega_A $
 &lt;br/&gt;
 &lt;br/&gt;
 where:
 &lt;br/&gt;
&lt;/p&gt;

&lt;ul&gt;
 &lt;br/&gt;
 &lt;li&gt;
  $latex A_e$ is antenna effective aperture
 &lt;/li&gt;
 &lt;br/&gt;
 &lt;li&gt;
  $latex \Omega_A$ is antenna beam area
 &lt;/li&gt;
 &lt;br/&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
$latex \lambda^2 = A_e\Omega_A $ another post should talk about this
&lt;br/&gt;
&lt;br/&gt;
finally:
&lt;br/&gt;
&lt;br/&gt;
$latex \omega = kT $
&lt;br/&gt;
&lt;br/&gt;
which is the same noise power of a resistor.
&lt;br/&gt;
&lt;br/&gt;
source : Kraus Radio Astronomy pag 107&lt;/p&gt;</content><category term="misc"></category><category term="astrophysics"></category><category term="physics"></category></entry><entry><title>Producing PDF from XML files</title><link href="http://zonca.github.io/2008/03/producing-pdf-from-xml-files.html" rel="alternate"></link><published>2008-03-28T16:27:00-07:00</published><updated>2008-03-28T16:27:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2008-03-28:/2008/03/producing-pdf-from-xml-files.html</id><summary type="html">&lt;p&gt;
 I need to produce formatted pdf from XML data input file.
 &lt;br/&gt;
 The more standard way looks like to use
 &lt;a href="http://www.w3schools.com/xsl" title="w3schools tutorial"&gt;
  XSL stylesheets.
 &lt;/a&gt;
 &lt;br/&gt;
 Associating a XSL sheet to an XML file permits most browsers to render them directly as HMTL, this can be used for web publishing XML sheets.
 &lt;br/&gt;
 &lt;br/&gt;
 The quick and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 I need to produce formatted pdf from XML data input file.
 &lt;br/&gt;
 The more standard way looks like to use
 &lt;a href="http://www.w3schools.com/xsl" title="w3schools tutorial"&gt;
  XSL stylesheets.
 &lt;/a&gt;
 &lt;br/&gt;
 Associating a XSL sheet to an XML file permits most browsers to render them directly as HMTL, this can be used for web publishing XML sheets.
 &lt;br/&gt;
 &lt;br/&gt;
 The quick and dirty way to produce PDF could be printing them from Firefox, but an interesting option is to use
 &lt;a href="http://http://cyberelk.net/tim/software/xmlto/" title="xmlto homepage"&gt;
  xmlto
 &lt;/a&gt;
 , a script for running a XSL transformation and render an XML in PDF or other formats. It would be interesting to test this script and understand if it needs just docbook XML input or any XML.
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category></entry><entry><title>vim costumization</title><link href="http://zonca.github.io/2006/10/vim-costumization.html" rel="alternate"></link><published>2006-10-17T10:49:00-07:00</published><updated>2006-10-17T10:49:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2006-10-17:/2006/10/vim-costumization.html</id><content type="html">&lt;p&gt;
 it is about perl but it suggests very useful tricks for programming with vim
 &lt;br/&gt;
 http://mamchenkov.net/wordpress/2004/05/10/vim-for-perl-developers/
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category></entry><entry><title>using gnu find</title><link href="http://zonca.github.io/2006/10/using-gnu-find.html" rel="alternate"></link><published>2006-10-03T14:00:00-07:00</published><updated>2006-10-03T14:00:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2006-10-03:/2006/10/using-gnu-find.html</id><content type="html">&lt;p&gt;
 list all the directories excluding ".":
 &lt;br/&gt;
&lt;/p&gt;

&lt;blockquote&gt;
 find . -maxdepth 1 -type d -not -name ".*"
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;
find some string in all files matching a pattern in the subfolders (with grep -r you cannot specify the type of file)
&lt;br/&gt;
&lt;blockquote&gt;
 find . -name '*.py' -exec grep -i pdb '{}' \;
&lt;/blockquote&gt;&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="bash"></category></entry><entry><title>beginners bash guide</title><link href="http://zonca.github.io/2006/10/beginners-bash-guide.html" rel="alternate"></link><published>2006-10-03T13:56:00-07:00</published><updated>2006-10-03T13:56:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2006-10-03:/2006/10/beginners-bash-guide.html</id><content type="html">&lt;p&gt;
 great guide with many examples:
 &lt;br/&gt;
 &lt;br/&gt;
 http://tille.xalasys.com/training/bash/
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="bash"></category></entry><entry><title>tar quickref</title><link href="http://zonca.github.io/2006/09/tar-quickref.html" rel="alternate"></link><published>2006-09-25T13:19:00-07:00</published><updated>2006-09-25T13:19:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2006-09-25:/2006/09/tar-quickref.html</id><content type="html">&lt;p&gt;
 compress: tar cvzf foo.tgz *.cc *.h
 &lt;br/&gt;
 check inside: tar tzf foo.tgz | grep file.txt
 &lt;br/&gt;
 extract: tar xvzf foo.tgz
 &lt;br/&gt;
 extract 1 file only: tar xvzf foo.tgz path/to/file.txt
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="bash"></category></entry><entry><title>software carpentry</title><link href="http://zonca.github.io/2006/09/software-carpentry.html" rel="alternate"></link><published>2006-09-25T12:51:00-07:00</published><updated>2006-09-25T12:51:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2006-09-25:/2006/09/software-carpentry.html</id><content type="html">&lt;p&gt;
 basic software for scientists and engineers:
 &lt;br/&gt;
 http://www.swc.scipy.org/
 &lt;br/&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="physics"></category></entry><entry><title>Software libero per il trattamento di dati scientifici</title><link href="http://zonca.github.io/2006/09/software-libero-per-il-trattamento-di.html" rel="alternate"></link><published>2006-09-22T13:35:00-07:00</published><updated>2006-09-22T13:35:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2006-09-22:/2006/09/software-libero-per-il-trattamento-di.html</id><content type="html">&lt;p&gt;
 nella ricerca del miglior ambiente per analisi di dati scientifici da leggere questi articoli:
 &lt;br/&gt;
 &lt;br/&gt;
 http://www.pluto.it/files/journal/pj0501/swlibero-scie1.html
 &lt;br/&gt;
 &lt;br/&gt;
 http://www.pluto.it/files/journal/pj0504/swlibero-scie2.html
 &lt;br/&gt;
 &lt;br/&gt;
 http://www.pluto.it/files/journal/pj0505/swlibero-scie3.html
&lt;/p&gt;</content><category term="misc"></category><category term="italian"></category><category term="linux"></category><category term="physics"></category></entry><entry><title>command line processing</title><link href="http://zonca.github.io/2006/09/command-line-processing.html" rel="alternate"></link><published>2006-09-22T13:34:00-07:00</published><updated>2006-09-22T13:34:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2006-09-22:/2006/09/command-line-processing.html</id><content type="html">&lt;p&gt;
 Very useful summary of many linux command line processing tools (great perl onliners)
 &lt;br/&gt;
 &lt;br/&gt;
 http://grad.physics.sunysb.edu/~leckey/personal/forget/
&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="bash"></category></entry><entry><title>awk made easy</title><link href="http://zonca.github.io/2006/09/awk-made-easy.html" rel="alternate"></link><published>2006-09-22T13:20:00-07:00</published><updated>2006-09-22T13:20:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2006-09-22:/2006/09/awk-made-easy.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;
 awk '/REGEX/ {print NR "\t" $9 "\t" $4"_"$5 ;}' file.txt
&lt;/strong&gt;
&lt;br/&gt;
supports extended REGEX like perl (       e.g. [:blank:]  Space or tab characters )
&lt;br/&gt;
NR is line number
&lt;br/&gt;
NF                Number of fields
&lt;br/&gt;
$n is the column to be printed, $0 is the whole row
&lt;br/&gt;
&lt;br/&gt;
if it only necessary to print …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;
 awk '/REGEX/ {print NR "\t" $9 "\t" $4"_"$5 ;}' file.txt
&lt;/strong&gt;
&lt;br/&gt;
supports extended REGEX like perl (       e.g. [:blank:]  Space or tab characters )
&lt;br/&gt;
NR is line number
&lt;br/&gt;
NF                Number of fields
&lt;br/&gt;
$n is the column to be printed, $0 is the whole row
&lt;br/&gt;
&lt;br/&gt;
if it only necessary to print columns of a file it is easier to use cut:
&lt;br/&gt;
&lt;br/&gt;
name -a | cut -d" " -f1,3,11,12
&lt;br/&gt;
&lt;br/&gt;
-d: or -d" " is the delimiter
&lt;br/&gt;
-f1,3 are the fields to be displayed
&lt;br/&gt;
other options: -s doesnt show lines without delimiters, --complement is selfesplicative
&lt;br/&gt;
condition on a specific field:
&lt;br/&gt;
$&amp;lt;field&amp;gt; ~ /&amp;lt;string&amp;gt;/   Search for string in specified field.
&lt;br/&gt;
&lt;br/&gt;
you can use awk also in pipes:
&lt;br/&gt;
ll | awk 'NR!=1 {s+=$5} END {print "Average: " s/(NR-1)}'
&lt;br/&gt;
END to process al file and then print results
&lt;br/&gt;
&lt;br/&gt;
tutorial on using awk from the command line:
&lt;br/&gt;
&lt;a href="http://www.vectorsite.net/tsawk_3.html#m1" target="_blank" title="awk tutorial"&gt;
 http://www.vectorsite.net/tsawk_3.html#m1
&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="linux"></category><category term="bash"></category></entry><entry><title>pillole di astrofisica</title><link href="http://zonca.github.io/2006/09/pillole-di-astrofisica.html" rel="alternate"></link><published>2006-09-20T13:39:00-07:00</published><updated>2006-09-20T13:39:00-07:00</updated><author><name>Andrea Zonca</name></author><id>tag:zonca.github.io,2006-09-20:/2006/09/pillole-di-astrofisica.html</id><content type="html">&lt;p&gt;
 curiosita' ben spiegate da annibale d'ercole, interessante l'idea di avere un livello base e un livello avanzato
 &lt;br/&gt;
 &lt;a href="http://www.bo.astro.it/sait/spigolature/spigostart.html" target="_blank" title="spigolature astronomiche"&gt;
  http://www.bo.astro.it/sait/spigolature/spigostart.html
 &lt;/a&gt;
&lt;/p&gt;</content><category term="misc"></category><category term="italian"></category><category term="astrophysics"></category><category term="physics"></category></entry></feed>